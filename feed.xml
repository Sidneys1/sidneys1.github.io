<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sidneys1.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sidneys1.github.io/" rel="alternate" type="text/html" /><updated>2024-02-09T20:43:56-05:00</updated><id>https://sidneys1.github.io/feed.xml</id><title type="html">Sidneys1.com on GitHub Pages</title><subtitle>A home for all my ramblings on subjects such as programming, cybersecurity, photography, videography, video games, and whatever else I see fit.</subtitle><author><name>Sidneys1</name><email>your-email@domain.com</email></author><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2024-02-01T00:00:00-05:00</published><updated>2024-02-01T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÀ -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. In this part, we’ll investigate whether we can
enter an “editor mode”, hinted at within the <code class="language-plaintext highlighter-rouge">strings</code> contained within the program. There’s even a
✨<span class="shimmer">surprise ending</span>✨ that I didn’t see coming!</p>

<!--more-->
<hr />

<p>Here’s where we left off, investigating the disassembly of a function that references a mysterious string:
<code class="language-plaintext highlighter-rouge">*** EDITOR MODE ***</code>. Cleaning the disassembly up and commenting to be a bit to be more readable gives us:</p>

<div class="code-split-root" data-file-name=".cpp"><div class="code-split-scroll">

    <div style="--left: 8;" class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Because `param_1` from the disassembly (aka `this`) is passed to</span>
<span class="c1">// `CWnd::SetWindowTextA` at the end, this function probably belongs</span>
<span class="c1">// to a class inheriting `CWnd`.</span>
<span class="k">class</span> <span class="nc">CGameWnd</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CWnd</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">CGameWnd</span><span class="o">::</span><span class="n">_updateWindowTitle</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// Don't do anything if we're in fullscreen mode.</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">gFullscreen</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
	<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">unknown_334</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// If the variable at offset 0x334 is not 0/FALSE/NULL,</span>
		<span class="c1">// we have a file loaded.</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge" style="--left: 8;"><div class="highlight"><pre class="highlight"><code>		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">unknown_3714</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="c1">// If the variable at offset 0x3714 is 0/FALSE/NULL,</span>
			<span class="c1">// we're in "editor mode"... whatever that is!</span>
			<span class="c1">// Append text indicating this to the buffer.</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - *** EDITOR MODE ***"</span><span class="p">);</span>
		<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge" style="--left: 4;"><div class="highlight"><pre class="highlight"><code>	<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1">// Set the window title to the contents of the buffer.</span>
	<span class="k">this</span><span class="o">-&gt;</span><span class="n">SetWindowTextA</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>

  </div></div>

<p>Ok! So to activate editor mode, we need to <strong>1)</strong> not be fullscreen, <strong>2)</strong> have <code class="language-plaintext highlighter-rouge">CGameWnd-&gt;unknown_334</code> be non-zero,
and <strong>3)</strong> have <code class="language-plaintext highlighter-rouge">CGameWnd-&gt;unknown_3714</code> be zero. Enabling fullscreen (via the <samp>3d.ini</samp> file described in
part II) no longer seems to crash my game (that must have been a mistake of mine!). The game starts and plays in
fullscreen, and the title even updates between “Paused, Press ‘p’ to resume.” and “Running…” when we press
<kbd>P</kbd>!</p>

<div>

  <aside>

    <p>While I could use a debugger to change the value at runtime, this is the only place the value is read, so we can assume
that any editor mode functionality has also been stripped out…</p>

  </aside>

  <p>But try as I might, <span class="aside-attn">no amount of reverse engineering is allowing me to toggle the
<code class="language-plaintext highlighter-rouge">unknown_3714</code> variable</span>. No code even exists (that I can find) to change it, except during initialization or
loading of levels, when it’s always set to <code class="language-plaintext highlighter-rouge">TRUE</code>. So I have a theory: there <em>was</em> an editor mode, but its functionality
has been “removed” behind something like <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>.</p>

</div>

<p>Well then! Without a deus ex machina, it looks like we’ll never break into the “editor mode”. I reached out to the
community to see if anyone knew more about the game itself, or had heard of a source code leak for this nearly 30 year
old game. A few people were even so kind as to search Usenet for me. But nothing was turning up. A few months passed and
I’d pretty much given up on ever finishing this part III post.</p>

<h2 id="vindication"><a href="https://c.tenor.com/vV7u0Ur7I0YAAAAd/tenor.gif" target="_blank" referrerpolicy="no-referrer">Vindication!</a></h2>

<div class="chat rfloat">
	<div class="bubble from-them">
		<q>You could try downloading this SSK@<span class="blur">YoUTHinkYOUrecLeVeRdONtYou?</span>/SSPYTH.zip</q>
	</div>
	<div class="bubble from-them">
		<q>Its password seems to be the file name.</q>
	</div>
</div>

<p>Months after I’d given up I received an encrypted message, sent to the SimpleX address listed in my website footer. It
didn’t contain much more than a Freenet hash. I hurriedly installed a client and accessed the hash — the file
downloaded — the password worked — and inside? <span class="shimmer">Beautiful, wonderful source
code</span>, with “last modified” dates ranging from <em>December 1995 to January 1997</em>! And sure enough, there are several
instances of <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code> that block the “Editor Mode” from being used, as I suspected! In fact, editor mode is
implemented as a completely separate static library, that is only linked into the executable when editor mode is to be
used. No wonder none of the relevant code can be found when reverse engineering the released binary!</p>

<p>Now that we have source code and can fully analyze the game in the ground truth, let’s poke around and see what we can
find. The source code is laid out as follows:</p>

<ul>
  <li>📁 <samp>3DLIB</samp> - <em>The core 3D engine.</em>
    <ul>
      <li>📄 <em>Various Assembly, and C++ source and header files.</em></li>
    </ul>
  </li>
  <li>📁 <samp>EditLib</samp> - <em>Editor Mode functionality.</em>
    <ul>
      <li>📄 <em>Various C++ source and header files.</em></li>
    </ul>
  </li>
  <li>📁 <samp>RES</samp> - <em>The game icon in BMP and ICO formats.</em></li>
  <li>🔨 <em>Various Microsoft Developer Studio (Visual C++) files.</em></li>
  <li>📄 <em>Various C++ source and header files.</em></li>
  <li>📄 <em>Some example save files.</em></li>
  <li>⚙️ <samp>SSPYTH.EXE</samp> - <em>A compiled binary.</em></li>
  <li>🔧 <samp>3D.INI</samp> - <em>An example configuration file.</em></li>
</ul>

<h3 id="cheat-codes">Cheat Codes</h3>

<div>

  <aside>

    <p>A little more digging in Ghidra and I would have found them, as they print certain messages when activated and these
messages are visible as strings in the binary (even the unused codes!).</p>

  </aside>

  <p><span class="aside-attn">The game has a few cheat codes!</span> They can be activated by typing the code in during play,
as it keeps a buffer of the last 20 key presses. All cheat codes begin with <kbd>K</kbd> and are committed with
<kbd>L</kbd>:</p>

</div>

<div class="no-reverse">

  <table>
    <thead>
      <tr>
        <th style="text-align: right">                Cheat Code</th>
        <th style="text-align: center">Message</th>
        <th style="text-align: left">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>E</kbd><kbd>Y</kbd><kbd>1-4</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Add Key</samp></td>
        <td style="text-align: left">Gives the specified key (1-4).</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>W</kbd><kbd>N</kbd><kbd>0-9</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><samp>Add Weapon</samp></td>
        <td style="text-align: left">Gives the specified weapon (0-9) with max ammo.</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>V</kbd><kbd>U</kbd><kbd>R</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><samp>Add Strength, Shield</samp></td>
        <td style="text-align: left">Sets max strength, max shield, and dons the spacesuit.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>H</kbd><kbd>J</kbd><kbd>1-6</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><em>None</em></td>
        <td style="text-align: left">Gives the specified item (1-6), however items 2, 3, and 6 are not allowed to be given via this cheat.<br />The items 1-6 are: “health pack”, “light divider”, “time warper”, “drainer field”, “ultra drainer field,” and “reflection”.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>Y</kbd><kbd>H</kbd><kbd>R</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Add Everything</samp></td>
        <td style="text-align: left">Adds all keys, weapons, and allowed items.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>N</kbd><kbd>N</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Problem Debug Mode ON</samp><br /><samp>Problem Debug Mode OFF</samp></td>
        <td style="text-align: left">Toggles a mode in which math problems’ expected answers are printed.</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>01-27</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><em>None</em></td>
        <td style="text-align: left">Go to level 01-27.</td>
      </tr>
    </tbody>
  </table>

  <aside>

    <p>The strings <code class="language-plaintext highlighter-rouge">Add Key</code>, <code class="language-plaintext highlighter-rouge">Add Everything</code>, and <code class="language-plaintext highlighter-rouge">Problem Debug Mode %s</code> do actually exist in the release binary, but the
code to activate them (as well as the <code class="language-plaintext highlighter-rouge">KHJ#L</code> code) is not present. The source code I have does not have any mechanism
to remove it (e.g., a preprocessor directive), so my assumption is that some of the cheat codes were removed from the
“final” build of the game, but that these changes were not committed to the version of the source code I have access to.</p>

  </aside>

</div>

<h3 id="building-a-27-year-old-game">Building a 27 Year Old Game</h3>

<div class="clearfix">

  <div class="carousel__holder rfloat" style="" data-height="300px">
    <div id="carousel0" class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0b" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0c" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0d" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0d">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0b">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0a">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0c">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0b">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0d">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0c">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0a">&gt;</label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/dev-studio-opt.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/dev-studio-opt.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/open-workspace-opt.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/open-workspace-opt.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/select-project.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/select-project.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/rebuild-all.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/rebuild-all.png" style="" /></li>
            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="0a"></label>
            
              <label class="carousel__indicator" for="0b"></label>
            
              <label class="carousel__indicator" for="0c"></label>
            
              <label class="carousel__indicator" for="0d"></label>
            
        </div>
    </div>
</div>

  <style>
.carousel__holder {
	width: 100%;
	position: relative;
	padding-bottom: 300px;
	margin: 1rem 0 1rem;
}

@media screen and (max-width: 1800px) {
	.carousel__holder {
		padding-bottom: calc(min(40vh, 300px));
	}
}

@media screen and (min-width: 1800px) {
	.carousel__holder:is(.rfloat, .lfloat) {
		padding-bottom: calc(min(40%, 300px));
	}
}

.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}


.carousel__control {
  height: 100%;
  vertical-align: middle;
  /* width: 30px; */
  margin-top: -15px;
  top: calc(50% - 0.5em);
  position: absolute;
  display: block;
  cursor: pointer;
  /* border-width: 5px 5px 0 0;
  border-style: solid;
  border-color: #fafafa; */
  font-size: 48pt;
  color: #fafafa;
  font-weight: 900;
  text-shadow: 0 0 10px  black;
  opacity: 0.35;
  /* opacity: 1; */
  outline: 0;
  z-index: 3;
  transition: opacity 250ms linear;
  /* box-shadow: 0 0 10px black; */
}
.carousel__control:hover {
  opacity: 1;
  transition: opacity 250ms linear;
}
.carousel__control--backward {
  left: 20px;
  /* -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg); */
}
.carousel__control--forward {
  right: 20px;
  /* -webkit-transform: rotate(45deg);
          transform: rotate(45deg); */
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 10px;
  width: 10px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
  box-shadow: 0 0 10px black;
  transition: opacity 250ms linear;
}
.carousel__indicator:hover {
  opacity: 0.75;
  transition: opacity 250ms linear;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: flex;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}


.carousel--scale .carousel__slide {
  -webkit-transform: scale(0);
          transform: scale(0);
}
.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;

  /* background-size: contain;
  background-repeat: no-repeat;
  background-position: center; */
}
.carousel__slide img {
	display: block;
	width: auto;
	height: auto;
	max-width: 100%;
	max-height: 100%;
	box-shadow: unset;
}
.carousel__slide img:hover {
	box-shadow: unset;
}

.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color: #fafafa;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
}

</style>

  <p>Of course, the pièces de résistance of having access to the source code: editor mode! Let’s see what it takes to get it
working. First, we’ll need to get the source code building. Thanks to the lovely project <a href="https://dosbox-x.com/">DOSBox-X</a>, emulating
older Windows operating systems is as simple as following <a href="https://dosbox-x.com/wiki/Guide%3AInstalling-Windows-95">a guide</a>. I also sourced the following disk images:
<a href="https://archive.org/details/win-95-osr-2">Windows 95 OSR2</a><sup id="fnref:osr2" role="doc-noteref"><a href="#fn:osr2" class="footnote" rel="footnote">1</a></sup>, <a href="https://winworldpc.com/product/visual-c/4x">Visual C++ 4.2</a>, the <a href="https://archive.org/details/gamesdk">DirectX 1.0 SDK</a>, and the
<a href="https://archive.org/details/the-net-cd">ActiveMovie SDK</a><sup id="fnref:amalt" role="doc-noteref"><a href="#fn:amalt" class="footnote" rel="footnote">2</a></sup> (this disk contains many other interesting installers as well). If you’re planning on
building up such a virtual machine yourself, you’ll have to find your own product keys, sorry.</p>

  <p>Breezing through the guide leaves us with a fully functional Windows 95 install, with Visual C++ 4.2 (which includes the
Microsoft Developer Studio IDE - which we’ll need), the DirectX SDK, and the ActiveMovie SDK. Our source code contains
an <code class="language-plaintext highlighter-rouge">.mdp</code> file, which is a Developer Studio project, so let’s open it and build the default project with
<kbd><kbd>Ctrl</kbd>+<kbd>B</kbd></kbd>!</p>

</div>

<div class="code-split-root" data-file-name=".log"><div class="code-split-scroll">

    <div style="clear: both;" class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------Configuration: 3dlib - Win32 Debug--------------------
Compiling...
</code></pre></div>    </div>

    <div class="language-plaintext highlighter-rouge code-split"><div class="highlight">
<pre class="highlight">
<code>decomp.cpp
<span class="err">fatal error C1083: Cannot open source file: 'C:\Sspyth\3dlib\decomp.cpp': No such file or directory</span>

Error executing cl.exe.
Sspyth.exe - 1 error(s), 4 warning(s)
</code></pre></div></div>

  </div></div>

<p>Alright, some errors, but nothing we can’t solve. The first thing we notice is we’re missing a file
<samp>3DLIB\DECOMP.CPP</samp>. Poking around, we find there’s a file named <samp>3DLIB\aviDECOMP.CPP</samp>. A simple
file rename gets us past this error. Re-running the build gives us another error, now in the linking process. It can’t
seem to find the 3DLib and ActiveMovie libraries:</p>

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>e_frame.cpp
.\.\ztest.hpp(9) : <span class="err">fatal error C1083: Cannot open include file: 'strmif.h': No such file or directory</span>
</code></pre></div></div>

<div class="float-reverse">

  <p class="rfloat"><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/game-not-installed.png" alt="Game not installed" /></p>

  <p>That’s as easy as adding the full path to the ActiveMovie SDK’s include directory to the compiler path, and adding the
<samp>lib\StrmBase.lib</samp> file and the 3DLib output file to the linker properties. Our project now builds, and we
can verify that the game runs! Well, it tells us <samp>Game not installed, run the setup program.</samp>, but commenting
out a few lines in <code class="language-plaintext highlighter-rouge">CSspythApp::InitInstance()</code> fixes that:</p>

</div>

<div style="clear: both;" data-file-name="SSPYTH.CPP" class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Check for game installed</span>
<span class="c1">// char buffer[260];</span>
<span class="c1">// strcpy(buffer, "");</span>
<span class="c1">// GetRegString("Version", buffer, 20);</span>
<span class="c1">// if (strcmp(SSP_VERSION, buffer)) {</span>
<span class="c1">// 	AfxMessageBox("Game not installed, run the setup program.", MB_OK | MB_ICONSTOP);</span>
<span class="c1">// 	return FALSE;</span>
<span class="c1">// }</span>
</code></pre></div></div>

<p>Installing the game and pointing the <code class="language-plaintext highlighter-rouge">pakpath</code> setting in <samp>3D.INI</samp> to the install directory allows the game
to load assets and run!</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/game-running.png" alt="Game running" /></p>

<h3 id="editor-mode">Editor Mode</h3>

<p>So what do we need to enable editor mode? Let’s create a new build configuration just for this use case. We already know
we have to add <code class="language-plaintext highlighter-rouge">/D EDITOR</code> to the compiler settings, and doing so builds… and fails. Why now?</p>

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>sspyth.obj : <span class="err">error LNK2001: unresolved external symbol "public: void __thiscall CEditFrame::EditDoor(void *)"(?EditDoor@CEditFrame@@QAEXPAX@Z)
sspyth__/Sspyth.exe : fatal error LNK1120: 7 unresolved externals</span>
Error executing link.exe.
Sspyth.exe - 8 error(s), 0 warning(s)
</code></pre></div></div>

<p>Ah, EditLib! Let’s add that to our linker options as well and try again. This time the build succeeds and
we can run the game as before. Now, how do we activate it? We know so far that: <strong>1)</strong> the game has to be in windowed mode,
so we set <code class="language-plaintext highlighter-rouge">fullscreen=0</code> in <samp>3D.INI</samp>; and <strong>2)</strong> there are some mystery values in the main window class that must be
set just-so to be “in editor mode”. Thankfully now we can look at actual code! It turns out our
<code class="language-plaintext highlighter-rouge">CGameWnd::_updateWindowTitle()</code> decompilation above is actually named <code class="language-plaintext highlighter-rouge">CMainFrame::ShowPauseState()</code>:</p>

<div data-file-name="MainFrm.cpp" class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">CMainFrame</span><span class="o">::</span><span class="n">ShowPauseState</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">g_FullScreen</span><span class="p">)</span>
		<span class="k">return</span><span class="p">;</span>

	<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">m_game</span><span class="p">.</span><span class="n">m_pscene</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">char</span> <span class="n">drive</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="n">directory</span><span class="p">[</span><span class="mi">200</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">30</span><span class="p">],</span> <span class="n">extension</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
		<span class="n">_splitpath</span><span class="p">(</span><span class="n">FileName</span><span class="p">,</span> <span class="n">drive</span><span class="p">,</span> <span class="n">directory</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">extension</span><span class="p">);</span>
		<span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">"  S.S. Pythagoras  -  '%s'  "</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_game</span><span class="p">.</span><span class="n">m_GameMode</span><span class="p">)</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - *** EDITOR MODE ***"</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">m_game</span><span class="p">.</span><span class="n">Paused</span><span class="p">())</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - Paused,  press 'p' to resume."</span><span class="p">);</span>
		<span class="k">else</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - Running..."</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">"  S.S. Pythagoras  -  NO ACTIVE LEVEL"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">SetWindowText</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="float-reverse">

  <div class="rfloat"><div class="code-split-root" data-file-name="GAME.CPP"><div class="code-split-scroll">

        <div style="--left: 4" class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">CGame</span><span class="o">::</span><span class="n">Update</span><span class="p">(</span><span class="n">CKeyboard</span><span class="o">&amp;</span> <span class="n">keys</span><span class="p">)</span> <span class="p">{</span>
</code></pre></div>        </div>

        <div class="language-c++ code-split highlighter-rouge" style="--left: 4"><div class="highlight"><pre class="highlight"><code>	<span class="k">if</span> <span class="p">(</span><span class="n">keys</span><span class="p">.</span><span class="n">KeyDownWasUp</span><span class="p">(</span><span class="sc">'G'</span><span class="p">))</span>	<span class="p">{</span>
		<span class="n">m_GameMode</span> <span class="o">=</span> <span class="o">!</span><span class="n">m_GameMode</span><span class="p">;</span>
		<span class="n">GetMainFrame</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ShowPauseState</span><span class="p">();</span>
	<span class="p">}</span>
</code></pre></div>        </div>

        <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">}</span>
</code></pre></div>        </div>

      </div></div></div>

  <p>Awesome, my guesses were <em>really</em> close. <code class="language-plaintext highlighter-rouge">unknown_334</code> is <code class="language-plaintext highlighter-rouge">m_game.m_pscene</code>, and <code class="language-plaintext highlighter-rouge">unknown_3714</code> is <code class="language-plaintext highlighter-rouge">m_game.m_GameMode</code>.
Let’s see if I’m right, and <code class="language-plaintext highlighter-rouge">m_GameMode</code> is changed with a <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>-surrounded key input. <code class="language-plaintext highlighter-rouge">m_GameMode</code> is only
changed in two places in the code, both in <samp>GAME.CPP</samp>. The first is during initialization, where it is set to
<code class="language-plaintext highlighter-rouge">TRUE</code>. The second place is further down the file, in <code class="language-plaintext highlighter-rouge">CGame::Update(CKeyboard&amp;)</code>:</p>

</div>

<p>Ok, this isn’t surrounded by <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>… I suspect again that the “final” version of the game saw a few code
changes that weren’t included in the copy of the code I have. But a little digging shows that <code class="language-plaintext highlighter-rouge">m_GameMode</code> alone has no
real effect, because just a little further down is the code to actually <em>perform</em> editor mode:</p>

<div class="code-split-root" data-file-name="GAME.CPP"><div class="code-split-scroll">

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">////////////////////////////////////////// EDITOR</span>
<span class="cp">#ifdef EDITOR
</span></code></pre></div>    </div>

    <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">keys</span><span class="p">.</span><span class="n">KeyDownWasUp</span><span class="p">(</span><span class="sc">'I'</span><span class="p">))</span> <span class="p">{</span>
	<span class="n">GetApp</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ShowEditFrame</span><span class="p">();</span>
	<span class="n">GetApp</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">m_editframe</span><span class="o">-&gt;</span><span class="n">OnInsertButton</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#endif
</span></code></pre></div>    </div>

  </div></div>

<div>

  <aside>

    <p>I’ve skipped over some steps I had to take related to the release version PAK files referencing unused — and
unincluded — textures and models. I suspect the released game runs fine without them because it only loads used
textures, while the editor mode loads all textures (in case you want to use them) that are defined. As I don’t have the
original game assets (I only have source code and the PAK files distributed with the released game) I can’t recover
these textures and models, and so I just copied existing files and gave them the expected name.</p>

    <p>Another item of interest is that in activating editor mode <em>no</em> textures will load properly, as the files on-disk are
expected to be <a href="https://en.wikipedia.org/wiki/PCX">PCX</a> format, but when packing a PAK file the raw data is stored
unencoded (likely to increase loading speed). My extractor from Part I, PAKrat, just extracts the raw data into the
specified file path, leaving me with invalid PCX files. The actual format, as stored in the PAK, is like so:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="p">{</span>
  <span class="c1">// Width and height of the data:</span>
  <span class="kt">int</span> <span class="n">columns</span><span class="p">,</span> <span class="n">rows</span><span class="p">;</span>
  <span class="c1">// The data itself (pretend C supports this):</span>
  <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">columns</span> <span class="o">*</span> <span class="n">rows</span><span class="p">];</span>
  <span class="c1">// The width, height, and x-y offset</span>
  <span class="c1">// of the desired sub-image:</span>
  <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">offset_x</span><span class="p">,</span> <span class="n">offset_y</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>    </div>

  </aside>

  <p style="clear: both;">So, we need to press <kbd>G</kbd> to switch the game mode, and then <kbd>I</kbd> (I suspect for <strong>I</strong>nsert or
<strong>I</strong>nspect) <span class="aside-attn">will show the editor controls</span>! Once editor mode is active you can also
press <kbd>E</kbd> to <strong>E</strong>dit door and entity instances, or <kbd>T</kbd> to edit the focused object’s <strong>T</strong>ype. Let’s
give it a go:</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/editor-mode-thumb.png" alt="Editor Mode" title="Editor Mode" onclick="document.getElementById('222-editor-mode').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="222-editor-mode" onclick="document.getElementById('222-editor-mode').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/editor-mode-opt.png" alt="Editor Mode" title="Editor Mode" loading="lazy" />
</dialog>

</div>

<h2 id="next-steps">Next Steps</h2>

<p>If there’s ever going to be a follow-up to this three-part post, there’s a few things I’d like to try:</p>

<ul>
  <li>Add modern <kbd>W</kbd><kbd>A</kbd><kbd>S</kbd><kbd>D</kbd> keyboard controls — the current control scheme is
<kbd>A</kbd>/<kbd>Z</kbd> for forward/back, and <kbd>Shift</kbd>/<kbd>X</kbd> for left/right.</li>
  <li>Get the game running on modern versions of Windows — I’d like to do this by getting it running “well” on each
newer OS starting with Windows XP and moving forward.</li>
  <li>Properly handle texture files when extracting — PAKrat (from part I) doesn’t extract the PCX textures correctly.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:osr2" role="doc-endnote">
      <p>The <a href="https://en.wikipedia.org/wiki/Windows_95#Editions">3rd release of Windows 95</a>, “OEM Release 2”, added support for FAT32 drives. <a href="#fnref:osr2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:amalt" role="doc-endnote">
      <p>Alternative source in disk 4 of <a href="https://archive.org/details/storm-1">Storm #1 - Internet Archive</a>. <a href="#fnref:amalt" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, we’ll investigate whether we can enter an “editor mode”, hinted at within the strings contained within the program. There’s even a ✨surprise ending✨ that I didn’t see coming!]]></summary></entry><entry><title type="html">Colloquial Skeuomorphisms</title><link href="https://sidneys1.github.io/Skeuomorphisms/" rel="alternate" type="text/html" title="Colloquial Skeuomorphisms" /><published>2023-08-18T00:00:00-04:00</published><updated>2023-08-18T00:00:00-04:00</updated><id>https://sidneys1.github.io/colloquial-skeuomorphisms</id><content type="html" xml:base="https://sidneys1.github.io/Skeuomorphisms/"><![CDATA[<!-- cSpell:words skeuomorph -->
<!-- cSpell:ignore ˈskyo͞oəˌmôrf -->

<p>Language is strange – why do we say “hang up the phone” even when using a cell phone? This page documents some
examples of “skeuomorphisms” in our common vernacular.</p>

<p>I’ll be updating this page as I come across more!</p>

<!--more-->

<div class="card float">
  <dl>
    <dt><ruby><em>skeuomorph</em><rp>(</rp><rt>[ˈskyo͞oəˌmôrf]</rt><rp>)</rp></ruby></dt>
    <dd>An object or feature which imitates the design of a similar artifact made from another material.</dd>
    <dd><strong>In computing:</strong> An element of a graphical user interface which mimics a physical object.</dd>
  </dl>
</div>

<ul id="markdown-toc">
  <li><a href="#telecommunications" id="markdown-toc-telecommunications">Telecommunications</a></li>
  <li><a href="#computers-and-the-internet" id="markdown-toc-computers-and-the-internet">Computers and the Internet</a></li>
  <li><a href="#media-and-electronics" id="markdown-toc-media-and-electronics">Media and Electronics</a></li>
  <li><a href="#home" id="markdown-toc-home">Home</a></li>
  <li><a href="#transportation" id="markdown-toc-transportation">Transportation</a></li>
</ul>

<h1 id="telecommunications">Telecommunications</h1>
<hr />

<dl>
  <dt><em>📞</em> <em>“<u>Hang</u> up the Phone”</em></dt>
  <dd>Wall-mounted landline telephones had a hook to “hang” the receiver on.</dd>
  <dt><em>🗣️</em> <em>“<u>Call</u> me”</em></dt>
  <dd>You don’t have to shout anymore.</dd>
  <dt><em>☎️</em> (Re)<u>dial</u></dt>
  <dd>Early telephones had an actual rotary dial to select the numbers you would call.</dd>
  <dt><em>🛎️</em> <em>“The Phone is <u>Ringing</u>”</em></dt>
  <dt><em>🔊</em> <u>Ring</u>tone</dt>
  <dd>Early telephones had an actual bell that would ring when a specific “<a href="https://en.wikipedia.org/wiki/Ringing_tone">ringing tone</a>” was received (in
North America this is alternating 440 Hz and 480 Hz tones). The ringing tone required to set off the bell
<a href="https://en.wikipedia.org/wiki/Ringing_tone#National_characteristics">differed from region to region</a>. The term “ringtone” eventually became synonymous with
being able to <a href="https://en.wikipedia.org/wiki/Ringing_tone#Personalized_ringing_tones">change the sound</a> of an electronic telephone’s “ringing” audio.</dd>
</dl>

<h1 id="computers-and-the-internet">Computers and the Internet</h1>
<hr />

<dl>
  <dt><em>✂️</em> <u>Cut</u> and <u>Paste</u></dt>
  <dd>Editing on paper involved actual scissors and glue.</dd>
  <dt><em>📰</em> Message <u>Board</u></dt>
  <dd>A community message board is often a literal corkboard.</dd>
  <dt><em>🌎</em> <em>“Get On<u>line</u>”</em></dt>
  <dd>Before Wi-Fi, computers needed to be physically connected to a phone line and modem to access the Internet.</dd>
  <dt><em>📧</em> Email <u>CC</u></dt>
  <dd>To send a physical letter in duplicate, you would need to create a <dfn><abbr title="Carbon Copy">CC</abbr></dfn>,
or “<a href="https://en.wikipedia.org/wiki/Carbon_copy">Carbon Copy</a>”.</dd>
</dl>

<h1 id="media-and-electronics">Media and Electronics</h1>
<hr />

<dl>
  <dt><em>⏪</em> Re<u>wind</u></dt>
  <dt><em>📼</em> <em>“<u>Tape</u> it”</em></dt>
  <dt><em>📹</em> <em>“Get it on <u>Tape</u>”</em></dt>
  <dd>Cassettes, the primary storage medium before optical disks, contained magnetic tape wound around two spindles.</dd>
  <dt><em>📻</em> <em>“Stay <u>Tune</u>d”</em></dt>
  <dt><em>🎛️</em> <u>Tune</u> In / <u>Tune</u> Out</dt>
  <dd>Radio and television broadcasts require frequency matching (just like tuning an instrument).</dd>
  <dt><em>📴</em> <u>Turn</u> On/Off</dt>
  <dd>Most early electronic devices featured a rotating power selector.</dd>
</dl>

<h1 id="home">Home</h1>
<hr />

<dl>
  <dt><em>🧊</em> <u>Ice</u>box</dt>
  <dd>Before refrigeration, keeping food fresh involved actual blocks of ice.</dd>
  <dt><em>🪔</em> <em>“<u>Turn</u> out the Light”</em></dt>
  <dd>Gas and oil lamps had a dial which, when turned, would snuff out the flame.</dd>
</dl>

<h1 id="transportation">Transportation</h1>
<hr />

<dl>
  <dt><em>🚗</em> <em>“<u>Roll</u> the Window Up/Down”</em></dt>
  <dd>Sliding automobile passenger windows used to be operated via a hand crank.</dd>
</dl>]]></content><author><name>Sidneys1</name></author><category term="other" /><category term="linguistics" /><summary type="html"><![CDATA[Language is strange – why do we say “hang up the phone” even when using a cell phone? This page documents some examples of “skeuomorphisms” in our common vernacular. I’ll be updating this page as I come across more!]]></summary></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-03-16T00:00:00-04:00</published><updated>2023-03-16T00:00:00-04:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun Ghidra -->
<!-- cSpell:ignore sspyth MATHINV mbscpy strcmp -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. In this part, we’ll investigate disassembling and
reverse engineering the binary to identify an undocumented settings file format.</p>

<!--more-->
<hr />

<p>As our reverse engineering tool of choice, we’ll be using the National Security Agency’s
<a href="https://ghidra-sre.org/">Ghidra</a>. This powerful tool allows us to disassemble the <code class="language-plaintext highlighter-rouge">MATHINV.EX_</code> binary that is bundled
on the disk. The first bit of information we get when ingesting the binary in Ghidra is an “Import Results Summary”
dialog, with information about the binary itself. Here’s some excerpts:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Compiler:                     visualstudio:unknown
Debug Misc:                   Release/sspyth.exe
PDB File:                     sspyth.pdb
PE Property[FileDescription]: SSPYTH MFC Application
</code></pre></div></div>

<p>Interesting - the project in visual studio seems to have originally been called “sspyth”, short for “S.S. Pythagoras”,
the name of the protagonist’s ship within the game. Let’s try and identify the entrypoint. This is a Windows MFC program,
which means the actual entrypoint is “runtime code” that will identify the main MFC module within the program and
initialize it. So instead of looking for this entrypoint (which Ghidra finds for us and names <code class="language-plaintext highlighter-rouge">entry</code>), we will try and
find the main MFC module initializer by searching for something we know happens early in the program’s execution.</p>

<p>When first run, the game checks that DirectX, DirectPlay, and the game CD are inserted. Using Ghidra’s
<kbd class="menu"><kbd>Search</kbd><kbd>For Strings...</kbd></kbd> tool we’ll find the “Please insert CD” message.</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/string-search.png" alt="string search" /></p>

<p>Clicking the result will select the data in the CodeBrowser, and right-clicking the automatically created symbol allows
us to click <kbd class="menu"><kbd>References</kbd><kbd>Find references to s_Please_insert...</kbd></kbd> to find all
references to this particular value within the codebase. Doing so brings up one result at 0x0042cb86. Clicking the
result takes us to the relevant address. The disassembly shows us a function called <code class="language-plaintext highlighter-rouge">FUN_0042ca2f(CWinApp *param_1)</code>,
which we’ll renamed to <code class="language-plaintext highlighter-rouge">CWinAppEntrypoint</code>. As this function is not called anywhere else in the code, we can be fairly
confident that this is only called by runtime code that gets its address programmatically.</p>

<details>
  <summary>Disassembly of <code>CWinAppEntrypoint</code> (click to expand).</summary>

  <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">CWinAppEntrypoint</span><span class="p">(</span><span class="n">CWinApp</span> <span class="o">*</span><span class="n">param_1</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="o">*</span><span class="n">puVar2</span><span class="p">;</span>
  <span class="kt">FILE</span> <span class="o">*</span><span class="n">_File</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="n">local_28c</span><span class="p">;</span>
  <span class="n">BYTE</span> <span class="n">local_21c</span> <span class="p">[</span><span class="mi">264</span><span class="p">];</span>
  <span class="kt">char</span> <span class="n">local_114</span> <span class="p">[</span><span class="mi">260</span><span class="p">];</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">pvStack_10</span><span class="p">;</span>
  <span class="n">undefined</span> <span class="o">*</span><span class="n">puStack_c</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="n">local_8</span><span class="p">;</span>

  <span class="n">local_8</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
  <span class="n">puStack_c</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">LAB_0042cc3d</span><span class="p">;</span>
  <span class="n">pvStack_10</span> <span class="o">=</span> <span class="n">ExceptionList</span><span class="p">;</span>
  <span class="n">ExceptionList</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pvStack_10</span><span class="p">;</span>
  <span class="n">CWinApp</span><span class="o">::</span><span class="n">Enable3dControlsStatic</span><span class="p">(</span><span class="n">param_1</span><span class="p">);</span>
  <span class="n">CWinApp</span><span class="o">::</span><span class="n">LoadStdProfileSettings</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_00495378</span><span class="p">);</span>
  <span class="n">FUN_0042d603</span><span class="p">(</span><span class="n">s_Version_0049537c</span><span class="p">,</span><span class="n">local_21c</span><span class="p">);</span>
  <span class="n">iVar1</span> <span class="o">=</span> <span class="n">_strcmp</span><span class="p">(</span><span class="n">s_1</span><span class="p">.</span><span class="mo">00</span><span class="o">-</span><span class="n">Rel_00495384</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">AfxMessageBox</span><span class="p">(</span><span class="n">s_Game_not_installed</span><span class="p">,</span><span class="n">_run_the_setu_00495390</span><span class="p">,</span><span class="mh">0x10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">FUN_0042cc47</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953bc</span><span class="p">);</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">(</span><span class="n">local_114</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953c0</span><span class="p">);</span>
  <span class="n">GetPrivateProfileStringA</span>
            <span class="p">(</span><span class="n">s_MazePath_004953dc</span><span class="p">,</span><span class="n">s_pakpath_004953d4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953d0</span><span class="p">,</span><span class="n">local_114</span><span class="p">,</span><span class="mh">0x104</span><span class="p">,</span>
             <span class="n">s_</span><span class="p">.</span><span class="err">\</span><span class="mi">3</span><span class="n">d</span><span class="p">.</span><span class="n">ini_004953c4</span><span class="p">);</span>
  <span class="n">puVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">_strlen</span><span class="p">(</span><span class="n">local_114</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">puVar2</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">FUN_0042d603</span><span class="p">(</span><span class="n">s_pakpath_004953e8</span><span class="p">,</span><span class="n">local_21c</span><span class="p">);</span>
    <span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="n">s_game</span><span class="p">.</span><span class="n">pak_004953f0</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">_File</span> <span class="o">=</span> <span class="n">FID_conflict</span><span class="o">:</span><span class="n">__wfopen</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953fc</span><span class="p">),</span> <span class="n">_File</span> <span class="o">==</span> <span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span>  <span class="p">{</span>
      <span class="n">iVar1</span> <span class="o">=</span> <span class="n">AfxMessageBox</span><span class="p">(</span><span class="n">s_Please_insert_the_Math_Invaders_C_00495400</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">FUN_0042cc47</span><span class="p">();</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">puVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">_fclose</span><span class="p">(</span><span class="n">_File</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">AfxSetAllocStop</span><span class="p">(</span><span class="mh">0x53b0</span><span class="p">);</span>
  <span class="n">local_8</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">puVar2</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">local_28c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="n">local_28c</span> <span class="o">=</span> <span class="n">FUN_0042e186</span><span class="p">(</span><span class="n">puVar2</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">local_8</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x1c</span><span class="p">)</span> <span class="o">=</span> <span class="n">local_28c</span><span class="p">;</span>
  <span class="n">FUN_0042e2e0</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x1c</span><span class="p">));</span>
  <span class="n">FUN_0042cc47</span><span class="p">();</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>  </div>

</details>

<p>Alright! We can already see some useful things here. <code class="language-plaintext highlighter-rouge">FUN_0042d603</code> gets a value from the game’s Registry key, so that
line just checks that the program is installed. In fact, we can just rename <code class="language-plaintext highlighter-rouge">FUN_0042d603</code> to <code class="language-plaintext highlighter-rouge">GetValueFromRegistry</code>.
Further down we see a <code class="language-plaintext highlighter-rouge">GetPrivateProfileStringA </code> call. I had to look this function up as it’s somewhat esoteric, but it
and the whole <code class="language-plaintext highlighter-rouge">GetPrivateProfile*</code> still supported in today’s Win32 API!</p>

<blockquote>
  <p>Retrieves a string from the specified section in an initialization file.
<cite><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getprivateprofilestringa"><code class="language-plaintext highlighter-rouge">GetPrivateProfileStringA</code> function (<code class="language-plaintext highlighter-rouge">winbase.h</code>) - Win32 apps | Microsoft Learn</a></cite></p>
</blockquote>

<p>This description undersells this singular function call - when called the <code class="language-plaintext highlighter-rouge">GetPrivateProfileXxx</code> family of APIs will
open and read a given <code class="language-plaintext highlighter-rouge">*.ini</code> file, parse it, and return the value in the specified <code class="language-plaintext highlighter-rouge">[section]</code> and <code class="language-plaintext highlighter-rouge">key=</code>. If the given
file does not exist, it will return the default value.</p>

<p>And, using Ghidra’s Symbol Tree, we can find all calls to the <code class="language-plaintext highlighter-rouge">GetPrivateProfileXxx</code> APIs and the parameters used. Doing
so provides us with this list of parameters, expected to be found in <code class="language-plaintext highlighter-rouge">.\3d.ini</code> (relative to the CWD). These are mostly
loaded in another function called by <code class="language-plaintext highlighter-rouge">CWinAppEntrypoint</code>: <code class="language-plaintext highlighter-rouge">FUN_0042e2e0</code>, which we can rename to <code class="language-plaintext highlighter-rouge">LoadSettings</code>:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[MazePath]</span>
<span class="py">pakpath</span> <span class="p">=</span>       <span class="c">; String
</span><span class="s">datapath =      ; String</span>
<span class="py">diskpath</span> <span class="p">=</span>      <span class="c">; String
</span><span class="s">lastfile =      ; String</span>
<span class="py">room</span> <span class="p">=</span>          <span class="c">; String
</span><span class="s">usepakfile = 0  ; Integer. In practice it is used as a boolean,</span>
                <span class="c">; where 0 is FALSE, and anything else is TRUE.
</span>
<span class="nn">[Render]</span>
<span class="py">fullscreen</span> <span class="p">=</span> <span class="s">1  ; Integer</span>
<span class="py">winsize</span> <span class="p">=</span> <span class="s">10    ; Integer</span>
<span class="py">textdetail</span> <span class="p">=</span> <span class="s">10 ; Integer</span>
</code></pre></div></div>

<p>Let’s see if this works. Let’s just create a <code class="language-plaintext highlighter-rouge">C:\MathInvaders\3d.ini</code> and as a simple test, we’ll set
<code class="language-plaintext highlighter-rouge">[Render]</code>→<code class="language-plaintext highlighter-rouge">fullscreen</code> to <code class="language-plaintext highlighter-rouge">0</code>, and…</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/guest%20os_000.png" alt="It works! ...sorta." /></p>

<p>Well… Sort of. Ok, the game doesn’t actually run, and there’s a weird white space at the bottom of the window. But
we’ve proven it works! But what’s intriguing to me is the <code class="language-plaintext highlighter-rouge">[MazePath]</code> section of the config… I wonder what we could
use <em>those</em> settings for. In particular, the <code class="language-plaintext highlighter-rouge">fullscreen</code> setting is loaded into a global variable that we’ll call
<code class="language-plaintext highlighter-rouge">gFullscreen</code> - this factors into to code processing some very interesting strings about an “editor mode”… I wonder
if we can activate that?</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">gFullscreen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x334</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">_sprintf</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__Math_Invaders_</span><span class="o">-</span><span class="n">_NO_ACTIVE_LEVEL_0049585c</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">__splitpath</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DAT_0049c7c8</span><span class="p">,</span><span class="n">local_1fc</span><span class="p">,</span><span class="n">local_1f4</span><span class="p">,</span><span class="n">local_12c</span><span class="p">,</span><span class="n">local_10c</span><span class="p">);</span>
		<span class="n">_sprintf</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__Math_Invaders_</span><span class="o">-</span><span class="n">_</span><span class="err">'</span><span class="o">%</span><span class="n">s</span><span class="err">'</span><span class="n">_004957f4</span><span class="p">,</span><span class="n">local_12c</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x3714</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_</span><span class="o">***</span><span class="n">_EDITOR_MODE_</span><span class="o">***</span><span class="n">_00495810</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">iVar1</span> <span class="o">=</span> <span class="n">CSplitterWnd</span><span class="o">::</span><span class="n">IsTracking</span><span class="p">((</span><span class="n">CSplitterWnd</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x2e0</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_Running</span><span class="p">...</span><span class="n">_0049584c</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_Paused</span><span class="p">,</span><span class="n">_press_</span><span class="sc">'p'</span><span class="n">_to_resume</span><span class="p">.</span><span class="n">_00495828</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">CWnd</span><span class="o">::</span><span class="n">SetWindowTextA</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="n">local_104</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next time!</p>

<!-- References -->]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, we’ll investigate disassembling and reverse engineering the binary to identify an undocumented settings file format.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-02-23T00:00:00-05:00</published><updated>2023-02-23T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÀ -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. Let’s reverse engineer the game a bit and see what
we can find; are there any secrets, unused assets, etc?</p>

<!--more-->
<hr />

<h1 id="poking-around-the-cd">Poking around the CD</h1>

<p>Installing Math Invaders merely copies the EXE to <code class="language-plaintext highlighter-rouge">C:\MathInvaders</code> (or your chosen installation path). When run, the
executable checks if you have the CD inserted (searching for a path stored in the registry during installation). So in
practice, all of the resources can be found on the CD and the CD only.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>📁 DIRECTX
📁 PAKS
📁 WIN.31
📁 WIN.95
📄 AMOVIE.EX_
🔧 AUTORUN.INF
📕 DSETUP.DLL
📕 DSETUP6E.DLL
📕 DSETUP6J.DLL
📕 DSETUPE.DLL
📕 DSETUPJ.DLL
⚙️ LAUNCH.EXE
📄 MATHINV.EX_
📄 README.TXT
⚙️ SETUP.EXE
⚙️ SPRINT.EXE
📄 SSPUNINS.EX_
</code></pre></div></div>

<p>So, we have a few directories. <code class="language-plaintext highlighter-rouge">PAKS</code> includes the game resources, while the others are all installer files for a
bundled DirectX 4.0 and “Sprint Internet Passport 3.01” (which seems to be an AOL-like service). The remaining files are
largely DLLs to support the various installers, as well as a readme for our game.</p>

<details>
  <summary>Readme Contents, for those interested.</summary>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATH INVADERS   v1.0
(c) 1997 Simon &amp; Schuster Interactive
__________________________________________________________________

SYSTEM REQUIREMENTS:

 * Windows 95
 * Pentium 100 with 16Mb of RAM
 * 4x CD-ROM
 * DirectX-compatible video running 256 colors or higher
 * Mouse

__________________________________________________________________

INSTALLATION:

NOTE: This game runs only under Windows 95 and requires both DirectX
and Active Movie. During installation, you will be prompted to install
both components. If you already have DirectX or ActiveX, you may be
able to bypass installation of that component.

To Install Math Invaders:

Math Invaders supports Autoplay, so if your CD-ROM drive has Autoplay
enabled, you only need to put the CD-ROM in the drive and click the Install
button on the screen that appears. Installation of both DirectX and Active
Movie is required to play Math Invaders.

If you don't have Autoplay enabled:

1. From the Start Menu, select Run...
2. Click the Browse button and located your CD-ROM drive (usually D:)
3. Double-click on the SETUP.EXE file
4. Click the OK button to bring up the Math Invaders install window.
5. Click the Install button to install Math Invaders.
6. If your system does not have DirectX or Active Movie, click Yes to
   install those components.

After installation you may be asked to reboot your system.

__________________________________________________________________

TO START MATH INVADERS:

Math Invaders supports Autoplay, so if your CD-ROM drive has Autoplay
enabled, you only need to put the CD-ROM in the drive and click the Play
button on the screen that appears.

If you don't have Autoplay enabled:

1. From the Start Menu, select Programs.
2. Choose Math Invaders and then the Math Invaders icon.

__________________________________________________________________

TO UNINSTALL MATH INVADERS:

1. From the Start Menu, select Programs.
2. Choose Math Invaders and then the Uninstall icon.

You can also uninstall Math Invaders from your Control Panel -
Add/Remove Program Items.

__________________________________________________________________

KEYBOARD/MOUSE CONTROLS:

The following list describes the standard keyboard and mouse controls
	(Press F5 to toggle between the two control modes)
	left mouse button			- move in direction of cursor
	Numpad 8				- Move Forward
	Numpad 2				- Move Backward
	Numpad 4				- Rotate to Left
	Numpad 6				- Rotate to Right
	Z					- Slide to left
	X					- Slide to Right
	Alt					- Accelerate Movement
	Numpad 3				- Look Down
	Numpad 9				- Look Up
	Numpad 5				- Center the view
	S					- Jump up
	C					- Crouch down
	Space					- Activate switch or door
	Control or right mouse button		- Fire weapon
	1 - 7					- Switch to weapon 1 - 7
	[					- Switch to previous item
	]					- Switch to next item
	Enter					- Use current item
	Esc					- Exit the game
	TAB					- Toggle Overhead/Player Views

The following list describes the alternate keyboard and mouse controls
	(Press F5 to toggle between the two control modes)
	A					- Move Forward
	Z					- Move Backward
	Left arrow or move mouse to left	- Rotate to Left
	Right arrow or move mouse to right	- Rotate to Right
	Shift					- Slide to left
	X					- Slide to Right
	Alt					- Accelerate Movement
	Up arrow or move mouse to forward	- Look Down
	Down arrow or move mouse to backward	- Look Up
	S					- Jump up
	C					- Crouch down
	Space					- Activate switch or door
	Control or left mouse button		- Fire weapon
	1 - 7					- Switch to weapon 1 - 7
	Right mouse button			- Switch to next weapon
	[					- Switch to previous item
	]					- Switch to next item
	Enter					- Use current item
	Esc					- Exit the game
	TAB					- Toggle Overhead/Player Views


Additional Overhead View Controls
	NumPad 8				- Move camera up
	NumPad 2				- Move camera down
	NumPad 4				- Move camera to left
	NumPad 6				- Move camera to right
	NumPad 7				- Move camera directly behind player
	NumPad +				- Zoom In
	NumPad -				- Zoom Out

Other Controls
	F1					- Save or Restore game
	F2					- Reduce game window size
	F3					- Enlarge game window
	F5					- Toggle between standard and
							alternate controls
	F6					- Toggle between high and low
							detail modes
	F7					- Quick Save
	F8					- Quick Load


__________________________________________________________________

TECHNICAL SUPPORT

We hope that your experience with Math Invaders will be problem-free.
But if you have any technical problems, please call Technical Support at
(303) 739-4020.

</code></pre></div>  </div>

</details>
<p><br /></p>

<p>Upon installing <code class="language-plaintext highlighter-rouge">MATHINV.EX_</code> is copied to the installation directory and renamed to <code class="language-plaintext highlighter-rouge">MATHINV.EXE</code>, of course. Let’s
overlook this file for now and instead take a look in the <code class="language-plaintext highlighter-rouge">PAKS</code> directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>📁 LEVELS
📁 VIDEO
📄 GAME.PAK
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LEVELS</code> contains <code class="language-plaintext highlighter-rouge">LP##.PAK</code> files, where <code class="language-plaintext highlighter-rouge">##</code> is a two-digit number from 01 to 27. Video contains (unsurprisingly)
several AVI files, as this game has a few full motion video “FMV” sequences at startup and shutdown.</p>

<h1 id="pak-files-and-pakrat">PAK Files and <code class="language-plaintext highlighter-rouge">pakrat</code></h1>

<p>Let’s poke at <code class="language-plaintext highlighter-rouge">GAME.PAK</code> in a hex editor. The first ~5K of the <code class="language-plaintext highlighter-rouge">GAME.PAK</code> file looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0000h  56 00 00 00 57 61 76 65 73 5C 43 6C 69 63 6B 2E  V...Waves\Click.
0010h  77 61 76 00 00 00 00 00 00 00 00 00 00 00 00 00  wav.............
0020h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0030h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0040h  00 00 00 00 20 17 00 00 42 6D 70 73 5C 43 75 72  .... ...Bmps\Cur
0050h  73 6F 72 2E 62 6D 70 00 00 00 00 00 00 00 00 00  sor.bmp.........
0060h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0070h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0080h  00 00 00 00 00 00 00 00 E8 32 00 00 42 6D 70 73  ........è2..Bmps
0090h  5C 46 6F 6E 74 2E 62 6D 70 00 00 00 00 00 00 00  \Font.bmp.......
00A0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00B0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00C0h  00 00 00 00 00 00 00 00 00 00 00 00 20 4B 00 00  ............ K..
00D0h  42 6D 70 73 5C 49 68 69 67 68 73 63 6F 2E 62 6D  Bmps\Ihighsco.bm
00E0h  70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  p...............
00F0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0100h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
</code></pre></div></div>

<p>And the remainder of the file is various binary data. In fact, immediately after the ~5K run above we see the following
header, immediately recognizable as a <a href="https://en.wikipedia.org/wiki/WAV">Waveform Audio File Format</a> header:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1720h  52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20  RIFFÀ...WAVEfmt
</code></pre></div></div>

<p>This lines up with the file extension of the first string we see at the beginning of the file, <code class="language-plaintext highlighter-rouge">Waves\Click.wav</code>. A
little deduction shows that the ~5K prelude area is structured as follows:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">prelude</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">entry</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
        <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">entries</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or, in english, we have first four bytes (a little-endian unsigned integer) representing the number of resource headers
in the list. This is followed by that number of entries, each of which is a 64-character ASCII string followed by a
four-byte offset into the PAK file where the data for that file resides. We use a little C trick here called a
“<a href="https://en.wikipedia.org/wiki/Flexible_array_member">flexible array member</a>” to index past the end of our C struct.
Note that each entry doesn’t need to store the length of the file - this is calculated from the offset of the next file
in the list or (in the case of the last entry) the end of the <code class="language-plaintext highlighter-rouge">PAK</code> file itself.</p>

<p>Armed with this knowledge, let’s write a simple program to “extract” <code class="language-plaintext highlighter-rouge">PAK</code> files, which we’ll call <code class="language-plaintext highlighter-rouge">pakrat</code>. The program
will take the targeted <code class="language-plaintext highlighter-rouge">PAK</code> file as a command-line argument and extract the contents to the current working directory.
Let’s get started with this:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cerrno&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Usage: "</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" FILE</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="s">"PAKrat 0.1</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>


	<span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="nf">file</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">in</span> <span class="o">|</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error opening '"</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"': "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">end</span><span class="p">);</span>
	<span class="kt">size_t</span> <span class="n">file_size</span> <span class="o">=</span> <span class="n">file</span><span class="p">.</span><span class="n">tellg</span><span class="p">();</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"File '"</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"' size: "</span> <span class="o">&lt;&lt;</span> <span class="n">file_size</span> <span class="o">&lt;&lt;</span> <span class="s">" Bytes</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Running it against <code class="language-plaintext highlighter-rouge">GAME.PAK</code> produces:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537
</code></pre></div></div>

<p>So far so good! Continuing on (you’ll also need to <code class="language-plaintext highlighter-rouge">#include &lt;iomanip&gt;</code>, and add the <code class="language-plaintext highlighter-rouge">struct prelude</code> we defined
before):</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Let's start by getting the number of entries, so we know how large a buffer to allocate</span>
<span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">));</span>
<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">));</span>
<span class="kt">uint32_t</span> <span class="n">count</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"File contains "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span> <span class="o">&lt;&lt;</span> <span class="s">" entries:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

<span class="c1">// Reallocate to the appropriate size.</span>
<span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">realloc</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="o">::</span><span class="n">entry</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">));</span>
<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">buffer</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="o">::</span><span class="n">entry</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">);</span>

<span class="c1">// Interpret by casting to a prelude, then print all the files and their offsets.</span>
<span class="n">prelude</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">prelude</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0x"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setfill</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">offset</span>
			  <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We now output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav
0x000032e8 Bmps\Cursor.bmp
0x00004b20 Bmps\Font.bmp
0x00009a58 Bmps\Ihighsco.bmp
--- ✂️ ---
</code></pre></div></div>

<p>Excellent! Let’s refactor that last for loop a bit though:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Interpret by casting to a prelude, gather, then print all the files and their offsets.</span>
<span class="n">prelude</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">prelude</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;&gt;</span> <span class="n">entries</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="k">auto</span> <span class="o">&amp;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
	<span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">prev</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">prev</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span> <span class="n">entry</span><span class="p">.</span><span class="n">offset</span> <span class="o">-</span> <span class="n">prev</span><span class="p">.</span><span class="n">offset</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">auto</span><span class="o">&amp;</span> <span class="n">last</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">last</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">last</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span> <span class="n">file_size</span> <span class="o">-</span> <span class="n">last</span><span class="p">.</span><span class="n">offset</span><span class="p">));</span>
</code></pre></div></div>

<p>There, now we have made a more manageable list, including sizes. Let’s add some code to print it out. Sorry for the
<code class="language-plaintext highlighter-rouge">std::ios</code> cruft, formatting C++ streams is a constant annoyance:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">ios</span> <span class="n">old_state</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>
	<span class="n">old_state</span><span class="p">.</span><span class="n">copyfmt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0x"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setfill</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
			  <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">.</span><span class="n">copyfmt</span><span class="p">(</span><span class="n">old_state</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" Bytes</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- ✂️ ---
</code></pre></div></div>

<p>Nearly there! The last push is just to extract the files (you’ll want to add <code class="language-plaintext highlighter-rouge">#include &lt;filesystem&gt;</code> for filesystem
operations and <code class="language-plaintext highlighter-rouge">#include &lt;algorithm&gt;</code> for <code class="language-plaintext highlighter-rouge">std::replace</code>)!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Extract files</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">char</span><span class="o">*</span> <span class="n">path_str</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>

	<span class="c1">// Replace Windows path separators</span>
	<span class="n">std</span><span class="o">::</span><span class="n">replace</span><span class="p">(</span><span class="n">path_str</span><span class="p">,</span> <span class="n">path_str</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path_str</span><span class="p">),</span> <span class="sc">'\\'</span><span class="p">,</span> <span class="sc">'/'</span><span class="p">);</span>

	<span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">path</span> <span class="n">path</span><span class="p">(</span><span class="n">path_str</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">filename</span><span class="p">();</span>
	<span class="k">auto</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">parent_path</span><span class="p">();</span>

	<span class="c1">// Create parent folder(s) (if needed)</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parent</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">exists</span><span class="p">(</span><span class="n">parent</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Creating directory "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">quoted</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">create_directories</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Creating file "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">quoted</span><span class="p">(</span><span class="n">path_str</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="nf">out_file</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">out_file</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error creating file: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">continue</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// Seek to the correct location and copy the file in 1KiB chunks</span>
	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">to_read</span> <span class="o">=</span> <span class="n">length</span><span class="p">;</span>
	<span class="k">do</span> <span class="p">{</span>
		<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
		<span class="k">auto</span> <span class="n">chunk</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">((</span><span class="kt">size_t</span><span class="p">)</span><span class="n">to_read</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
		<span class="n">to_read</span> <span class="o">-=</span> <span class="n">chunk</span><span class="p">;</span>
		<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span>
		<span class="n">out_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">to_read</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- ✂️ ---
Creating directory "Waves"
Creating file "Waves/Click.wav"
Creating directory "Bmps"
Creating file "Bmps/Cursor.bmp"
Creating file "Bmps/Font.bmp"
Creating file "Bmps/Ihighsco.bmp"
--- ✂️ ---
</code></pre></div></div>

<p>And that’s it! You can find the full source code <a href="https://github.com/Sidneys1/PAKrat">in this GitHub repository</a>. Here’s
a sample of an extracted asset! This is <code class="language-plaintext highlighter-rouge">Waves\Glose2a.wav</code>, an one of 3 randomized clips that play when you lose a
level:</p>

<audio controls="">
	<source src="https://sidneys1.github.io/audio/reverse-engineering-a-win95-game-I/Glose2a.wav" type="" />
	Your browser does not support the audio element.
</audio>

<p>There are also GUI elements in <code class="language-plaintext highlighter-rouge">Bmps</code>, for example the weapon sprite sheet <code class="language-plaintext highlighter-rouge">Weapons.bmp</code>:</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/Weapons.bmp" alt="weapon sprite sheet" /></p>

<p>There’s even an exit splash screen graphic that is unused, that indicates that the game probably had a shareware or beta
release:</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/Exit1.bmp" alt="beta exit splash" /></p>

<hr />

<p>Now, attentive readers may have noticed something; If the <code class="language-plaintext highlighter-rouge">PAK</code> prelude is 4+(68×86)=5852 Bytes, but the first asset
(<code class="language-plaintext highlighter-rouge">Waves\Click.wav</code>) starts at <code class="language-plaintext highlighter-rouge">0x1720</code> (Byte 5920), then what is in the interstitial 68 bytes? Let’s take a look:</p>

<ul>
  <li>Last entry <span style="background: #C649B6; color: white">name</span> and <span style="background: #7E48C4; color: white">offset</span>.</li>
  <li>Fist <span style="background: #47B5C1; color: white">file data</span>.</li>
</ul>

<div class="language-plaintext highlighter-rouge">
<div class="highlight">
<pre class="highlight">
<code>1690h  00 00 00 00 D5 91 50 01 <span style="background: #C649B6">57 61 76 65 73 5C 47 6C</span>  ....Õ‘P.<span style="background: #C649B6">Waves\Gl</span>
16A0h  <span style="background: #C649B6">6F 73 65 33 62 2E 77 61 76 00 00 00 00 00 00 00</span>  <span style="background: #C649B6">ose3b.wav.......</span>
16B0h  <span style="background: #C649B6">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span style="background: #C649B6">................</span>
16C0h  <span style="background: #C649B6">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span style="background: #C649B6">................</span>
16D0h  <span style="background: #C649B6">00 00 00 00 00 00 00 00</span> <span style="background: #7E48C4">B7 21 5A 01</span> 00 00 00 00  <span style="background: #C649B6">........</span><span style="background: #7E48C4">·!Z.</span>....
16E0h  BC 42 59 81 00 00 00 00 8C 83 59 81 8C 83 59 81  ¼BY.....ŒƒY.ŒƒY.
16F0h  88 83 59 81 3B AE F7 BF 00 20 56 81 00 00 00 00  ˆƒY�;®÷¿. V.....
1700h  8C 83 59 81 DB AE F7 BF 8C 83 59 81 DE DA F7 BF  ŒƒY.Û®÷¿ŒƒY.ÞÚ÷¿
1710h  8C 83 59 81 8C 83 59 81 E2 13 F7 BF 59 B7 5E 01  ŒƒY.ŒƒY.â.÷¿Y·^.
1720h  <span style="background: #47B5C1">52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20</span>  <span style="background: #47B5C1">RIFFÀ...WAVEfmt</span></code>
</pre>
</div>
</div>

<p>And honestly… I don’t know. This space being the same length as the other asset headers makes me think whatever they
used to create these <code class="language-plaintext highlighter-rouge">PAK</code> files has an off-by-one error, and just wrote an extra entry past the end of their buffer
into uninitialized (or maybe stack/heap) memory. Or, it could be a tightly packed block of some unknown flags or
parameters to the game engine.</p>

<h3 id="a-short-aside-about-pak">A Short Aside About <code class="language-plaintext highlighter-rouge">PAK</code></h3>

<p>Digging further into the <code class="language-plaintext highlighter-rouge">LP##.PAK</code> file for specific levels (in this case, <code class="language-plaintext highlighter-rouge">LP01.PAK</code>) reveals additional asset types:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">📂 Anims\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">Anims.lst</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">📂 Levels\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">GameData.dat</code></li>
      <li>📄 <code class="language-plaintext highlighter-rouge">Lp01.lev</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">📂 Mazes\</code>
    <ul>
      <li>📂 <code class="language-plaintext highlighter-rouge">LP01\</code>
        <ul>
          <li>📄 <code class="language-plaintext highlighter-rouge">lp01.lws</code></li>
          <li>📄 <code class="language-plaintext highlighter-rouge">rlp01.wad</code></li>
          <li>📄 <code class="language-plaintext highlighter-rouge">wlp01.bsp</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">Objects\</code>
    <ul>
      <li><em>A variety of <code class="language-plaintext highlighter-rouge">.bsp</code>/<code class="language-plaintext highlighter-rouge">.BSP</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">Waves\</code>
    <ul>
      <li><em>A variety of <code class="language-plaintext highlighter-rouge">.WAV</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">anims\</code> <em>(note the case sensitivity)</em>
    <ul>
      <li><em>58 directories, themselves containing <code class="language-plaintext highlighter-rouge">.pcx</code> and <code class="language-plaintext highlighter-rouge">.pcxF</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">textures\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">Lp01.lst</code></li>
      <li><em>1345 additional <code class="language-plaintext highlighter-rouge">.pcx</code> and <code class="language-plaintext highlighter-rouge">.pcxF</code> files.</em></li>
    </ul>
  </li>
</ul>

<p>Now wait a second… <code class="language-plaintext highlighter-rouge">.pak</code>, <code class="language-plaintext highlighter-rouge">.bsp</code>, <code class="language-plaintext highlighter-rouge">.wad</code>… Sounds an awful lot like
<a href="https://en.wikipedia.org/wiki/Id_Tech#id_Tech_2">id Tech 2</a> (the Quake engine)! However, digging into it, id’s <code class="language-plaintext highlighter-rouge">pak</code>
format is different, and these <code class="language-plaintext highlighter-rouge">wad</code> and <code class="language-plaintext highlighter-rouge">bsp</code> files won’t open in any Tech 2 editors I can find. So perhaps the
developers of this engine merely took a lot of inspiration, and/or heavily modified and simplified these formats away
from the Tech 2 specifications.</p>

<p>This engine is almost a midway point (in capability) between Tech 1 (DOOM) and Tech 2 (Quake). It supports angled floors
and vertical viewing angle like Quake, but also only supports sprite-based creatures like Doom.</p>

<hr />

<p>In the next part, we’ll explore trying to reverse engineer where this game stores its settings, and see if we can’t
uncover some secrets in the binary itself.</p>]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. Let’s reverse engineer the game a bit and see what we can find; are there any secrets, unused assets, etc?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PowerShell Profile Instant Prompt</title><link href="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html" rel="alternate" type="text/html" title="PowerShell Profile Instant Prompt" /><published>2022-09-29T00:00:00-04:00</published><updated>2022-09-29T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html"><![CDATA[<p>Recently I began using <a href="https://ohmyposh.dev/">Oh My Posh</a> for PowerShell 7+ (pwsh). One thing I noticed however is that
it takes upward of a second to activate in my pwsh <code class="language-plaintext highlighter-rouge">$profile</code>. Let’s dig in and see if we can’t improve that.</p>

<!--more-->

<p>First, let’s establish a baseline - after <a href="https://ohmyposh.dev/docs/installation/windows">installing Oh My Posh</a> (say,
with WinGet) we’re instructed to add the line <code class="language-plaintext highlighter-rouge">oh-my-posh init pwsh | Invoke-Expression</code> to our pwsh <code class="language-plaintext highlighter-rouge">$profile</code>. We can
investigate the cost of this with a handy pwsh package <code class="language-plaintext highlighter-rouge">PSProfiler</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w">
</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0734463 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     1     2    00:00.0234282 Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     1     3    00:00.0011258 Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     1     4    00:00.0016107 Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000</span><span class="w">
</span><span class="c">#     1     6    00:00.3770726 oh-my-posh init pwsh | Invoke-Expression</span><span class="w">
</span><span class="c">#     1     7    00:00.0005995 Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     1     8    00:00.0005577 Enable-PoshLineError</span><span class="w">
</span></code></pre></div></div>

<p>You can see that out of all the commands I have in my profile, oh-my-posh init is taking an order of magnitude longer
than the others. When my system is under load and I <em>really need that terminal now</em>, this causes friction. Let’s see
what exactly <code class="language-plaintext highlighter-rouge">oh-my-posh init pwsh</code> is outputting that gets interpreted by <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> (note that I’ve inserted
<code class="language-plaintext highlighter-rouge">%LOCALAPPDATA%</code> and <code class="language-plaintext highlighter-rouge">&lt;some config path&gt;</code> for brevity):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">oh-my-posh</span><span class="w"> </span><span class="nx">init</span><span class="w"> </span><span class="nx">pwsh</span><span class="w">
</span><span class="c"># (@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='&lt;some config path&gt;' --print) -join "`n") | Invoke-Expression</span><span class="w">
</span></code></pre></div></div>

<p>It looks like it just calls itself again! We can skip that first step entirely by just copy-and-pasting this output into
our original profile. Let’s measure things again now that we’ve made this change:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0790705 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     1     2    00:00.0279149 Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     1     3    00:00.0010231 Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     1     4    00:00.0011608 Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000</span><span class="w">
</span><span class="c">#     2     6    00:00.0694422 (@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh init pwsh ...</span><span class="w">
</span><span class="c">#     1     7    00:00.0006244 Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     1     8    00:00.0005833 Enable-PoshLineError</span><span class="w">

</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Measure-Command</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="nv">$profile</span><span class="w"> </span><span class="p">};}</span><span class="w">

</span><span class="c"># ...</span><span class="w">
</span><span class="c"># TotalMilliseconds : 463.3328</span><span class="w">
</span></code></pre></div></div>

<p>We’ve successfully brought our oh-my-posh invocation down an order of magnitude and shaved a couple hundred milliseconds
off of our profile initialization. But… we can do better. A cool feature of
<a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a> is “instant prompt”, which allows a prompt to show
immediately, even while your profile is still loading. Let’s reproduce this behavior in pwsh.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In our $profile...</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSReadLine</span><span class="p">;</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">prompt</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nx">variable:global:ompjob</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c"># snip</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nv">$</span><span class="nn">global</span><span class="p">:</span><span class="nv">ompjob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Start-Job</span><span class="w"> </span><span class="p">{(@(</span><span class="err">&amp;</span><span class="w"> </span><span class="s1">'%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe'</span><span class="w"> </span><span class="err">init</span><span class="w"> </span><span class="err">pwsh</span><span class="w"> </span><span class="err">--config=</span><span class="s1">'&lt;some config path&gt;'</span><span class="w"> </span><span class="err">--print</span><span class="p">)</span><span class="w"> </span><span class="o">-join</span><span class="w"> </span><span class="s2">"</span><span class="se">`n</span><span class="s2">"</span><span class="p">)};</span><span class="w">
  </span><span class="n">write-host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Blue</span><span class="w"> </span><span class="s2">"Loading </span><span class="se">`$</span><span class="s2">profile in the background..."</span><span class="w">
  </span><span class="n">Write-Host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Green</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="s2">"  </span><span class="si">$(</span><span class="nv">$executionContext</span><span class="o">.</span><span class="nf">SessionState</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">CurrentLocation</span><span class="si">)</span><span class="s2"> "</span><span class="o">.</span><span class="nf">replace</span><span class="p">(</span><span class="bp">$HOME</span><span class="p">,</span><span class="w"> </span><span class="s1">'~'</span><span class="p">);</span><span class="w">
  </span><span class="n">Write-Host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Red</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="s2">"ᓚᘏᗢ"</span><span class="w">
  </span><span class="kr">return</span><span class="w"> </span><span class="s2">" "</span><span class="p">;</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>First, we create a new <code class="language-plaintext highlighter-rouge">prompt</code> function; unsurprisingly this is the function that pwsh calls to render your prompt. Our
custom <code class="language-plaintext highlighter-rouge">prompt</code> function will first check if there’s a global variable named <code class="language-plaintext highlighter-rouge">ompjob</code> - this is going to be a background
job in which we execute oh-my-posh. The first time <code class="language-plaintext highlighter-rouge">prompt</code> runs this variable will be unset, and so our <code class="language-plaintext highlighter-rouge">if</code> will be
skipped, and I’ve snipped it for readability. We’ll come back to it.</p>

<p>Now, if the variable is unset, we’ll set it to a new background job that executes our <code class="language-plaintext highlighter-rouge">oh-my-posh</code> invocation, but
without the <code class="language-plaintext highlighter-rouge">Invoke-Expression</code>. This will let the job’s output be the text printed by oh-my-posh that we can consume
with <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> later. Finally, we print out a nice little prompt - not as fancy as <code class="language-plaintext highlighter-rouge">oh-my-posh</code>’s, but it’ll
do, <em>and</em> it’ll display almost instantly.</p>

<p>Finally, let’s fill in the <code class="language-plaintext highlighter-rouge">if</code>-block for when the global variable <em>is</em> set (on the second invocation of <code class="language-plaintext highlighter-rouge">prompt</code>):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSReadLine</span><span class="p">;</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">prompt</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nx">variable:global:ompjob</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Receive-Job</span><span class="w"> </span><span class="nt">-Wait</span><span class="w"> </span><span class="nt">-AutoRemoveJob</span><span class="w"> </span><span class="nt">-Job</span><span class="w"> </span><span class="nv">$</span><span class="nn">global</span><span class="p">:</span><span class="nv">ompjob</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Invoke-Expression</span><span class="p">;</span><span class="w">
    </span><span class="n">Remove-Variable</span><span class="w"> </span><span class="nx">ompjob</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">Global</span><span class="p">;</span><span class="w">
    </span><span class="n">Enable-PoshTransientPrompt</span><span class="w">
    </span><span class="nx">Enable-PoshLineError</span><span class="w">

    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-EditMode</span><span class="w"> </span><span class="nx">Windows</span><span class="w">
    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-PredictionSource</span><span class="w"> </span><span class="nx">HistoryAndPlugin</span><span class="w">
    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-PredictionViewStyle</span><span class="w"> </span><span class="nx">InlineView</span><span class="w">

    </span><span class="p">[</span><span class="n">console</span><span class="p">]::</span><span class="n">InputEncoding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">console</span><span class="p">]::</span><span class="n">OutputEncoding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Text.UTF8Encoding</span><span class="w">
    </span><span class="kr">return</span><span class="w"> </span><span class="n">prompt</span><span class="p">;</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="c"># snip</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>First, we get the output from the <code class="language-plaintext highlighter-rouge">ompjob</code>, and we <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> it. In doing so, <code class="language-plaintext highlighter-rouge">oh-my-posh</code> redefines our
<code class="language-plaintext highlighter-rouge">prompt</code> function. We’ll then initialize some other settings within <code class="language-plaintext highlighter-rouge">PSReadLine</code> and <code class="language-plaintext highlighter-rouge">oh-my-posh</code>. Finally, we return
whatever <code class="language-plaintext highlighter-rouge">oh-my-posh</code> produces in its redefined <code class="language-plaintext highlighter-rouge">prompt</code> function, and we’re done! Let’s profile this as well:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0789758 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     0     2    00:00.0000000</span><span class="w">
</span><span class="c">#     0     3    00:00.0000000 function prompt {</span><span class="w">
</span><span class="c">#     0     4    00:00.0000000   if (Test-Path variable:global:ompjob) {</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000     Receive-Job -Wait -AutoRemoveJob -Job $global:ompjob | Invoke-Expression;</span><span class="w">
</span><span class="c">#     0     6    00:00.0000000     Remove-Variable ompjob -Scope Global;</span><span class="w">
</span><span class="c">#     0     7    00:00.0000000     Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     0     8    00:00.0000000     Enable-PoshLineError</span><span class="w">
</span><span class="c">#     0     9    00:00.0000000</span><span class="w">
</span><span class="c">#     0    10    00:00.0000000     Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     0    11    00:00.0000000     Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     0    12    00:00.0000000     Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0    13    00:00.0000000</span><span class="w">
</span><span class="c">#     0    14    00:00.0000000     [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding</span><span class="w">
</span><span class="c">#     0    15    00:00.0000000     return prompt;</span><span class="w">
</span><span class="c">#     0    16    00:00.0000000   }</span><span class="w">
</span><span class="c">#     0    17    00:00.0000000   $global:ompjob = Start-Job {(@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh ...</span><span class="w">
</span><span class="c">#     0    18    00:00.0000000   write-host -ForegroundColor Blue "Loading `$profile in the background..."</span><span class="w">
</span><span class="c">#     0    19    00:00.0000000   Write-Host -ForegroundColor Green -NoNewline "  $($executionContext.SessionState.Path.CurrentLocation) ".replace($HOME, '~');</span><span class="w">
</span><span class="c">#     0    20    00:00.0000000   Write-Host -ForegroundColor Red -NoNewline "ᓚᘏᗢ"</span><span class="w">
</span><span class="c">#     0    21    00:00.0000000   return " ";</span><span class="w">
</span><span class="c">#     0    22    00:00.0000000 }</span><span class="w">

</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Measure-Command</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="nv">$profile</span><span class="w"> </span><span class="p">};}</span><span class="w">

</span><span class="c"># ...</span><span class="w">
</span><span class="c"># TotalMilliseconds : 101.5553</span><span class="w">
</span></code></pre></div></div>

<p>Wow! We’ve almost completely eliminated the overhead of importing our profile, and pushed that execution time into the
background while a user is typing in their first prompt and digesting its output. I’d move the
<code class="language-plaintext highlighter-rouge">Import-Module PSReadLine</code> into the background as well, except that module doesn’t import correctly when you do this.</p>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="powershell" /><summary type="html"><![CDATA[Recently I began using Oh My Posh for PowerShell 7+ (pwsh). One thing I noticed however is that it takes upward of a second to activate in my pwsh $profile. Let’s dig in and see if we can’t improve that.]]></summary></entry><entry><title type="html">How I Built This Website, And How to Do It Yourself</title><link href="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html" rel="alternate" type="text/html" title="How I Built This Website, And How to Do It Yourself" /><published>2022-08-22T00:00:00-04:00</published><updated>2022-08-22T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html"><![CDATA[<p>Sidneys1.com is built statically using <a href="https://jekyllrb.com/">Jekyll</a>, and then published on the world wide web, GitHub
Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Let’s walk through
it step by step. We’ll be looking into (over the course of several posts):</p>

<ul>
  <li>Building a website with Jekyll</li>
  <li>Hosting on NearlyFreeSpeech.net</li>
  <li>Customizing the site layout and adding useful features</li>
  <li>Hosting on GitHub Pages</li>
  <li>Hosting on IPFS</li>
  <li>Hosting on Tor</li>
</ul>

<!--more-->

<h2 id="getting-started-with-jekyll">Getting Started With Jekyll</h2>

<p>I use a Windows PC, and I find that the Jekyll environment is easier to set up under the
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux</a>, so that’s what I’ll be using going
forward in this post. First, we’ll install Ruby via your package manager - Ubuntu 20.04 has Ruby 2.7 available on apt
via <code class="language-plaintext highlighter-rouge">apt install ruby</code>. Next we’ll use the Ruby package manager, <code class="language-plaintext highlighter-rouge">gem</code> to install both Jekyll and Bundler:
<code class="language-plaintext highlighter-rouge">gem install bundler jekyll</code>. Finally, you can create a new Jekyll site with <code class="language-plaintext highlighter-rouge">jekyll new sitename</code>.</p>

<p>Once inside the new site folder, you can generate and serve your page with <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>! This will create
a development server on <code class="language-plaintext highlighter-rouge">http://localhost:4000</code>. Let’s quickly talk about how Jekyll works:</p>

<ol>
  <li>You create Markdown or HTML files in your site’s folder for each post you wish to make.</li>
  <li>Jekyll processes these files (along with some templates - we’ll get to these later) to generate static HTML files.</li>
  <li>These static HTML files (in <code class="language-plaintext highlighter-rouge">_site</code>) are what you want to put on your web hosting! It’s all static, so you don’t need
anything fancy like server-side PHP or client-side Angular or React.</li>
</ol>

<p>To simplify the build-preview and build-release process, let’s make a simple Makefile. GNU Make is a tool that allows
you to define simple build steps, and then figures out the interdependencies between these steps for you. Let’s take
a look:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">all</span><span class="o">:</span> <span class="nf">build</span>

<span class="nl">build</span><span class="o">:</span> <span class="nf">_site/</span>

<span class="nl">serve</span><span class="o">:</span>
	bundle <span class="nb">exec </span>jekyll serve <span class="nt">--watch</span> <span class="nt">--livereload</span> <span class="nt">--force_polling</span> <span class="nt">--drafts</span> <span class="nt">--destination</span> _site_live/

<span class="nl">_site/</span><span class="o">:</span>
	<span class="nb">env </span><span class="nv">JEKYLL_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>jekyll build

<span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-rf</span> _site/
</code></pre></div></div>

<p>Let’s break down each of these sections:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">all: build</code>: “all” is the default rule run when you execute <code class="language-plaintext highlighter-rouge">make</code>. This line says when “all” is run, run “build”
first.</li>
  <li><code class="language-plaintext highlighter-rouge">build: _site/</code>: when the “build” rule is run, we depend on “_site/” being built first.</li>
  <li><code class="language-plaintext highlighter-rouge">serve: ...</code>: If you execute <code class="language-plaintext highlighter-rouge">make serve</code>, this rule is triggered. Make will run the <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve ...</code>
command we’ve listed. The parameters included are:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--watch</code>: live-rebuild any changes made to the posts as you edit them (very useful!).</li>
      <li><code class="language-plaintext highlighter-rouge">--livereload</code>: use LiveReload to automatically refresh your browser when changes are rebuilt.</li>
      <li><code class="language-plaintext highlighter-rouge">--force_polling</code>: this is a workaround for some WSL bugs. See
<a href="https://github.com/Microsoft/BashOnWindows/issues/216">this WSL issue</a>.</li>
      <li><code class="language-plaintext highlighter-rouge">--drafts</code>: include posts under the <code class="language-plaintext highlighter-rouge">_drafts</code> folder (this is where you can put in-progress posts).</li>
      <li><code class="language-plaintext highlighter-rouge">--destination _site_live/</code>: this directs the <code class="language-plaintext highlighter-rouge">serve</code> command to build the static output under a separate folder
than the normal <code class="language-plaintext highlighter-rouge">_site/</code> rule. This way we can’t accidentally publish our live preview version of the website - if
we did, it would be broken because all links would lead to <code class="language-plaintext highlighter-rouge">localhost</code> instead of your website’s URL!</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">_site/: ...</code>: this rule matches a file path, <code class="language-plaintext highlighter-rouge">_site</code>, which is Jekyll’s output folder. Make understands file paths
and will know that this rule will build the contents of <code class="language-plaintext highlighter-rouge">_site</code>. Note that we use <code class="language-plaintext highlighter-rouge">env</code> to tell Jekyll to use the
<a href="https://jekyllrb.com/docs/configuration/environments/">“production” environment</a>.</p>

    <p>We’ll never run this rule manually (though you could with <code class="language-plaintext highlighter-rouge">make _site/</code>), but our <code class="language-plaintext highlighter-rouge">build</code> rule depends on this
running, and so Make will automatically run it when needed.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">clean: ...</code>: Run <code class="language-plaintext highlighter-rouge">make clean</code> to invoke this rule - in our case, we just delete the <code class="language-plaintext highlighter-rouge">_site/</code> folder.</li>
</ul>

<h2 id="modifying-the-jekyll-configuration">Modifying the Jekyll Configuration</h2>

<p>Jekyll configuration is stored in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file at the root of our site. There are a couple things in here
we’ll want to adjust before we publish our site to the world wide web. First of course we’ll want to set a few basics:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">title</code>: The name of your site (shown in the header).</li>
  <li><code class="language-plaintext highlighter-rouge">email</code>: A contact email address (shown in the footer).</li>
  <li><code class="language-plaintext highlighter-rouge">url</code>: This one is important - this sets the url used when clicking on absolute links to other pages within your site!</li>
  <li><code class="language-plaintext highlighter-rouge">baseurl</code>: Used in conjunction with <code class="language-plaintext highlighter-rouge">url</code>. The format used is <code class="language-plaintext highlighter-rouge">{url}{baseurl}/path/to/page.html</code>. If you’re hosting
nothing but Jekyll on your website, then leave this blank.</li>
</ul>

<p>And that’s about it! We’ll dig into configuration more when we talk about hosting on Tor and IPFS.</p>

<h2 id="hosting">Hosting</h2>

<p>Ok! Now that we have a (basic) site, how do we host it? Let’s start simple and look at NearlyFreeSpeech.net, whom I’ve
been using for years. They’re cheap, no-nonsense, and don’t have any crazy hidden fees. They also have support for Let’s
Encrypt certificates, making SSL support both easy and automatic. Head on over and set up an account. It’ll walk you
through creating a site (your website hosting) and you can even register and connect the domain name all within their
system. Eventually you’ll find the settings to be able to connect with SSH - enable this and let’s update our Makefile
again. Add this rule to your Makefile:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">publish</span><span class="o">:</span> <span class="nf">_site/</span>
	rsync <span class="nt">--itemize-changes</span> <span class="nt">--checksum</span> <span class="nt">--recursive</span> <span class="nt">--compress</span> <span class="nt">--delete</span> _site/<span class="k">*</span> <span class="nv">$USER</span>@ssh.phx.nearlyfreespeech.net:.
</code></pre></div></div>

<p>Let’s break it down again:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">publish: _site/</code>: when we execute <code class="language-plaintext highlighter-rouge">make publish</code>, we want to make sure the rule to build the <code class="language-plaintext highlighter-rouge">_site/</code> folder runs
first.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">rsync [...] _site/* $USER@ssh.phx.nearlyfreespeech.net:.</code>: we’ll use rsync (a remote file-copying tool) to connect to
our hosting via SSH, synchronizing the contents of <code class="language-plaintext highlighter-rouge">_site</code> with the root (<code class="language-plaintext highlighter-rouge">.</code>) folder of our hosting. You’ll want to
replace <code class="language-plaintext highlighter-rouge">$USER</code> with your NearlyFreeSpeech.net username, of course.</p>

    <p>The options we’re using are:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--itemize-changes</code>: list changes as we go (for clarity).</li>
      <li><code class="language-plaintext highlighter-rouge">--checksum</code>: rely on a file checksum (not timestamps and file size) to determine if files need to be replaced.</li>
      <li><code class="language-plaintext highlighter-rouge">--recursive</code>: recurse into subdirectories of <code class="language-plaintext highlighter-rouge">_site/</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">--compress</code>: HTML is very compressible, so why not save some bandwidth?</li>
      <li><code class="language-plaintext highlighter-rouge">--delete</code>: this allows rsync to remove files on your hosting that are no longer present in your <code class="language-plaintext highlighter-rouge">_site</code> folder.
This can be useful if you rename or delete a file that you no longer want people to be able to access.</li>
    </ul>
  </li>
</ul>

<p>Running <code class="language-plaintext highlighter-rouge">make publish</code> now should build your website and then prompt your for your NearlyFreeSpeech.net password to
connect with SSH. Provide your password and watch as your site is made available!</p>

<h2 id="up-next">Up Next</h2>

<p>In future posts in this series, we’ll look at making some quality of life improvements to the default Jekyll layout and
theme, as well as hosting our site on IPFS!</p>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="meta" /><summary type="html"><![CDATA[Sidneys1.com is built statically using Jekyll, and then published on the world wide web, GitHub Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Let’s walk through it step by step. We’ll be looking into (over the course of several posts): Building a website with Jekyll Hosting on NearlyFreeSpeech.net Customizing the site layout and adding useful features Hosting on GitHub Pages Hosting on IPFS Hosting on Tor]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Retro Roundup 2022</title><link href="https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup.html" rel="alternate" type="text/html" title="Retro Roundup 2022" /><published>2022-06-03T15:26:00-04:00</published><updated>2022-06-03T15:26:00-04:00</updated><id>https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup</id><content type="html" xml:base="https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup.html"><![CDATA[<p>Here’s a quick roundup of the retrocomputing projects I worked on and devices I’ve acquired! Since this is the first
year I started collecting retro computers, it will also contain a few items that I’ve had for over a year as well.</p>

<!--more-->

<h2 id="commodore-64">Commodore 64</h2>

<p>That’s right! The O.G. home computer, and still the best-selling single model of computer to date. My particular model
is a brown breadbin.</p>

<h3 id="commodore-1541-disk-drive">Commodore 1541 Disk Drive</h3>

<p>Included with my C64 was a Commodore 1541 5.25” floppy disk drive. Not too much to say here.</p>

<h3 id="games-and-software">Games and Software</h3>

<p>I also received a few 5.25” disks with the C64, however I can’t locate them at this moment. I’ll have to see if I can
find them and then update this post.</p>

<h3 id="line-doubler">Line Doubler</h3>

<p>My initial attempts at connecting the C64 up to a modern television were not great - eventually I ordered a cheap line
doubler that accepted breakout RGB input and produced HDMI. I’m honestly unimpressed with this particular model (Amanka
AVI to HDMI) and instead ended up buying a S-Video cable for the C64 and using a CRT television instead - the difference
in picture quality is astounding.</p>

<h3 id="iec2microsd">IEC2MicroSD</h3>

<p>Another convenience purchase, this device allows me to use an SD card as if it were a floppy drive.</p>

<h2 id="commodore-vic-20">Commodore VIC-20</h2>

<p>A more recent purchase, I also acquired a Commodore VIC-20 (revision A or B board). You can see
<a href="https://cbmvic.net/registry/569">my entry on the VIC-20 registry</a>. This VIC currently powers on, but does not output a
video signal. I’m in the processes of figuring out what the problem is. It’s in pretty rough shape, with a few damaged
parts on the case and missing the metallic Commodore VIC-20 badge (of which I’ve ordered a replacement).</p>

<p>This computer came in the original box, amazingly, and included the power adapter (actually soldered on to the
mainboard), several manuals, and the “Invaders” cartridge.</p>

<h2 id="sun-sparcstation-haul">Sun SPARCstation Haul</h2>

<p>Wow - what can I say here? A few months ago I had a reply to a <a href="https://www.freecycle.org/">FreeCycle</a> listing that I’d
posted in search of any early-90’s to late-00’s computers (this search also turned up the Dell CRT described below).
The person who messaged me had been a small businessowner in the early to mid 90’s, and was looking to get rid of some
of their server room equipment that they’d been holding on to in a storage unit. I hastily agreed and a few months later
I went to pick up quite the haul:</p>

<ul>
  <li>A WYSE CRT Serial Terminal</li>
  <li>A Nokia 447W CRT Monitor</li>
  <li>A Sun Microsystems PS/2 keyboard</li>
  <li>A Compaq Netelligent 100Base-T Class 1 Repeater</li>
  <li>A Dell PowerEdge 650 (this is from 2003, so much later in the company’s lifetime than the majority of this equipment)</li>
  <li>An unlabeled beige PC tower (still need to look inside this one!)</li>
  <li>A Dell PowerEdge 1300 (also circa late 90’s early 00’s)</li>
  <li>An unknown rack-mount box with a “CTC” badge, locking front panel, and perhaps a LCD display (also need to crack this
one open!)</li>
  <li>An Axil Ultima 1 (a third-party Sun SPARCstation Clone, see <a href="https://fcw.com/1996/06/axil-targets-sun-with-sparc-compatible-graphics-computer/238823/">this article</a>)</li>
  <li>A <a href="https://en.wikipedia.org/wiki/SPARCstation_20">Sun SPARCstation 20</a></li>
  <li>A <a href="https://en.wikipedia.org/wiki/Ultra_1">Sun ULTRA 1 Creator</a></li>
</ul>

<h2 id="compaq-deskpro-retro-battlestation">Compaq DeskPro Retro Battlestation</h2>

<p>Another longer-term effort of mine has been to recreate my childhood computer - a Compaq DeskPro that sat on the desk
under my loft bed through most of my formative years. Of course, since we have the benefit of choice, I’m also
“upgrading” it into the ideal late-90’s gaming computer!</p>

<p>The exact model I have is a later model DeskPro EN that is quite a bit smaller in overall form factor to my childhood
PC, however it does have the same general aesthetics that I was looking for. Unfortunately, so far I’ve been unable to
locate the matching Compaq keyboard and 800x600 CRT that I had as a kid as well… Though I did find a period-correct
Compaq PS/2 mouse!</p>

<h3 id="geforce-fx5200">GeForce FX5200</h3>

<p>I acquired a GeForce fx5200 PCI GPU for this computer - I originally had purchased a AGP 5200 by accident, so I suppose
I’ll end up using that in some other computer down the line!</p>

<p>This card works quite well (once the appropriate DirectX 9 drivers are installed) in all of the games I’ve tested so
far.</p>

<h3 id="microsoft-naturals-keyboard">Microsoft Naturals Keyboard</h3>

<p>A flea market find - a $5 Microsoft Naturals keyboard - a funky little beige PS/2 keyboard with an early PS/2→USB
adapter. In lieu of the Compaq keyboard I really want, this works in a pinch.</p>

<h3 id="windows-98-second-edition-third-edition">Windows 98 Second Edition <em>(Third Edition?)</em></h3>

<p>Finally, this computer runs Windows 98 SE with many components of the unofficial “third edition” service pack installed
to add some much-needed quality-of-life features, including USB mass storage device support.</p>

<h3 id="dell-monitor">Dell Monitor</h3>

<p>Not much to say here, another FreeCycle find - while it does support a nice 1024x768 resolution, it has a mid-00’s black
plastic aesthetic that I am not overly fond of.</p>

<h2 id="compaq-presario-700">Compaq Presario 700</h2>

<p>An EBay purchase, this is a early-00’s laptop designed for use with Windows XP. Being from GoodWill it came without an
internal hard drive, which I’ve since replaced. Interestingly, it includes an expansion slot, a 3.5” floppy drive, <em>and</em>
a DVD-ROM and CD R-RW drive.</p>

<h2 id="compaq-presario-1245">Compaq Presario 1245</h2>

<p>Another EBay purchase, this time a slightly older aesthetic laptop with a CD-ROM only drive and a floppy drive.</p>

<h2 id="dell-inspiron-1420">Dell Inspiron 1420</h2>

<p>This is my childhood laptop! Which now probably counts as “retro”. Not much to say here, there are a few missing keys
because I once decided to try the DVORAK layout (which I got quite good at as I remember), but as it turns out Dell
in its infinite wisdom made the indexing keys (F and J) use a reversed butterfly hinge from the rest of the keys,
meaning those didn’t <em>quite</em> fit in the alternate layout an I had to physically cut them to make them fit. Eventually
this physical damage led to them no attaching to the hinge as securely as they should have, and with time a few keys
became lost entirely.</p>]]></content><author><name>Sidneys1</name></author><category term="retrocomputing" /><category term="retrocomputing" /><category term="collecting" /><summary type="html"><![CDATA[Here’s a quick roundup of the retrocomputing projects I worked on and devices I’ve acquired! Since this is the first year I started collecting retro computers, it will also contain a few items that I’ve had for over a year as well.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/2022-06-03-retro-roundup/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/2022-06-03-retro-roundup/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Raytracing!</title><link href="https://sidneys1.github.io/programming/2022/03/23/raytracing.html" rel="alternate" type="text/html" title="Raytracing!" /><published>2022-03-23T13:04:39-04:00</published><updated>2022-03-23T13:04:39-04:00</updated><id>https://sidneys1.github.io/programming/2022/03/23/raytracing</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/03/23/raytracing.html"><![CDATA[<p>Since I started programming I’ve had a dream in the back of my mind: <em>raytracers are super cool</em>, and I’d like to build
one myself. But with that dream accompanied another thought: <em>raytracers are nearly a pure expression of math</em>, a
discipline I am poorly qualified for.</p>

<p>However this winter I discovered a new programming community, <a href="https://community.onelonecoder.com/">OneLoneCoder</a>, and its leader, <a href="https://www.youtube.com/channel/UC-yuWVUplUJZvieEligKBkA">javidx9</a>.
Watching the videos produced by javidx9 inspired me to take a leap of faith in myself and start this raytracing project.
The result has been amazing to see unfold as I developed first a working prototype in C#, then in C++, and finally as I
produced what hopefully is an easy to follow “tutorial” style Git repository. So, lets dive in!</p>

<!--more-->

<p><img src="https://sidneys1.github.io/images/2022-03-23-raytracing/finished.gif" alt="finished product" /></p>

<h2 id="what-is-raytracing">What is Raytracing?</h2>

<p>Raytracing is a method of rendering three dimensional scenes that is inspired by the physics behind light and vision. In
the real world, light emanates from some source and bounces off of objects before entering our eye and being processed
by the brain. In raytracing, however, this process is reversed, and a “ray” is sent out from the virtual camera into a
scene, collecting information about the objects it encounters, eventually returning a resolved color for that pixel of
the canvas.</p>

<h2 id="how-do-we-begin">How Do We Begin?</h2>

<h3 id="creating-a-new-olcpixelgameengine-project">Creating a new <code class="language-plaintext highlighter-rouge">olc::PixelGameEngine</code> Project</h3>

<p>We’re going to start with <kbd class="ui">Create a new project</kbd> in Visual Studio (I’m using 2022). Select the <kbd class="ui">Empty
Project</kbd> (C++/Windows/Console) template. I also opted for the flat directory structure option <kbd class="ui">☑ Place solution
and project in the same directory</kbd>.</p>

<p><img src="https://sidneys1.github.io/images/2022-03-23-raytracing/create-a-new-project.png" alt="Create new project" /></p>

<p>We copy in the <a href="https://github.com/OneLoneCoder/olcPixelGameEngine/releases/latest/download/olcPixelGameEngine.h"><code class="language-plaintext highlighter-rouge">olcPixelGameEngine.h</code> file</a> and add it to our solution. We also add a blank <code class="language-plaintext highlighter-rouge">main.cpp</code>
and populate it with the contents of the template available in the <code class="language-plaintext highlighter-rouge">olcPixelGameEngine.h</code> header, taking care to rename
our game class to match our needs.</p>

<div class="note">
  <div class="note-title">Note</div>
  <p>Running our project will render a default PixelGameEngine scene: a 256x240 canvas of random pixels, magnified 4x:</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-01-Add%20PGE%20header%20and%20create%20a%20game%20from%20template.png" alt="Pixel Barf" title="Pixel Barf" onclick="document.getElementById('46-pixel-barf').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="46-pixel-barf" onclick="document.getElementById('46-pixel-barf').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/01-Add%20PGE%20header%20and%20create%20a%20game%20from%20template.png" alt="Pixel Barf" title="Pixel Barf" loading="lazy" />
</dialog>

</div>

<h2 id="setting-the-scene">Setting the Scene</h2>

<h3 id="add-basic-shapes-and-a-vector-of-shapes-to-render">Add basic Shapes and a vector of shapes to render</h3>

<p>We create a base class <code class="language-plaintext highlighter-rouge">Shape</code> and derived class <code class="language-plaintext highlighter-rouge">Sphere</code> (blank for now) that we will use to define our renderable
objects in the future.</p>

<p>We also add a <code class="language-plaintext highlighter-rouge">std::vector</code> of <code class="language-plaintext highlighter-rouge">std::unique_ptr&lt;Shape&gt;</code> to our game class. This will allow us to add new <code class="language-plaintext highlighter-rouge">Shape</code>-derived
objects to our scene:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shapes</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Sphere</span><span class="o">&gt;</span><span class="p">());</span>
</code></pre></div></div>

<p>When the game exits, the memory we allocated will be freed (thanks, smart pointers).</p>

<h3 id="add-constants-and-a-way-to-sample-single-pixels">Add constants and a way to “Sample” single pixels</h3>

<p>We define a few constants for window geometry and begin implementing our rendering process by looping over the rows and
columns of the scene and calling a <code class="language-plaintext highlighter-rouge">Sample</code> function that takes a floating-point x,y position on the viewport and
returns a <code class="language-plaintext highlighter-rouge">olc::Pixel</code> for that location.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Game width and height (in pixels).</span>
<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">int</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>

<span class="c1">// Half the game width and height (to identify the center of the screen).</span>
<span class="k">constexpr</span> <span class="kt">float</span> <span class="n">HALF_WIDTH</span> <span class="o">=</span> <span class="n">WIDTH</span> <span class="o">/</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">float</span> <span class="n">HALF_HEIGHT</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">/</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">OnUserUpdate</span><span class="p">(</span><span class="kt">float</span> <span class="n">fElapsedTime</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
    <span class="c1">// Called once per frame</span>

    <span class="c1">// Iterate over the rows and columns of the scene</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Sample this specific pixel (converting screen coordinates to scene coordinates).</span>
            <span class="k">auto</span> <span class="n">color</span> <span class="o">=</span> <span class="n">Sample</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">HALF_WIDTH</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">HALF_HEIGHT</span><span class="p">);</span>
            <span class="n">Draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="nf">Sample</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="c1">// Called to get the color of a specific point on the screen.</span>
    <span class="c1">// For now we're returning a color based on the screen coordinates.</span>
    <span class="k">return</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>
  <p>Running our project will now render a 250x250 canvas at 2x magnification. Our magenta fill has been replaced with a
color pattern converging in the center of the canvas:</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-03-Add%20constants%20and%20a%20way%20to%20Sample%20single%20pixels.png" alt="Coordinate Identity" title="Coordinate Identity" onclick="document.getElementById('142-coordinate-identity').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="142-coordinate-identity" onclick="document.getElementById('142-coordinate-identity').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/03-Add%20constants%20and%20a%20way%20to%20Sample%20single%20pixels.png" alt="Coordinate Identity" title="Coordinate Identity" loading="lazy" />
</dialog>

</div>

<h3 id="add-some-geometry-types-enhance-shape-and-sphere">Add some geometry types, enhance Shape and Sphere</h3>

<p>We add <code class="language-plaintext highlighter-rouge">struct</code>s for vectors (<code class="language-plaintext highlighter-rouge">vf3d</code>) and rays (<code class="language-plaintext highlighter-rouge">ray</code>). A vector represents a 3-dimensional point in space or a
3-dimensional magnitude, while a ray uses two vectors, one to represent an origin point, and one to represent a
directional magnitude out from that point.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Struct to describe a 3D floating point vector.</span>
<span class="k">struct</span> <span class="nc">vf3d</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">;</span>
    <span class="c1">// Default constructor.</span>
    <span class="n">vf3d</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
    <span class="c1">// Explicit constructor that initializes x, y, and z.</span>
    <span class="k">constexpr</span> <span class="n">vf3d</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="n">z</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">z</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="p">{}</span>
    <span class="c1">// Explicit constructor that initializes x, y, and z to the same value.</span>
    <span class="k">constexpr</span> <span class="nf">vf3d</span><span class="p">(</span><span class="kt">float</span> <span class="n">f</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">z</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="c1">// Struct to describe a 3D floating point ray (vector with origin point).</span>
<span class="k">struct</span> <span class="nc">ray</span> <span class="p">{</span>
    <span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">direction</span><span class="p">;</span>
    <span class="c1">// Default constructor.</span>
    <span class="n">ray</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
    <span class="c1">// Add explicit constructor that initializes origin and direction.</span>
    <span class="k">constexpr</span> <span class="n">ray</span><span class="p">(</span><span class="k">const</span> <span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">vf3d</span> <span class="n">direction</span><span class="p">)</span> <span class="o">:</span> <span class="n">origin</span><span class="p">(</span><span class="n">origin</span><span class="p">),</span> <span class="n">direction</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We’ll also enhance our <code class="language-plaintext highlighter-rouge">Shape</code> class with properties that will allow us to describe the size, position, and color of
shapes in our scene:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Class to describe any kind of object we want to add to our scene.</span>
<span class="k">class</span> <span class="nc">Shape</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">vf3d</span> <span class="n">origin</span><span class="p">;</span>
    <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">;</span>
    <span class="c1">// Delete the default constructor (we'll never have a Shape with a default origin and fill).</span>
    <span class="n">Shape</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
    <span class="c1">// Add explicit constructor that initializes origin and fill.</span>
    <span class="n">Shape</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">)</span> <span class="o">:</span> <span class="n">origin</span><span class="p">(</span><span class="n">origin</span><span class="p">),</span> <span class="n">fill</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We’ll also give the <code class="language-plaintext highlighter-rouge">Sphere</code> class a notion of a <code class="language-plaintext highlighter-rouge">radius</code>, which is not shared by all <code class="language-plaintext highlighter-rouge">Shape</code>-derived classes:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sphere</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Shape</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">float</span> <span class="n">radius</span><span class="p">;</span>
    <span class="c1">// Delete the default constructor (see "Shape() = delete;").</span>
    <span class="n">Sphere</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
    <span class="c1">// Add explicit constructor that initializes Shape::origin, Shape::fill, and Sphere::radius.</span>
    <span class="n">Sphere</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">)</span> <span class="o">:</span> <span class="n">Shape</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">fill</span><span class="p">),</span> <span class="n">radius</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Next, we’ll want to update our <code class="language-plaintext highlighter-rouge">OnUserCreate</code> function to pass in the newly required properties of a <code class="language-plaintext highlighter-rouge">Sphere</code>. Let’s
create our initial <code class="language-plaintext highlighter-rouge">Sphere</code> at the position <code class="language-plaintext highlighter-rouge">x=0, y=0, z=200</code>, where \(x\) is lateral position, \(y\) is vertical
position, and \(z\) is depth (or distance from the camera). Since our camera will be at <code class="language-plaintext highlighter-rouge">x=0, y=0, z=0</code> this will
align our <code class="language-plaintext highlighter-rouge">Sphere</code> in the center of the canvas, 200 units away. We’ll also give our <code class="language-plaintext highlighter-rouge">Sphere</code> a solid <code class="language-plaintext highlighter-rouge">olc::GREY</code> color,
and set the <code class="language-plaintext highlighter-rouge">radius</code> to <code class="language-plaintext highlighter-rouge">100</code>.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- shapes.emplace_back(std::make_unique&lt;Sphere&gt;());
</span><span class="gi">+ shapes.emplace_back(std::make_unique&lt;Sphere&gt;(vf3d(0, 0, 200), olc::GREY, 100));
</span></code></pre></div></div>

<p>Finally, using our newly created <code class="language-plaintext highlighter-rouge">ray</code> type, let’s construct a ray in <code class="language-plaintext highlighter-rouge">Sample</code> for a given pixel that will point into
the scene:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a ray casting into the scene from this "pixel".</span>
<span class="n">ray</span> <span class="nf">sample_ray</span><span class="p">({</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">});</span>
<span class="c1">// TODO: We now need to test if this ray hits any Shapes and produces</span>
<span class="c1">//       a color.</span>
</code></pre></div></div>

<p>We create the <code class="language-plaintext highlighter-rouge">ray</code> at origin <code class="language-plaintext highlighter-rouge">x=x, y=y, z=0</code>, and set the direction to <code class="language-plaintext highlighter-rouge">x=0, y=0, z=1</code>. The direction is what we call a
<em>unit vector</em>, which means that the overall magnitude to the vector is 1 (\(\sqrt{x^2+y^2+z^2}=1\)). Using a unit vector
will simplify some math for us later.</p>

<h3 id="add-fog-color-and-a-way-to-sample-rays">Add fog color and a way to sample rays</h3>

<p>To prevent our scene from extending into infinity, and to have something to show when a ray doesn’t hit <em>anything</em>, we
add a new constant: a “fog” color.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A color representing scene fog.</span>
<span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="nf">FOG</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">);</span>
</code></pre></div></div>

<p>Additionally, we add a more specific function, <code class="language-plaintext highlighter-rouge">SampleRay</code>, that is called by <code class="language-plaintext highlighter-rouge">Sample</code> to return the color (or absence
thereof) of a ray as it extends into our scene. For now, still, this returns a color relative to the \(x\) and \(y\)
coordinate in our scene:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add a new include at the top of our file:</span>
<span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span>
<span class="c1">// ---✂---</span>

<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="o">&gt;</span> <span class="n">SampleRay</span><span class="p">(</span><span class="k">const</span> <span class="n">ray</span> <span class="n">r</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="c1">// Called to get the color produced by a specific ray.</span>
    <span class="c1">// This will be the color we (eventually) return.</span>
    <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">final_color</span><span class="p">;</span>
    <span class="c1">// For now we're returning a color based on the screen coordinates.</span>
    <span class="k">return</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">final_color</span> <span class="o">=</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">final_color</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Don’t forget to update <code class="language-plaintext highlighter-rouge">Sample</code> accordingly:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  // Create a ray casting into the scene from this "pixel".
  ray sample_ray({ x, y, 0 }, { 0, 0, 1 });
<span class="gd">- // TODO: We now need to test if this ray hits any Shapes and produces
- //       a color.
</span><span class="gi">+ // Sample this ray - if the ray doesn't hit anything, use the color of
+ // the surrounding fog.
+ return SampleRay(sample_ray).value_or(FOG);
</span></code></pre></div></div>

<h3 id="add-intersection-and-sample-methods-to-shapes">Add intersection and sample methods to Shapes</h3>

<p>Our <code class="language-plaintext highlighter-rouge">SampleRay</code> function has been upgraded to search for a <code class="language-plaintext highlighter-rouge">Shape</code> that it intersects with. To do this, <code class="language-plaintext highlighter-rouge">Shape</code> has been
upgraded with two new virtual methods:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get the color of this Shape (when intersecting with a given ray).</span>
<span class="k">virtual</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">sample</span><span class="p">(</span><span class="n">ray</span> <span class="n">sample_ray</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">fill</span><span class="p">;</span> <span class="p">}</span>

<span class="c1">// Determine how far along a given ray this Shape intersects (if at all).</span>
<span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">intersection</span><span class="p">(</span><span class="n">ray</span> <span class="n">r</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>These methods provide the ability to determine where along a <code class="language-plaintext highlighter-rouge">ray</code> a <code class="language-plaintext highlighter-rouge">Shape</code> intersects, and to provide the color of the
<code class="language-plaintext highlighter-rouge">Shape</code> at a given <code class="language-plaintext highlighter-rouge">ray</code> intersection. Our <code class="language-plaintext highlighter-rouge">Sphere</code> class overrides the <code class="language-plaintext highlighter-rouge">intersection</code> method, though for now
the implementation only returns an empty optional.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Determine how far along a given ray this Circle intersects (if at all).</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">intersection</span><span class="p">(</span><span class="n">ray</span> <span class="n">r</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="c1">// TODO: Implement ray-sphere intersection.</span>
    <span class="k">return</span> <span class="p">{};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, let’s update our <code class="language-plaintext highlighter-rouge">Sample</code> function, replacing the <code class="language-plaintext highlighter-rouge">final_color</code> value we compute based on screen coordinates
with an algorithm that searches a <code class="language-plaintext highlighter-rouge">Shape</code> that intersects with our given <code class="language-plaintext highlighter-rouge">ray</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Store a pointer to the Shape this ray intersects with.</span>
<span class="k">auto</span> <span class="n">intersected_shape_iterator</span> <span class="o">=</span> <span class="n">shapes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
<span class="c1">// Also store the distance along the ray that the intersection occurs.</span>
<span class="kt">float</span> <span class="n">intersection_distance</span> <span class="o">=</span> <span class="n">INFINITY</span><span class="p">;</span>

<span class="cm">/* Determine the Shape this ray intersects with(if any). */</span> <span class="p">{</span>
    <span class="c1">// Iterate over all of the Shapes in our scene.</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">shapes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">shapes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// If the distance is not undefined (meaning no intersection)...</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">intersection</span><span class="p">(</span><span class="n">r</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// Save the current Shape as the intersected Shape!</span>
            <span class="n">intersected_shape_iterator</span> <span class="o">=</span> <span class="n">it</span><span class="p">;</span>
            <span class="c1">// Also save the distance along the ray that this intersection occurred.</span>
            <span class="n">intersection_distance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// If we didn't intersect with any Shapes, return an empty optional.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">intersected_shape_iterator</span> <span class="o">==</span> <span class="n">shapes</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="k">return</span> <span class="p">{};</span>
<span class="p">}</span>
<span class="c1">// Get the shape we discovered</span>
<span class="k">const</span> <span class="n">Shape</span> <span class="o">&amp;</span><span class="n">intersected_shape</span> <span class="o">=</span> <span class="o">**</span><span class="n">intersected_shape_iterator</span><span class="p">;</span>
<span class="c1">// Set our color to the sampled color of the Shape this ray with.</span>
<span class="n">final_color</span> <span class="o">=</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="rendering-shapes">Rendering Shapes</h2>

<h3 id="implement-ray-sphere-intersection">Implement ray-Sphere intersection</h3>

<p>We’ll need to overload some operators for a <code class="language-plaintext highlighter-rouge">vf3d</code>: subtraction, and dot-product. A dot-product is a useful way of
comparing two vectors to determine if they are similar. Consider two vectors, \(a\) and \(b\). The dot-product is a
scalar value determined like so:</p>

\[dot(a,b) = a\cdot{}b = a_{1}b_{1}+a_{2}b_{2}+a_{3}b_{3}\]

<p>So, for example:</p>

\[\begin{bmatrix} 1 &amp; 2 &amp; 3\end{bmatrix}\cdot\begin{bmatrix} 4 &amp; 5 &amp; 6\end{bmatrix}\newline=\newline(1\cdot4)+(2\cdot5)+(3\cdot6)\newline=\newline4+10+18\newline=\newline32\]

<p>Translating this to C++ gives us our dot product function:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Dot product (multiplication): vf3d * vf3d = float</span>
<span class="k">const</span> <span class="kt">float</span> <span class="k">operator</span><span class="o">*</span> <span class="p">(</span><span class="k">const</span> <span class="n">vf3d</span> <span class="n">right</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">right</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="n">right</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">*</span> <span class="n">right</span><span class="p">.</span><span class="n">z</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Subtraction: vf3d - vf3d = vf3d</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="k">operator</span><span class="o">-</span><span class="p">(</span><span class="k">const</span> <span class="n">vf3d</span> <span class="n">right</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="n">x</span> <span class="o">-</span> <span class="n">right</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">right</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">-</span> <span class="n">right</span><span class="p">.</span><span class="n">z</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We’ll also implement the equation for an intersection between a <code class="language-plaintext highlighter-rouge">ray</code> and a <code class="language-plaintext highlighter-rouge">Sphere</code>. I’m not going to go into depth
explaining the geometry here: this is a well-documented process and can be researched separately.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">intersection</span><span class="p">(</span><span class="n">ray</span> <span class="n">r</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{};</span>
    <span class="n">vf3d</span> <span class="n">oc</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">origin</span> <span class="o">-</span> <span class="n">origin</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">direction</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">2.0</span><span class="n">f</span> <span class="o">*</span> <span class="p">(</span><span class="n">oc</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">direction</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">oc</span> <span class="o">*</span> <span class="n">oc</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">discriminant</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">discriminant</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{};</span>
    <span class="k">auto</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">b</span> <span class="o">-</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">discriminant</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mf">2.0</span><span class="n">f</span> <span class="o">*</span> <span class="n">a</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{};</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>
  <p>Running our project will now render a (highly aliased and flatly-colored) Sphere!</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-07-Implement%20ray-Sphere%20intersection.png" alt="Flat Sphere" title="Flat Sphere" onclick="document.getElementById('19-flat-sphere').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="19-flat-sphere" onclick="document.getElementById('19-flat-sphere').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/07-Implement%20ray-Sphere%20intersection.png" alt="Flat Sphere" title="Flat Sphere" loading="lazy" />
</dialog>

</div>

<h3 id="add-perspective-rendering-and-depth-sorting">Add perspective rendering and depth sorting</h3>

<p>First we’ll add some additional Spheres to our scene at different Z-depths. If we run our project now, you’ll see that
the Spheres added to our scene last are drawn in front of the earlier ones, even if they are further away.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add some additional Spheres at different positions.</span>
<span class="n">shapes</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Sphere</span><span class="o">&gt;</span><span class="p">(</span><span class="n">vf3d</span><span class="p">(</span><span class="o">-</span><span class="mi">150</span><span class="p">,</span> <span class="o">+</span><span class="mi">75</span><span class="p">,</span> <span class="o">+</span><span class="mi">300</span><span class="p">),</span> <span class="n">olc</span><span class="o">::</span><span class="n">RED</span><span class="p">,</span> <span class="mi">100</span><span class="p">));</span>
<span class="n">shapes</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Sphere</span><span class="o">&gt;</span><span class="p">(</span><span class="n">vf3d</span><span class="p">(</span><span class="o">+</span><span class="mi">150</span><span class="p">,</span> <span class="o">-</span><span class="mi">75</span><span class="p">,</span> <span class="o">+</span><span class="mi">100</span><span class="p">),</span> <span class="n">olc</span><span class="o">::</span><span class="n">GREEN</span><span class="p">,</span> <span class="mi">100</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="https://sidneys1.github.io/images/2022-03-23-raytracing/bad-z.png" alt="Bad Z-depth" /></p>

<p>To remedy that, we up date our hit check in <code class="language-plaintext highlighter-rouge">SampleRay</code> to select the object whose intersection is nearest to the <code class="language-plaintext highlighter-rouge">ray</code>
origin. Now if we run our project, the Spheres are properly sorted.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- if (std::optional&lt;float&gt; distance = (*it)-&gt;intersection(r)) {
</span><span class="gi">+ if (std::optional&lt;float&gt; distance = (*it)-&gt;intersection(r).value_or(INFINITY);
+                 distance &lt; intersection_distance) {
</span></code></pre></div></div>

<p><img src="https://sidneys1.github.io/images/2022-03-23-raytracing/no-perspective.png" alt="no-perspective" /></p>

<p>However, you’ll notice that all three Spheres are the same size, despite being different distances from the camera. To
fix <em>this</em>, we’ll need to add perspective to our camera. We’ll do this in a very simplistic manner, by having all of the
rays originate from some point, and pointing towards what you can think of as a “virtual canvas” some distance in front
of that origin point. Update <code class="language-plaintext highlighter-rouge">Sample</code> like so:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- ray sample_ray({ x, y, 0 }, { 0, 0, 1 });
</span><span class="gi">+ ray sample_ray({ 0, 0, -800 }, { (x / (float)WIDTH) * 100, (y / (float)HEIGHT) * 100, 200});
</span><span class="err">
</span>  // Sample this ray - if the ray doesn't hit anything, use the color of
  // the surrounding fog.
<span class="gd">- return SampleRay(sample_ray).value_or(FOG);
</span><span class="gi">+ return SampleRay(sample_ray.normalize()).value_or(FOG);
</span></code></pre></div></div>

<p>Notice we call method of <code class="language-plaintext highlighter-rouge">ray</code> that we haven’t defined yet: <code class="language-plaintext highlighter-rouge">normalize()</code>. Normalization produces a normalized vector
(discussed before) from a non-normalized vector by resizing the vector components in proportion to their length such
that the overall length is still 1. Normalization is defined as (with \(v\cdot{}v\) of course being the dot product of
itself):</p>

\[normalize(v) = \frac{v}{\sqrt{v\cdot{}v}}\]

<p>Let’s add <code class="language-plaintext highlighter-rouge">normalize()</code> to both <code class="language-plaintext highlighter-rouge">ray</code> and <code class="language-plaintext highlighter-rouge">vf3d</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In ray:</span>

<span class="c1">// Return a normalized version of this ray (magnitude == 1).</span>
<span class="k">const</span> <span class="n">ray</span> <span class="n">normalize</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="n">origin</span><span class="p">,</span> <span class="n">direction</span><span class="p">.</span><span class="n">normalize</span><span class="p">()</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// ---✂--- In vf3d:</span>

<span class="c1">// Division: vf3d / float = vf3d</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="k">operator</span><span class="o">/</span><span class="p">(</span><span class="kt">float</span> <span class="n">divisor</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="n">x</span> <span class="o">/</span> <span class="n">divisor</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">divisor</span><span class="p">,</span> <span class="n">z</span> <span class="o">/</span> <span class="n">divisor</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// Return a normalized version of this vf3d (magnitude == 1).</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="nf">normalize</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span> <span class="o">/</span> <span class="n">sqrtf</span><span class="p">((</span><span class="o">*</span><span class="k">this</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By normalizing this ray we get rays properly fanning out in a perspective.</p>

<div class="note note-wide">
  <div class="note-title">Note</div>
  <p>Running our project will now produce a proper perspective rendering of our three flat-shaded Spheres, at the correct
depths.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-08-Add%20perspective%20rendering%20and%20depth%20sorting.png" alt="Perspective Rendering" title="Perspective Rendering" onclick="document.getElementById('165-perspective-rendering').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="165-perspective-rendering" onclick="document.getElementById('165-perspective-rendering').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/08-Add%20perspective%20rendering%20and%20depth%20sorting.png" alt="Perspective Rendering" title="Perspective Rendering" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-07-Implement%20ray-Sphere%20intersection.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-08-Add%20perspective%20rendering%20and%20depth%20sorting.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<h3 id="add-a-plane-shape-and-apply-fog">Add a Plane Shape, and apply fog</h3>

<p>First we’ll add a new type of <code class="language-plaintext highlighter-rouge">Shape</code>: a <code class="language-plaintext highlighter-rouge">Plane</code>. This is a flat surface extending infinitely in all directions. I’m not
going to go into depth about the intersection algorithm, as that’s basic geometry and is better explained elsewhere.
Unlike a <code class="language-plaintext highlighter-rouge">Sphere</code>, orientation matters to a <code class="language-plaintext highlighter-rouge">Plane</code>, so we’ll also add a “direction” <code class="language-plaintext highlighter-rouge">vf3d</code> that will indicate the
normal pointing away from the surface.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Subclass of Shape that represents a flat Plane.</span>
<span class="k">class</span> <span class="nc">Plane</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Shape</span> <span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">vf3d</span> <span class="n">direction</span><span class="p">;</span>

	<span class="c1">// Add explicit constructor that initializes</span>
	<span class="n">Plane</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">vf3d</span> <span class="n">direction</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">)</span> <span class="o">:</span> <span class="n">Shape</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">fill</span><span class="p">),</span> <span class="n">direction</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="p">{}</span>

	<span class="c1">// Determine how far along a given ray this Plane intersects (if at all).</span>
	<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">intersection</span><span class="p">(</span><span class="n">ray</span> <span class="n">sample_ray</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
		<span class="k">auto</span> <span class="n">denom</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="n">sample_ray</span><span class="p">.</span><span class="n">direction</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">denom</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">0.001</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">auto</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">(</span><span class="n">origin</span> <span class="o">-</span> <span class="n">sample_ray</span><span class="p">.</span><span class="n">origin</span><span class="p">)</span> <span class="o">*</span> <span class="n">direction</span> <span class="o">/</span> <span class="n">denom</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="p">{};</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We will also override the <code class="language-plaintext highlighter-rouge">sample</code> virtual method for the first time to provide a checkerboard pattern that will make
the perspective rendering we added last time really pop.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get the color of this Plane (when intersecting with a given ray).</span>
<span class="c1">// We're overriding this to provide a checkerboard pattern.</span>
<span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="nf">sample</span><span class="p">(</span><span class="n">ray</span> <span class="n">sample_ray</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
	<span class="c1">// Get the point of intersection.</span>
	<span class="k">auto</span> <span class="n">intersect</span> <span class="o">=</span> <span class="p">(</span><span class="n">sample_ray</span> <span class="o">*</span> <span class="n">intersection</span><span class="p">(</span><span class="n">sample_ray</span><span class="p">).</span><span class="n">value_or</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">)).</span><span class="n">end</span><span class="p">();</span>

	<span class="c1">// Get the distances along the X and Z axis from the origin to the intersection.</span>
	<span class="kt">float</span> <span class="n">diffX</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">intersect</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="kt">float</span> <span class="n">diffZ</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">z</span> <span class="o">-</span> <span class="n">intersect</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>

	<span class="c1">// Get the XOR the signedness of the differences along X and Z.</span>
	<span class="c1">// This allows us to "invert" the +X,-Z and -X,+Z quadrants.</span>
	<span class="kt">bool</span> <span class="n">color</span> <span class="o">=</span> <span class="p">(</span><span class="n">diffX</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">diffZ</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>

	<span class="c1">// Flip the "color" boolean if diff % 100 &lt; 50 (e.g., flip one half of each 100-unit span.</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">fmod</span><span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">diffZ</span><span class="p">),</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">)</span> <span class="n">color</span> <span class="o">=</span> <span class="o">!</span><span class="n">color</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">fmod</span><span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">diffX</span><span class="p">),</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">)</span> <span class="n">color</span> <span class="o">=</span> <span class="o">!</span><span class="n">color</span><span class="p">;</span>

	<span class="c1">// If we're coloring this pixel, return the fill - otherwise return DARK_GREY.</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">color</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">fill</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">olc</span><span class="o">::</span><span class="n">DARK_GREY</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To do this we’ll also be adding some new operator overloads to both <code class="language-plaintext highlighter-rouge">vf3d</code> and <code class="language-plaintext highlighter-rouge">ray</code>, and we’ll also add a new method to
<code class="language-plaintext highlighter-rouge">ray</code> that returns the <code class="language-plaintext highlighter-rouge">vf3d</code> representing the endpoint of the <code class="language-plaintext highlighter-rouge">ray</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In vf3d:</span>

<span class="c1">// Addition: vf3d + vf3d = vf3d</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">vf3d</span> <span class="n">right</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">{</span> <span class="n">x</span> <span class="o">+</span> <span class="n">right</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">right</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">+</span> <span class="n">right</span><span class="p">.</span><span class="n">z</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// Multiplication: vf3d * float = vf3d</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">{</span> <span class="n">x</span> <span class="o">*</span> <span class="n">factor</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">factor</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">factor</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// ---✂--- In ray:</span>

<span class="c1">// Multiplication: ray * float = ray</span>
<span class="k">const</span> <span class="n">ray</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="kt">float</span> <span class="n">right</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">{</span> <span class="n">origin</span><span class="p">,</span> <span class="n">direction</span> <span class="o">*</span> <span class="n">right</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// Return the vf3d at the end of this ray.</span>
<span class="k">const</span> <span class="n">vf3d</span> <span class="n">end</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">origin</span> <span class="o">+</span> <span class="n">direction</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, we’ll add a new <code class="language-plaintext highlighter-rouge">Plane</code> to our scene just below our <code class="language-plaintext highlighter-rouge">Sphere</code>s. Note that since we render our canvas top to
bottom, +Y is down, while -Y is up.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add a "floor" Plane</span>
<span class="n">shapes</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Plane</span><span class="o">&gt;</span><span class="p">(</span><span class="n">vf3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span> <span class="p">),</span> <span class="n">vf3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">204</span><span class="p">)));</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now you’ll see the checkerboard pattern continue off to the horizon - <em>however</em>, it appears
further up on the canvas than you might expect. <em>Additionally</em>, the checkerboard pattern gets very garbled as the
checks gets smaller than a single pixel, creating a sort of unexpected and disorienting moire pattern. Perhaps drawing
surfaces <em>that</em> far away isn’t good…</p>

  <p><em>Coming soon: a screenshot.</em>
<!-- TODO: ![Plane.]() --></p>

</div>

<p>To remedy this, we’ll add the concept of Fog. We already have a Fog color, for when a ray doesn’t hit anything. This new
concept applies the idea of there being some extreme translucency to the nothingness between a ray’s origin and the
<code class="language-plaintext highlighter-rouge">Shape</code> it intersects with. We’ll begin by adding two new constants, one to define the maximum distance at which an
<code class="language-plaintext highlighter-rouge">Shape</code> would be visible, and the other as the reciprocal of that.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Fog distance and reciprocal (falloff).</span>
<span class="k">constexpr</span> <span class="kt">float</span> <span class="n">FOG_INTENSITY_INVERSE</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">float</span> <span class="n">FOG_INTENSITY</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">FOG_INTENSITY_INVERSE</span><span class="p">;</span>
</code></pre></div></div>

<p>Now when we’re determining the color of a ray in <code class="language-plaintext highlighter-rouge">SampleRay</code> we can check if the intersection distance is greater than
that of the max Fog distance. If so, we’ll immediately return the Fog color and skip further calculation. If the
distance is lower, however, we want to smoothly transition between the <code class="language-plaintext highlighter-rouge">Shape</code>’s color and the Fog’s color, depending on
the distance.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Quick check - if the intersection is further away than the furthest Fog point,</span>
<span class="c1">// then we can save some time and not calculate anything further, since it would</span>
<span class="c1">// be obscured by Fog regardless.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">intersection_distance</span> <span class="o">&gt;=</span> <span class="n">FOG_INTENSITY_INVERSE</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">FOG</span><span class="p">;</span>

<span class="c1">// Set our color to the sampled color of the Shape this ray with.</span>
<span class="n">final_color</span> <span class="o">=</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>

<span class="c1">// Apply Fog</span>
<span class="k">if</span> <span class="p">(</span><span class="n">FOG_INTENSITY</span><span class="p">)</span>
	<span class="n">final_color</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">final_color</span><span class="p">,</span> <span class="n">FOG</span><span class="p">,</span> <span class="n">intersection_distance</span> <span class="o">*</span> <span class="n">FOG_INTENSITY</span><span class="p">);</span>
</code></pre></div></div>

<p>To do this, we’ve referenced a function called <code class="language-plaintext highlighter-rouge">lerp</code> - short for “linear interpolation” - that we haven’t defined yet.
This function smoothly mixes two colors based on a floating point value between 0.0 and 1.0.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Apply a linear interpolation between two colors:</span>
<span class="c1">//  from |-------------------------------| to</span>
<span class="c1">//                ^ by</span>
<span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">lerp</span><span class="p">(</span><span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">from</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">to</span><span class="p">,</span> <span class="kt">float</span> <span class="n">by</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">by</span> <span class="o">&lt;=</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">)</span> <span class="k">return</span> <span class="n">from</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">by</span> <span class="o">&gt;=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">)</span> <span class="k">return</span> <span class="n">to</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="p">(</span>
		<span class="n">from</span><span class="p">.</span><span class="n">r</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">by</span><span class="p">)</span> <span class="o">+</span> <span class="n">to</span><span class="p">.</span><span class="n">r</span> <span class="o">*</span> <span class="n">by</span><span class="p">,</span>
		<span class="n">from</span><span class="p">.</span><span class="n">g</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">by</span><span class="p">)</span> <span class="o">+</span> <span class="n">to</span><span class="p">.</span><span class="n">g</span> <span class="o">*</span> <span class="n">by</span><span class="p">,</span>
		<span class="n">from</span><span class="p">.</span><span class="n">b</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">by</span><span class="p">)</span> <span class="o">+</span> <span class="n">to</span><span class="p">.</span><span class="n">b</span> <span class="o">*</span> <span class="n">by</span>
	<span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="note note-wide">
  <div class="note-title">Note</div>

  <p>Running our project now displays our Spheres as before, plus the checkerboard Plane of the floor, smoothly fading
into the distance.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-09-Add%20a%20Plane%20Shape,%20and%20apply%20Fog.png" alt="Floor and Fog" title="Floor and Fog" onclick="document.getElementById('141-floor-and-fog').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="141-floor-and-fog" onclick="document.getElementById('141-floor-and-fog').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/09-Add%20a%20Plane%20Shape,%20and%20apply%20Fog.png" alt="Floor and Fog" title="Floor and Fog" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-08-Add%20perspective%20rendering%20and%20depth%20sorting.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-09-Add%20a%20Plane%20Shape,%20and%20apply%20Fog.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<p>Note that as our scene and renderer grow in complexity we’ll begin to see lower and lower frame-rates when running our
project. Switching our compilation mode to Release and running without debugging can help, as the compiler will more
aggressively apply optimizations. Feel free to experiment with optimization strategies in the Release compilation
settings.</p>

<h2 id="prettying-up">Prettying Up</h2>

<h3 id="add-reflections">Add reflections</h3>

<p>Reflections are an intrinsic feature of any raytracer. To begin, let’s add a new constant to control just how many times
a ray may reflect as it makes its way through the scene. Imagine being inside a hall of mirrors - the reflections may
continue to some recursive depth - in real life, this is infinite (or at least to the degree allowed by the quality of
the mirrors and available light). In our project, reflections add more computational complexity, so limiting the degree
to which these reflections propagate is essential. To do so, I’ve surrounded two different values for this constant in
preprocessor “if” statements to provide different values under Debug and Release mode respectively.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef DEBUG
</span><span class="k">constexpr</span> <span class="kt">int</span> <span class="n">BOUNCES</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="cp">#else
</span><span class="k">constexpr</span> <span class="kt">int</span> <span class="n">BOUNCES</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>Next we’ll add a property to our base <code class="language-plaintext highlighter-rouge">Shape</code> class - a floating point representing <code class="language-plaintext highlighter-rouge">reflectivity</code>. This will range
between 0 (no reflections) and 1 (a perfect mirror). We’ll also initialize this as a constructor parameter, and extend
that parameter to the <code class="language-plaintext highlighter-rouge">Sphere</code> class as well.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In Shape:</span>

<span class="n">vf3d</span> <span class="n">origin</span><span class="p">;</span>
<span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">reflectivity</span><span class="p">;</span>

<span class="cm">/* CONSTRUCTORS */</span>

<span class="c1">// Delete the default constructor (we'll never have a Shape with a default origin and fill).</span>
<span class="n">Shape</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>

<span class="c1">// Add explicit constructor that initializes origin and fill.</span>
<span class="n">Shape</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">,</span> <span class="kt">float</span> <span class="n">reflectivity</span> <span class="o">=</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">)</span> <span class="o">:</span> <span class="n">origin</span><span class="p">(</span><span class="n">origin</span><span class="p">),</span> <span class="n">fill</span><span class="p">(</span><span class="n">fill</span><span class="p">),</span> <span class="n">reflectivity</span><span class="p">(</span><span class="n">reflectivity</span><span class="p">)</span> <span class="p">{}</span>

<span class="c1">// ---✂--- In Sphere:</span>

<span class="n">Sphere</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">origin</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span> <span class="n">fill</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">reflectivity</span> <span class="o">=</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">)</span> <span class="o">:</span> <span class="n">Shape</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">fill</span><span class="p">,</span> <span class="n">reflectivity</span><span class="p">),</span> <span class="n">radius</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span> <span class="p">{}</span>
</code></pre></div></div>

<p>Next, we’ll make the surfaces of our first and second <code class="language-plaintext highlighter-rouge">Sphere</code>s to be
reflective.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // Create a new Sphere and add it to our scene.
<span class="gd">-shapes.emplace_back(std::make_unique&lt;Sphere&gt;(vf3d(0, 0, 200), olc::GREY, 100));
</span><span class="gi">+shapes.emplace_back(std::make_unique&lt;Sphere&gt;(vf3d(0, 0, 200), olc::GREY, 100, 0.9f));
</span><span class="err">
</span> // Add some additional Spheres at different positions.
<span class="gd">-shapes.emplace_back(std::make_unique&lt;Sphere&gt;(vf3d(-150, +75, +300), olc::RED, 100));
</span><span class="gi">+shapes.emplace_back(std::make_unique&lt;Sphere&gt;(vf3d(-150, +75, +300), olc::RED, 100, 0.5f));
</span></code></pre></div></div>

<p>Lastly, we’ll add a new abstract method to our <code class="language-plaintext highlighter-rouge">Shape</code> class that will return the normal at a given
intersection point, and override this abstract method in our <code class="language-plaintext highlighter-rouge">Sphere</code> and <code class="language-plaintext highlighter-rouge">Plane</code> classes. A normal is simply a ray
pointing outwards from the surface of the <code class="language-plaintext highlighter-rouge">Shape</code> at the given point.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In Shape:</span>

<span class="c1">// Determine the surface normal of this Shape at a given intersection point.</span>
<span class="k">virtual</span> <span class="n">ray</span> <span class="n">normal</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">incident</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// ---✂--- In Sphere:</span>

<span class="c1">// Return the surface normal of this Sphere at a given intersection point.</span>
<span class="n">ray</span> <span class="n">normal</span><span class="p">(</span><span class="n">vf3d</span> <span class="n">incident</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">{</span> <span class="n">incident</span><span class="p">,</span> <span class="p">(</span><span class="n">incident</span> <span class="o">-</span> <span class="n">origin</span><span class="p">).</span><span class="n">normalize</span><span class="p">()</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next, let’s enhance our <code class="language-plaintext highlighter-rouge">SampleRay</code> method by adding a parameter for how many “bounces” are allowed - as this method is
called recursively we’ll decrement this value, at at the point where bounces is zero we’ll stop processing more
reflections. We’ll pass the initial bounces constant into the <code class="language-plaintext highlighter-rouge">SampleRay</code> method from the <code class="language-plaintext highlighter-rouge">Sample</code> method.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In Sample():</span>

<span class="c1">// Sample this ray - if the ray doesn't hit anything, use the color of</span>
<span class="c1">// the surrounding fog.</span>
<span class="k">return</span> <span class="nf">SampleRay</span><span class="p">(</span><span class="n">sample_ray</span><span class="p">.</span><span class="n">normalize</span><span class="p">(),</span> <span class="n">BOUNCES</span><span class="p">).</span><span class="n">value_or</span><span class="p">(</span><span class="n">FOG</span><span class="p">);</span>

<span class="c1">// ---✂--- In SampleRay():</span>

<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="o">&gt;</span> <span class="n">SampleRay</span><span class="p">(</span><span class="n">ray</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bounces</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
	<span class="n">bounces</span><span class="o">--</span><span class="p">;</span>
</code></pre></div></div>

<p>Once we’ve
sampled our <code class="language-plaintext highlighter-rouge">Shape</code> and determined its intrinsic color, we need to created a reflected ray and sample that to determine
the color that would be reflected by this <code class="language-plaintext highlighter-rouge">Shape</code> - we can skip this process if the reflectivity is zero or if we’ve
reached the max depth. Creating a reflected ray is a simple geometric function between the direction of the original
<code class="language-plaintext highlighter-rouge">sample_ray</code> and the <code class="language-plaintext highlighter-rouge">Shape</code>’s normal at the intersection point. Finally, we sample this new ray (passing in the new,
decremented bounces count). We’ll mix our <code class="language-plaintext highlighter-rouge">final_color</code> between the intrinsic color of this <code class="language-plaintext highlighter-rouge">Shape</code> itself and the color
we sampled along the reflected ray (or, if it didn’t hit anything, our Fog color).</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Set our color to the sampled color of the Shape this ray with.</span>
<span class="n">final_color</span> <span class="o">=</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>

<span class="c1">// Determine the point at which our ray intersects our Shape.</span>
<span class="n">vf3d</span> <span class="n">intersection_point</span> <span class="o">=</span> <span class="p">(</span><span class="n">r</span> <span class="o">*</span> <span class="n">intersection_distance</span><span class="p">).</span><span class="n">end</span><span class="p">();</span>
<span class="c1">// Calculate the normal of the given Shape at that point.</span>
<span class="n">ray</span> <span class="n">normal</span> <span class="o">=</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">normal</span><span class="p">(</span><span class="n">intersection_point</span><span class="p">);</span>

<span class="c1">// Apply reflection</span>
<span class="k">if</span> <span class="p">(</span><span class="n">bounces</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">reflectivity</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Our reflection ray starts out as our normal...</span>
	<span class="n">ray</span> <span class="n">reflection</span> <span class="o">=</span> <span class="n">normal</span><span class="p">;</span>

	<span class="c1">// Apply a slight offset *along* the normal. This way our reflected ray will</span>
	<span class="c1">// start at some slight offset from the surface so that rounding errors don't</span>
	<span class="c1">// cause it to collide with the Shape it originated from!</span>
	<span class="n">reflection</span><span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="n">reflection</span><span class="p">.</span><span class="n">origin</span> <span class="o">+</span> <span class="p">(</span><span class="n">normal</span><span class="p">.</span><span class="n">direction</span> <span class="o">+</span> <span class="mf">0.001</span><span class="n">f</span><span class="p">);</span>

	<span class="c1">// Reflect the direction around the normal with some simple geometry.</span>
	<span class="n">reflection</span><span class="p">.</span><span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">normal</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="p">((</span><span class="n">r</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">normal</span><span class="p">.</span><span class="n">direction</span><span class="p">))</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">direction</span><span class="p">).</span><span class="n">normalize</span><span class="p">();</span>

	<span class="c1">// Recursion! Since SampleRay doesn't care if the ray is coming from the</span>
	<span class="c1">// canvas, we can use it to get the color that will be reflected by this Shape!</span>
	<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">olc</span><span class="o">::</span><span class="n">Pixel</span><span class="o">&gt;</span> <span class="n">reflected_color</span> <span class="o">=</span> <span class="n">SampleRay</span><span class="p">(</span><span class="n">reflection</span><span class="p">,</span> <span class="n">bounces</span><span class="p">);</span>

	<span class="c1">// Finally, mix our Shape's color with the reflected color (or Fog color, in case</span>
	<span class="c1">// of a miss) according to the reflectivity.</span>
	<span class="n">final_color</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">final_color</span><span class="p">,</span> <span class="n">reflected_color</span><span class="p">.</span><span class="n">value_or</span><span class="p">(</span><span class="n">FOG</span><span class="p">),</span> <span class="n">intersected_shape</span><span class="p">.</span><span class="n">reflectivity</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="note note-wide">
  <div class="note-title">Note</div>

  <p>Running our project at this point produces a beautifully rendered scene where the center and left <code class="language-plaintext highlighter-rouge">Sphere</code>s reflect
their surroundings - and a sharp eye can determine that the left <code class="language-plaintext highlighter-rouge">Sphere</code> can even see itself in its reflection of the
center <code class="language-plaintext highlighter-rouge">Sphere</code>.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-10-Add%20reflections.png" alt="Reflections" title="Reflections" onclick="document.getElementById('208-reflections').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="208-reflections" onclick="document.getElementById('208-reflections').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/10-Add%20reflections.png" alt="Reflections" title="Reflections" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-09-Add%20a%20Plane%20Shape,%20and%20apply%20Fog.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-10-Add%20reflections.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<p>To further highlight the reflections we’ll add some simple motion to the scene by accumulating time in the
<code class="language-plaintext highlighter-rouge">OnUserUpdate</code> function, and modifying the Y and Z coordinates of the center <code class="language-plaintext highlighter-rouge">Sphere</code> along a sine/cosine wave
respectively.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Called once per frame</span>

<span class="c1">// Create some static storage to accumulate elapsed time...</span>
<span class="k">static</span> <span class="kt">float</span> <span class="n">accumulated_time</span> <span class="o">=</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">;</span>

<span class="c1">// ...and accumulate elapsed time into it.</span>
<span class="n">accumulated_time</span> <span class="o">+=</span> <span class="n">fElapsedTime</span><span class="p">;</span>

<span class="c1">// Update the position of our first Circle every update.</span>
<span class="c1">// sin/cos = easy, cheap motion.</span>
<span class="n">Shape</span><span class="o">&amp;</span> <span class="n">shape</span> <span class="o">=</span> <span class="o">*</span><span class="n">shapes</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="n">shape</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">sinf</span><span class="p">(</span><span class="n">accumulated_time</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">shape</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">cosf</span><span class="p">(</span><span class="n">accumulated_time</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// Iterate over the rows and columns of the scene</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now will display a smoothly floating <code class="language-plaintext highlighter-rouge">Sphere</code>, with appropriate reflections of its surrounding
<code class="language-plaintext highlighter-rouge">Shapes</code>.</p>

</div>

<h3 id="create-and-use-a-color3-type">Create and use a <code class="language-plaintext highlighter-rouge">color3</code> type</h3>

<p>To simplify some upcoming features, let’s replace our use of <code class="language-plaintext highlighter-rouge">olc::Pixel</code> with our own color type. Since we’re used to
representing color as the combination of three values - red, green, and blue - we can represent each with a floating
point value between 0 and 1.</p>

<p>Looking at our code, we already have a type to represent three floating point values: <code class="language-plaintext highlighter-rouge">vf3d</code>. Using a simple <code class="language-plaintext highlighter-rouge">using</code>
alias, we can create a type alias called <code class="language-plaintext highlighter-rouge">color3</code> that is really a <code class="language-plaintext highlighter-rouge">vf3d</code> behind the scenes. This aliasing isn’t really
necessary, but it will help avoid confusion. Additionally, we can leverage the <code class="language-plaintext highlighter-rouge">olc::PixelF</code> type to convert our
floating point color to one compatible with PixelGameEngine.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Use a type alias to use vf3d and color3 interchangeably.</span>
<span class="k">using</span> <span class="n">color3</span> <span class="o">=</span> <span class="n">vf3d</span><span class="p">;</span>

<span class="c1">// ---✂---</span>

<span class="c1">// Colors</span>

<span class="n">color3</span> <span class="nf">LIGHT_GRAY</span><span class="p">(</span><span class="mf">0.8</span><span class="n">f</span><span class="p">);</span>
<span class="n">color3</span> <span class="nf">DARK_GRAY</span><span class="p">(</span><span class="mf">0.5</span><span class="n">f</span><span class="p">);</span>
<span class="n">color3</span> <span class="nf">GREY</span><span class="p">(</span><span class="mf">0.75</span><span class="n">f</span><span class="p">);</span>
<span class="n">color3</span> <span class="nf">RED</span><span class="p">(</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
<span class="n">color3</span> <span class="nf">GREEN</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>

<span class="c1">// ---✂---</span>

<span class="n">color3</span> <span class="n">FOG</span> <span class="o">=</span> <span class="n">DARK_GRAY</span><span class="p">;</span>

<span class="c1">// ---✂---</span>

<span class="n">Draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">PixelF</span><span class="p">(</span><span class="n">color</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">z</span><span class="p">));</span>
</code></pre></div></div>

<p>You’ll need to update references to <code class="language-plaintext highlighter-rouge">olc::Pixel</code> throughout the code to use <code class="language-plaintext highlighter-rouge">color3</code> instead. For example in our <code class="language-plaintext highlighter-rouge">lerp</code>
function:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // Apply a linear interpolation between two colors:
 //  from |-------------------------------| to
 //                ^ by
<span class="gd">-olc::Pixel lerp(olc::Pixel from, olc::Pixel to, float by) const {
</span><span class="gi">+color3 lerp(color3 from, color3 to, float by) const {
</span> 	if (by &lt;= 0.0f) return from;
 	if (by &gt;= 1.0f) return to;
<span class="gd">-	return olc::Pixel(
-		from.r * (1 - by) + to.r * by,
-		from.g * (1 - by) + to.g * by,
-		from.b * (1 - by) + to.b * by
</span><span class="gi">+	return color3(
+		from.x * (1 - by) + to.x * by,
+		from.y * (1 - by) + to.y * by,
+		from.z * (1 - by) + to.z * by
</span> 	);
 }
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now produces no difference from our previous commit.</p>

</div>

<h3 id="add-diffuse-lighting">Add diffuse lighting</h3>

<p>Let’s add a single point light source to our scene. We’ll add a member to our game class to represent this. We’ll use a
class member instead of a constant so that we can change the position of the light later. We’ll initialize this value in
the constructor to be 500 units behind and 500 units above our origin.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // ---✂--- Add a class member to our OlPixelRayTracer:
<span class="err">
</span><span class="gi">+// The position of our point light.
+vf3d light_point;
</span><span class="err">
</span> // ---✂--- Update our game constructor:
<span class="err">
</span><span class="gd">-OlcPixelRayTracer() {
</span><span class="gi">+OlcPixelRayTracer() : light_point(0, -500, -500) {
</span></code></pre></div></div>

<p>Diffuse lighting is frighteningly simple - we already know that a dot product between two vectors returns a value that
roughly describes the similarity of the vectors. To implement simple diffuse lighting, we can multiply our sample color
by a dot product between the surface normal vector and a vector pointing towards our single light source.</p>

<p>Let’s add a section to our <code class="language-plaintext highlighter-rouge">SampleRay</code> function after we apply reflections where we’ll apply diffuse lighting. The
process only requires three lines of code! First we’ll create a normalized ray at the intersection point, pointing
towards the light point (we do this by subtracting the light point from the intersection point). Secondly, we’ll
calculate the dot product between our light ray and the surface normal we already have.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- After applying reflections, and before applying fog:</span>

<span class="c1">// Apply diffuse lighting</span>

<span class="c1">// First we'll get the normalized ray from our intersection point to the light source.</span>
<span class="n">ray</span> <span class="n">light_ray</span> <span class="o">=</span> <span class="n">ray</span><span class="p">(</span><span class="n">intersection_point</span><span class="p">,</span> <span class="n">light_point</span> <span class="o">-</span> <span class="n">intersection_point</span><span class="p">).</span><span class="n">normalize</span><span class="p">();</span>

<span class="c1">// Next we'll compute the dot product between our surface normal and the light ray.</span>
<span class="kt">float</span> <span class="n">dot</span> <span class="o">=</span> <span class="n">light_ray</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="n">normal</span><span class="p">.</span><span class="n">direction</span><span class="p">;</span>

<span class="c1">// Multiplying our final color by this dot product darkens surfaces pointing away from the light.</span>
<span class="n">final_color</span> <span class="o">=</span> <span class="n">final_color</span> <span class="o">*</span> <span class="n">dot</span><span class="p">;</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now will highlight a problem: the top halves of our <code class="language-plaintext highlighter-rouge">Shape</code>s look correct (towards the light), but
the bottoms have a corrupted look. You’ll remember that the dot product of two vectors lies in the range \([-1,1]\). As we
reach the side of our <code class="language-plaintext highlighter-rouge">Shape</code>s pointing away from the light, our dot product enters the negative range - and “negative”
colors are certainly a concept our data types are unprepared to handle! To fix this let’s clamp the dot product value to
the range \([0,1]\) - this way all negative values are discarded.</p>

  <p><em>Coming soon: a screenshot.</em>
<!-- TODO: ![Negative colors.]() --></p>

</div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // Next we'll compute the dot product between our surface normal and the light ray.
<span class="gi">+// We need to clamp this between 0 and 1, because negative values have no meaning here.
</span><span class="gd">-float dot = light_ray.direction * normal.direction;
</span><span class="gi">+float dot = std::clamp(light_ray.direction * normal.direction, 0.0f, 1.0f);
</span></code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now looks correct! The tops of our <code class="language-plaintext highlighter-rouge">Shape</code>s are light, while the bottoms are almost pitch black.
<strong>However</strong>, since darkness isn’t terribly interesting, let’s add a global ambient light, which we’ll implement as a new
constant.</p>

  <p><em>Coming soon: a screenshot.</em>
<!-- TODO: ![Too dark.]() --></p>

</div>

<p>By adding our global light value to the dot product we’ll ensure that our diffuse lighting never completely
darkens our scene.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // ---✂--- Add a new constant:
<span class="err">
</span><span class="gi">+// Lighting
+constexpr float AMBIENT_LIGHT = 0.5f;
</span><span class="err">
</span> // ---✂--- Update our diffuse lighting:
<span class="err">
</span> // Next we'll compute the dot product between our surface normal and the light ray.
 // We need to clamp this between 0 and 1, because negative values have no meaning here.
<span class="gi">+// Additionally, we'll add in our ambient light so no surfaces are entirely dark.
</span><span class="gd">-float dot = std::clamp(light_ray.direction * normal.direction, 0.0f, 1.0f);
</span><span class="gi">+float dot = std::clamp(AMBIENT_LIGHT + (light_ray.direction * normal.direction), 0.0f, 1.0f);
</span></code></pre></div></div>

<div class="note note-wide">
  <div class="note-title">Note</div>

  <p>Running our project now displays simple diffuse lighting without darkening any parts of our scene entirely.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-12-Add%20diffuse%20lighting.png" alt="Diffuse Lighting" title="Diffuse Lighting" onclick="document.getElementById('90-diffuse-lighting').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="90-diffuse-lighting" onclick="document.getElementById('90-diffuse-lighting').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/12-Add%20diffuse%20lighting.png" alt="Diffuse Lighting" title="Diffuse Lighting" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-10-Add%20reflections.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-12-Add%20diffuse%20lighting.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<h3 id="add-shadow-casting">Add shadow casting</h3>

<p>Let’s upgrade our lighting mechanic with proper shadows. The theory is simple: we check if any <code class="language-plaintext highlighter-rouge">Shape</code>s intersect with
the ray between a <code class="language-plaintext highlighter-rouge">Shape</code>’s surface and the light itself. If any <code class="language-plaintext highlighter-rouge">Shape</code>s do intersect, then the light is fully occluded
and we can set the lighting to full-dark (rather than the diffuse value we calculated last time). If there are no
intersecting <code class="language-plaintext highlighter-rouge">Shape</code>s, then we use the dot product as we did last time.</p>

<p>To start, instead of normalizing our lighting ray immediately, we’ll want to save its length - this lets us know how far
away the light is from the current hit point. To do this we’ll add a short method to <code class="language-plaintext highlighter-rouge">vf3d</code> to calculate its length.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Return the length of this vf3d.</span>
<span class="k">const</span> <span class="kt">float</span> <span class="nf">length</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span> <span class="o">*</span> <span class="n">z</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next, to avoid the lighting ray intersecting with the current object itself we’ll offset the light ray origin by a tiny
amount along the surface normal. Finally, we’ll normalize the light ray’s direction.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- In SampleRay(), replace our current diffuse lighting with the following:</span>

<span class="c1">// Apply lighting</span>

<span class="c1">// First we'll get the un-normalized ray from our intersection point to the light source.</span>
<span class="n">ray</span> <span class="n">light_ray</span> <span class="o">=</span> <span class="n">ray</span><span class="p">(</span><span class="n">intersection_point</span><span class="p">,</span> <span class="n">light_point</span> <span class="o">-</span> <span class="n">intersection_point</span><span class="p">);</span>
<span class="c1">// Get the distance to the light (equal to the length of the un-normalized ray).</span>
<span class="kt">float</span> <span class="n">light_distance</span> <span class="o">=</span> <span class="n">light_ray</span><span class="p">.</span><span class="n">direction</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="c1">// We'll also offset the origin of the light ray by a small amount along the</span>
<span class="c1">// surface normal so the ray doesn't intersect with this Shape itself.</span>
<span class="n">light_ray</span><span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="n">light_ray</span><span class="p">.</span><span class="n">origin</span> <span class="o">+</span> <span class="p">(</span><span class="n">normal</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="mf">0.001</span><span class="n">f</span><span class="p">);</span>
<span class="c1">// And finally we'll normalize the light_ray.</span>
<span class="n">light_ray</span><span class="p">.</span><span class="n">direction</span> <span class="o">=</span> <span class="n">light_ray</span><span class="p">.</span><span class="n">direction</span><span class="p">.</span><span class="n">normalize</span><span class="p">();</span>
</code></pre></div></div>

<p>To determine if any <code class="language-plaintext highlighter-rouge">Shape</code>s intersect with this ray, we’ll use a simplified version of our search loop from before -
however this time we don’t care which <code class="language-plaintext highlighter-rouge">Shape</code> is intersecting, just whether one has. Additionally, we don’t care about
<code class="language-plaintext highlighter-rouge">Shape</code>s that intersect with the ray that are further from the origin than the light itself (meaning that <code class="language-plaintext highlighter-rouge">Shape</code> is on
the far side of the light), so we’ll initialize our search distance to the distance to the light itself.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Then we'll search for any Shapes that is occluding the light_ray,</span>
<span class="c1">// using more or less our existing search code.</span>
<span class="c1">// We initialize closest_distance to our light distance, because we</span>
<span class="c1">// don't care if any of the Shapes intersect the ray beyond the light.</span>
<span class="kt">float</span> <span class="n">closest_distance</span> <span class="o">=</span> <span class="n">light_distance</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">shape</span> <span class="o">:</span> <span class="n">shapes</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="kt">float</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">shape</span><span class="o">-&gt;</span><span class="n">intersection</span><span class="p">(</span><span class="n">light_ray</span><span class="p">).</span><span class="n">value_or</span><span class="p">(</span><span class="n">INFINITY</span><span class="p">);</span> <span class="n">distance</span> <span class="o">&lt;</span> <span class="n">closest_distance</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">closest_distance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, if the final search distance is less than the distance to the light itself then we have a <code class="language-plaintext highlighter-rouge">Shape</code> occluding the
ray! In this case we can skip the dot-product diffuse calculation and just multiply the color by our ambient light.
Otherwise we calculate the diffuse lighting as before.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Check if we had an intersection (the light is occluded).</span>
<span class="k">if</span> <span class="p">(</span><span class="n">closest_distance</span> <span class="o">&lt;</span> <span class="n">light_distance</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Multiplying our final color by the ambient light darkens this surface "entirely".</span>
	<span class="n">final_color</span> <span class="o">=</span> <span class="n">final_color</span> <span class="o">*</span> <span class="n">AMBIENT_LIGHT</span><span class="p">;</span>
<span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
	<span class="c1">// Next we'll compute the dot product between our surface normal and the light ray.</span>
	<span class="c1">// We need to clamp this between 0 and 1, because negative values have no meaning here.</span>
	<span class="c1">// Additionally, we'll add in our ambient light so no surfaces are entirely dark.</span>
	<span class="kt">float</span> <span class="n">dot</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clamp</span><span class="p">(</span><span class="n">AMBIENT_LIGHT</span> <span class="o">+</span> <span class="p">(</span><span class="n">light_ray</span><span class="p">.</span><span class="n">direction</span> <span class="o">*</span> <span class="n">normal</span><span class="p">.</span><span class="n">direction</span><span class="p">),</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">);</span>

	<span class="c1">// Multiplying our final color by this dot product darkens surfaces pointing away from the light.</span>
	<span class="n">final_color</span> <span class="o">=</span> <span class="n">final_color</span> <span class="o">*</span> <span class="n">dot</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="note note-wide">
  <div class="note-title">Note</div>

  <p>Running our project now will render shadows cast upon other <code class="language-plaintext highlighter-rouge">Shape</code>s in the scene that dynamically update as the
<code class="language-plaintext highlighter-rouge">Shape</code>s or light itself move.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-13-Add%20shadow%20casting.png" alt="Shadow Casting" title="Shadow Casting" onclick="document.getElementById('88-shadow-casting').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="88-shadow-casting" onclick="document.getElementById('88-shadow-casting').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/13-Add%20shadow%20casting.png" alt="Shadow Casting" title="Shadow Casting" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-12-Add%20diffuse%20lighting.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-13-Add%20shadow%20casting.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<h3 id="add-multisampling">Add multisampling</h3>

<p>One very noticeable shortcoming of our current renderer is the strong aliasing - since we always cast our ray towards
the exact center of every pixel, we don’t get any sort of antialiasing effect for pixels that are only partially covered
by a given <code class="language-plaintext highlighter-rouge">Shape</code> or feature such as shadows or reflections.</p>

<p>An easy antialiasing solution is to implement multisampling, which is the process of sending multiple rays into each
pixel and averaging the results. By varying the angle of each ray slightly we can average out aliasing error.</p>

<p>Let’s add a constant to define how many samples we’ll take for each pixel.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constexpr</span> <span class="kt">int</span> <span class="n">SAMPLES</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>

<p>Then, as we iterate over the rows and columns of our canvas, let’s instead create an array of colors the same size as
our number of samples, and for each index in this array we’ll generate a random offset in the X and Y dimensions, and
add that to our previous ray direction. Finally, we’ll use the standard library’s <code class="language-plaintext highlighter-rouge">accumulate</code> function to sum these
colors together, and then we’ll divide the resulting color by the number of samples, effectively averaging our array.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ---✂--- Include the numeric header:</span>

<span class="cp">#include</span> <span class="cpf">&lt;numeric&gt;</span><span class="cp">
</span>
<span class="c1">// ---✂--- Replace the current innermost loop contents in OnUserUpdate() with:</span>

<span class="c1">// Create an array of colors - we'll be sampling this pixel multiple</span>
<span class="c1">// times with varying offsets to create a multisample, and then</span>
<span class="c1">// rendering the average of these samples.</span>
<span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">color3</span><span class="p">,</span> <span class="n">SAMPLES</span><span class="o">&gt;</span> <span class="n">samples</span><span class="p">;</span>

<span class="c1">// For each sample...</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SAMPLES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Create random offset within this pixel</span>
	<span class="kt">float</span> <span class="n">offsetX</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">RAND_MAX</span><span class="p">;</span>
	<span class="kt">float</span> <span class="n">offsetY</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">RAND_MAX</span><span class="p">;</span>

	<span class="c1">// Sample the color at that offset (converting screen coordinates to</span>
	<span class="c1">// scene coordinates).</span>
	<span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Sample</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">HALF_WIDTH</span> <span class="o">+</span> <span class="n">offsetX</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">HALF_HEIGHT</span> <span class="o">+</span> <span class="n">offsetY</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Calculate the average color and draw it.</span>
<span class="n">color3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">samples</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">samples</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">color3</span><span class="p">())</span> <span class="o">/</span> <span class="n">SAMPLES</span><span class="p">;</span>
<span class="n">Draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">olc</span><span class="o">::</span><span class="n">PixelF</span><span class="p">(</span><span class="n">color</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">z</span><span class="p">));</span>
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now will display a multisampled scene. <strong>However</strong>, note that since we calculate our sample
offsets randomly the edges of different features will flicker frame to frame as the average is recalculated.</p>

</div>

<p>To remedy this, we can increase the number of samples, though this increases the number of rays we need to calculate,
and so slows down our frame times. I’ve placed my constant defining the number of samples within the same preprocessor
if as my reflection count to help keep debug runs at an acceptable pace.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-constexpr int SAMPLES = 3;
</span><span class="err">
</span> #ifdef DEBUG
 constexpr int BOUNCES = 2;
<span class="gi">+constexpr int SAMPLES = 2;
</span> #else
 constexpr int BOUNCES = 5;
<span class="gi">+constexpr int SAMPLES = 4;
</span> #endif
</code></pre></div></div>

<div class="note">
  <div class="note-title">Note</div>

  <p>Running our project now will display a properly multisampled scene. The multisampling will be more stable when running
in Release mode.</p>

  <div class="popunder">
	
		<img class="pop" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-14-Add%20multisampling.png" alt="Multisampling" title="Multisampling" onclick="document.getElementById('210-multisampling').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="210-multisampling" onclick="document.getElementById('210-multisampling').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/2022-03-23-raytracing/14-Add%20multisampling.png" alt="Multisampling" title="Multisampling" loading="lazy" />
</dialog>

  <details>
<summary>Open Image Comparison</summary>
<figure class="compare">
	<div>
		<p class="c-compare" style="width: 471px; height: 500px">
			<img class="c-compare__left" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-13-Add%20shadow%20casting.png" alt="" width="471px" loading="lazy" />
			<img class="c-compare__right" src="https://sidneys1.github.io/images/2022-03-23-raytracing/thumbs/th-14-Add%20multisampling.png" alt="" width="471px" loading="lazy" />
			<input type="range" class="c-rng c-compare__range" min="0" max="100" value="50" oninput="this.parentNode.style.setProperty(&#x27;--value&#x27;, &#x60;${this.value}%&#x60;)" />
		</p>
		<figcaption>
			<span class="slight">Drag splitter to compare.</span>
			
		</figcaption>
	</div>
</figure>

</details>

</div>

<h2 id="all-done">All Done!</h2>

<p>Check out the <a href="https://github.com/Sidneys1/OlcPixelRayTracer">GitHub repo</a> to see the complete project.</p>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="raytracing" /><summary type="html"><![CDATA[Since I started programming I’ve had a dream in the back of my mind: raytracers are super cool, and I’d like to build one myself. But with that dream accompanied another thought: raytracers are nearly a pure expression of math, a discipline I am poorly qualified for. However this winter I discovered a new programming community, OneLoneCoder, and its leader, javidx9. Watching the videos produced by javidx9 inspired me to take a leap of faith in myself and start this raytracing project. The result has been amazing to see unfold as I developed first a working prototype in C#, then in C++, and finally as I produced what hopefully is an easy to follow “tutorial” style Git repository. So, lets dive in!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/2022-03-23-raytracing/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/2022-03-23-raytracing/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>