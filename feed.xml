<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://sidneys1.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sidneys1.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sidneys1.github.io/" rel="alternate" type="text/html" /><updated>2025-01-21T09:49:49-05:00</updated><id>https://sidneys1.github.io/feed.xml</id><title type="html">Sidneys1.com on GitHub Pages</title><subtitle>A home for all my ramblings on subjects such as programming, cybersecurity, photography, videography, video games, and whatever else I see fit.</subtitle><author><name>Sidneys1</name><email>admin@sidneys1.com</email></author><entry><title type="html">I Had To Slay the Princess</title><link href="https://sidneys1.github.io/reviews/2025/01/08/slay-the-princess.html" rel="alternate" type="text/html" title="I Had To Slay the Princess" /><published>2025-01-08T00:00:00-05:00</published><updated>2025-01-08T00:00:00-05:00</updated><id>https://sidneys1.github.io/reviews/2025/01/08/slay-the-princess</id><content type="html" xml:base="https://sidneys1.github.io/reviews/2025/01/08/slay-the-princess.html"><![CDATA[<cite>Slay the Princess</cite> is a breathtaking visual novel that explores obedience, rebellion, heartbreak, love, and
everything in between. Emotional voice acting, unreliable narrators, and multiple player "personalities" set this game
apart.

<!--more-->

## Editorial

*This section explores the first twenty minutes or so of the game, highlighting various <span>praises</span>{:.praise}
and <span>critiques</span>{:.critique} I noted therein. If you wish, you can skip ahead to the
[Â§Critical Analysis](#critical-analysis).*{: .slight}

> You're on a path in the woods. And at the end of that path is a cabin. And in the basement of that cabin is a
> princess. **You're here to slay her.** If you don't, **it will be the end of the world**.
> <cite>The Narrator</cite>

Chilling words form the bare-bones opening scene of
[<cite>Slay the Princess</cite>](https://www.slaytheprincess.com/){: target="_blank"}. You're given the opportunity to
ask a few clarifying questions, but *The Narrator* provides little insight. This lack of clarity makes the grim mission
somehow clearer: we have one job to do. If we're to take *The Narrator* at his word, the stakes are high, and we must
grit our teeth and continue on. Narrators are to be trusted... aren't they? They are oracles of omniscient fact, what he
says must be true.

> We're not going to go through with this, right? She's a princess. We're supposed to save princesses, not slay them.
> <cite>Voice of the Hero</cite>

A second voice, suggestively named *Voice of the Hero*, picks up a dialog with *The Narrator*. Is this who *we* are? The
game does not make it clear, though there's clearly no one else present. I chose to believe that this voice is
essentially a voice of our subconscious; <span class="praise" title="Praise">a way for the game to put words in the
player's mouth without stepping on toes</span>. Soon more voices than just the *Voice of the Hero* will chime in, but
I'm getting ahead of myself.

If we are *The Hero*, we make a good point... <big>Heroes don't slay princesses, they save them.</big>

> A word of warning before you continue. She will lie, she will cheat, and she will do everything in her power to stop
> you from slaying her. Don't believe a word she says.
> <cite>The Narrator</cite>

At this point I'm getting a bit nervous -- who's to say that *The Princess* really is evil? Or perhaps she's not *evil*,
but truly innocent, a pawn in someone else's scheme to end the world, a victim in some vile plot to control me, the
player... the Hero? We are faced with only two sources of information from which to try and separate fact from fiction:
*The Narrator*, whose motives are unknown; and the as of yet unmet *Princess*, who may not have any more context than we
do. The only real choice is to continue on and try to make the choice for ourselves.

Continuing into the cabin we're presented with another choice: there is a dagger on the table, ahead of the stairs
leading to *The Princess*. Taking the dagger feels like a step in the direction of *The Narrator*'s goals -- but leaving
it may prove unwise as well. Hovering the mouse cursor over the dagger, I notice something I hadn't before: <span
class="praise" title="Praise">the cursor is a dark, clawed hand, almost reminiscent of a bird's claw. What sort of hero
are we? Are we in fact some monster, typecast into a role as a murderer of princesses? Here again the game pushes subtle
burden onto us</span>. Or am I falling into a trap built of my own prejudices, that a non-human in a fantasy story must
be evil?

Entering the basement reveals a dark wooden staircase, as *The Narrator* proceeds to wax long about the conditions of
this environment, claiming that <q>slaying her is probably doing her a favor</q>; *The Narrator* is ever so subtly
baiting me towards the path of slaying *The Princess*. My continuing instinct is to resist this coercion.

> Who's there?
> <cite>The Princess</cite>

Her voice is confident, yet guarded. <span class="praise" title="Praise">The voice acting is tremendously well done, and
I highly recommend listening through some quality headphones to pick up the subtlest of emotions measured carefully into
each and every line</span>. As we continue down the stairs we see her for the first time. A smallish woman, slight of
frame and with long, straight hear, wearing a simple yet refined dress and a tiara. She's shackled by one wrist to the
wall as she sits on the floor beneath a barred window. The *Voice of the Hero* chimes in to describe her as "coldly
beautiful". As she continues to speak, her voice is confident and unafraid.

> And there you are. Are you here to kill me or something?
> <cite>The Princess</cite>

I'd lie if I said I wasn't taken aback by this. She's *expecting us*, and she's *not afraid*. Not even nervous; in fact
she seems almost... nonchalant? This scenario is perhaps even more complex than I had anticipated. And then she *baits
you into coming closer...*

---
{: .short-rule }

*Caution: spoilers ahead.*
{: style="text-align:center;" .slight}

---
{: .short-rule }

<cite>Slay the Princess</cite> is a tremendously beautiful game. Regardless of how the first chapter ends, the game
continues. If we die, we reappear at the beginning, though with a new chapter title. *The Narrator* seems to not know --
or at least, not acknowledge -- that the game has reset. The game does save you some time by removing or disabling
narrative choices that you've made before, which was appreciated. As we continue to the princess a second time, new
voices appear in congress with *The Narrator* and the *Voice of the Hero*; they seem to represent further aspects of our
subconscious, amplified and expressed through the choices we made in the previous chapter. As for *The Princess*, we can
see that she's *changed* as well -- how so depends on your choices in the first chapter, but she's become a *more*
intense version of herself towards whatever emotion you evoked from her before, and it's even altered her physical
appearance and that of the cabin and dungeon.

In fact, as we continue it becomes apparent that the goal of the game is to "collect" as many different aspects of her
personality together as we can, often greatly at our own expense. <span class="praise" title="Praise">*The Princess* is
a complex and nuanced character, and evoking these different emotions from her was a beautiful exploration of the human
psyche</span>. You continue this pattern for some time, and while I won't fully spoil the ending of the game in this
editorial, I will say that the ending**s** -- for there are more than one -- are very complex and nuanced, and I still
don't fully understand everything that this game was trying to say.

<big>But I do know that it was beautiful.</big>
{: style="text-align:center;" }

## Critical Analysis

*Caution: major spoilers ahead.*{: style="text-align:center;" .slight}

### Plot

The plot of <cite>Slay the Princess</cite> seems simple enough at first: you are given a task and expected to complete
it. But as the game continues it becomes apparent that things are not as simple as they seem. As each series of chapters
draws to a close, some aspect of *The Princess*'s personality is amplified, distilled almost, and then snatched away by
a multitude of hands emerging from the ether. The player is then dropped into an endless void in which we find *The
Shifting Mound*, an almost gaia like entity that seems to be the amalgamation of all the versions of *The Princess*.
It's lost and naive, but it does know that it needs to find more versions of *The Princess*, and that we can find them
for it.

So we continue this pattern for a while, and slowly we come to understand that we are in some way like *The Shifting
Mound*, timeless and detached from these realities, a yin to her yang, almost. Where we came from or how we got into
this situation is still unclear, but as there isn't much else to do we continue collecting princesses. Eventually we
find that *The Narrator* is responsible for our existence, having summoned us into being in order to cleanse death from
the world. We were a mighty god-like being, it seems, and *The Narrator* split us into two parts: *The Shifting Mound*
(*The Princess*), and *The Long Quiet* (us, the player). The choice of a princess and a hero was chosen by our
subconscious and wasn't anticipated by *The Narrator*, but we had to be *something*. *The Narrator*'s goal was
ultimately for us to destroy (slay) *The Shifting Mound* (the princess) and thus cut out the part of the deity we once
were that is responsible for death's existence in the world we preside over.

There are many many different incarnations of *The Princess* that we can collect, and several endings to the game, all
of which seem worthwhile to find. In fact, the game unlocks a "gallery" after the first playthrough showing you which
branching narrative paths you've taken, and which you've yet to discover through subsequent playthroughs. In the end, it
seems *The Narrator* was more or less forthcoming at the beginning: his intention was for us to Slay the Princess, and
if we failed, the world would end.

### Gameplay

<cite>Slay the Princess</cite> features simple gameplay comprised of artwork of the current scene with a subtle parallax
effect, subtitles, and, when relevant, narrative choices for the player to take. The entire setup is extremely simple
yet effective for deep storytelling such as this.

### Graphics & Art

The artwork of <cite>Slay the Princess</cite> may be comprised of simple pen drawings, but the care put in to facial
expressions and environmental detail is stunning; truly the result of passionate effort on the part of the artists.]]></content><author><name>Sidneys1</name></author><category term="reviews" /><category term="video-games" /><summary type="html"><![CDATA[Slay the Princess is a breathtaking visual novel that explores obedience, rebellion, heartbreak, love, and everything in between. Emotional voice acting, unreliable narrators, and multiple player âpersonalitiesâ set this game apart.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/slay-the-princess/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/slay-the-princess/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HTML5 Canvas Tips</title><link href="https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips.html" rel="alternate" type="text/html" title="HTML5 Canvas Tips" /><published>2024-12-02T00:00:00-05:00</published><updated>2024-12-02T00:00:00-05:00</updated><id>https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips</id><content type="html" xml:base="https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips.html"><![CDATA[The `<canvas>` element may be the best thing to happen to HTML since `<marquee>`. I've been
[using][merlin]{:target="_blank"} it [a lot][raina]{:target="_blank"} for [various projects][dcts]{:target="_blank"}
recently and thought it'd be nice to collect some of the tips and tricks I've learned into once place.

[merlin]: https://github.com/Sidneys1/Merlin
[raina]: https://github.com/Sidneys1/Raina
[dcts]: https://infosec.exchange/@Sidneys1/113562091539216937

<!--more-->

<style>
canvas {
	align-self: center;
	justify-self: center;
	margin-bottom: 15px;
}
canvas:not(.no-shadow) {
	box-shadow: 0 0 10px rgba(0,0,0,0.2);
}
.highlight-4 {
	text-shadow: 0 0 3px #00000080;
}

.grid-2 {
	display: grid;
	grid-template-columns: 1fr auto;
	gap: 1em;

	> div, > figure {
		align-self: center;
	}
}

.grid-3 {
	display: grid;
	grid-template-columns: 1fr auto auto;
	gap: 1em;

	> div, > figure {
		align-self: center;
	}
}

figcaption {
	font-weight: bold;
}

@media screen and (max-width: 1200px) {
	:is(.grid-2,.grid-2-even,.grid-3):not(.no-phone-layout) {
		display: block;
		> canvas, > figure > canvas {
			margin-left: auto;
			margin-right: auto;
			display: block;
		}
	}
}
</style>

## Pixel-Art Canvas

If you've used canvas at all you know that its `width="xxx"` and `height="xxx"` attributes define the dimensions of the
image the canvas represents, while you can use the `style="width: xxx; height: xxx;"` CSS properties to control the
size of the element on the page. If you're trying to create a pixelated-style game, you can use the CSS to scale up a
relatively small canvas:

<img id="favicon" src="{{ '/favicon.png' | absolute_url }}" style="display:none;" />
<div class="grid-2">
<div markdown="1">
```html
<canvas id="pixelated-canvas"
		width="50" height="50"></canvas>
```

```css
canvas { width: 300px; height: 300px; }
```

```js
const ctx = document.getElementById('pixelated-canvas').getContext('2d');
ctx.fillStyle = 'grey';
ctx.fillRect(0, 0, 50, 50);
ctx.strokeStyle = 'black';
ctx.rect(5, 5, 40, 40);
ctx.stroke();
ctx.drawImage(document.getElementById('favicon'), 13, 13, 24, 24);
```
</div>
	<canvas id="pixelated-canvas" width="50" height="50" style="width: 300px; height: 300px;"></canvas>
	<script>
		window.addEventListener('load', e => {
			const canvas = document.getElementById('pixelated-canvas');
			if (!(canvas instanceof HTMLCanvasElement)) throw `Expected 'canvas', got '${canvas?.constructor.name}'`;
			const ctx = canvas.getContext('2d');
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 50, 50);
			ctx.rect(5, 5, 40, 40);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.drawImage(document.getElementById('favicon'), 13, 13, 24, 24);
		});
	</script>
</div>

Well, isn't that ugly! Thankfully we can fix it with the `image-rendering: pixelated` CSS property. Also note while
we're here that the stroke seems to be two pixels wide, and semi-transparent. That's because the point coordinates fall
on the borders between pixels, and the line is being drawn as if it was halfway between them. To overcome this, we'll
need to offset the coordinates of the line by half a pixel. Maybe an illustration will help:

<div style="display: flex;flex-wrap:wrap;justify-content:center;">
	<img class="no-shadow" alt="An illustration of attempting to draw a line on a pixel grid." src="{{ '/images/html5-canvas-tips/grid-0-0.png' | absolute_url }}"/>
	<img class="no-shadow" alt="An illustration of attempting to draw a line on a pixel grid, offset by half a unit." src="{{ '/images/html5-canvas-tips/grid-05-05.png' | absolute_url }}"/>
</div>

So, let's apply these fixes:

<div class="grid-2">
	<div>
		<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">canvas</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span> <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
         <span class="highlight-4"><span class="nl">image-rendering</span><span class="p">:</span> <span class="n">pixelated</span><span class="p">;</span></span> <span class="p">}</span></code></pre></div>
		</div>
		<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">rect</span><span class="p">(</span><span class="mf">5<span class="highlight-4">.5</span></span><span class="p">,</span> <span class="mf">5<span class="highlight-4">.5</span></span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
<span class="c1">// ...</span></code></pre></div>
		</div>
	</div>
	<canvas id="pixelated-canvas-2" width="50" height="50" style="width: 300px; height: 300px; image-rendering: pixelated;"></canvas>
	<script>
		window.addEventListener('load', e => {
			const canvas = document.getElementById('pixelated-canvas-2');
			if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
			const ctx = canvas.getContext('2d');
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 50, 50);
			ctx.rect(5.5, 5.5, 40, 40);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.drawImage(document.getElementById('favicon'), 13, 13, 24, 24);
		});
	</script>
</div>

## HI-DPI Canvas

Because the canvas element has a specific size in pixels, it is not DPI-aware. That is, if your operating system or
browser zoom is set to anything other than 100%, the number of physical screen pixels that represent each CSS pixel may
not be in a 1-to-1 ratio.

<div class="grid-3">
<div markdown="1">

```js
// This is the current pixel ratio of device pixels to CSS pixels. For example,
// a value of `1.5` would indicate that for every CSS pixel, there are 1.5
// device pixels (a scaling ratio of 150%).
const ratio = window.devicePixelRatio || 1;
const canvas = document.getElementById('hidpi-canvas');
const ctx = canvas.getContext('2d');
ctx.fillStyle = 'grey';
ctx.fillRect(0, 0, 200, 200);
ctx.moveTo(50.5, 105.5);
ctx.lineTo(150.5, 105.5);
ctx.strokeStyle = 'black';
ctx.stroke();
ctx.font = '20pt serif';
ctx.fillStyle = 'black';
ctx.fillText(`Ratio: ${(ratio*100).toFixed(0)}%`, 30, 100);
```

</div>

<figure>
	<figcaption>Canvas</figcaption>
	<canvas id="hidpi-canvas" width="200" height="200"></canvas>
	<script>
	window.addEventListener('load', e => {
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('hidpi-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		const ctx = canvas.getContext('2d');
		ctx.fillStyle = 'grey';
		ctx.fillRect(0, 0, 200, 200);
		ctx.moveTo(50.5, 105.5);
		ctx.lineTo(150.5, 105.5);
		ctx.strokeStyle = 'black';
		ctx.stroke();
		ctx.font = '20pt serif';
		ctx.fillStyle = 'black';
		const text = `Ratio: ${(ratio*100).toFixed(0)}%`;
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 100);
	});
	</script>
</figure>

<figure>
	<figcaption>Zoomed 3x</figcaption>
	<img style="align-self: center; margin-bottom: 15px;" src="{{ '/images/html5-canvas-tips/bad-hi-dpi.png' | absolute_url }}">
</figure>
</div>

Note how the text is blurry, and the line below it is as well, despite using our half a pixel offset trick from
[the previous section](#pixel-art-canvas) (if your ratio is 100%, just consult the screenshot)? Let's make some tweaks
to the canvas to work around this:


<div class="grid-3">
	<div style="align-self: center;">
		<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">ratio</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">hidpi-canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="highlight-4"><span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">*=</span> <span class="nx">ratio</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">*=</span> <span class="nx">ratio</span><span class="p">;</span></span>
<span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>
<span class="highlight-4"><span class="nx">ctx</span><span class="p">.</span><span class="nf">scale</span><span class="p">(</span><span class="nx">ratio</span><span class="p">,</span> <span class="nx">ratio</span><span class="p">);</span></span>
<span class="c1">// ...</span></code></pre></div>
		</div>
	</div>
	<figure>
		<figcaption>Canvas</figcaption>
		<canvas id="hidpi-canvas-2" width="200" height="200"></canvas>
		<script>
		window.addEventListener('load', e => {
			const ratio = window.devicePixelRatio || 1;
			const canvas = document.getElementById('hidpi-canvas-2');
			if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
			canvas.style.width = `${canvas.width}px`;
			canvas.style.height = `${canvas.height}px`;
			canvas.width *= ratio;
			canvas.height *= ratio;
			const ctx = canvas.getContext('2d');
			ctx.scale(ratio, ratio);
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 200, 200);
			ctx.moveTo(50.5, 105.5);
			ctx.lineTo(150.5, 105.5);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.font = '20pt serif';
			ctx.fillStyle = 'black';
			const text = `Ratio: ${(ratio*100).toFixed(0)}%`;
			const size = ctx.measureText(text);
			ctx.fillText(text, 100-(size.width / 2), 100);
		});
		</script>
	</figure>
	<figure>
		<figcaption>Zoomed 3x</figcaption>
		<img style="align-self: center; margin-bottom: 15px;" src="{{ '/images/html5-canvas-tips/good-hi-dpi.png' | absolute_url }}">
	</figure>
</div>

Note that in the case of my screenshots, the device scaling is 150%, which means for every CSS pixel there are 1.5
device pixels. That means that no matter how much scaling fanciness we do, our 1px line will never perfectly align to
the screen's pixel grid.

This graphic depicts a 150% scaling ratio between the device pixels (the white and gray grid) and CSS pixels (the black
dotted lines). The red outlines show where a line would be drawn, aligned to the CSS pixel grid. The green pixels show
the effective rasterization of the red area to the physical pixel grid.

![An example of fractional scaling causing misalignment between CSS and physical pixels.]({{ '/images/html5-canvas-tips/fractional-scaling.png' | absolute_url }}){:.no-shadow}

## ClearType Font Smoothing

Riding off our last example, let's make the text rendering *even smoother*. If the browser knows that canvas text will
be rendered against a set color, it will use [subpixel rendering][sr]{:target="_blank"} (aka ClearType). To do this, we
need to use an opaque canvas, created by passing some options to the canvas' `getContext` function.

[sr]: https://en.wikipedia.org/wiki/Subpixel_rendering

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">cleartype-canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">,</span> <span class="highlight-4"><span class="p">{</span><span class="na">alpha</span><span class="p">:</span> <span class="kc">false</span><span class="p">}</span></span><span class="p">);</span>
</code></pre></div></div>

<div class="grid-2 no-phone-layout" style="gap:0;">

<!-- <div style="grid-column: 3; font-weight: bold;text-align: center;">Zoomed 4x</div> -->

<!-- <div style="align-self: center; font-style:italic; justify-self: end;">Browser-rendered text:</div> -->

<figure>
	<figcaption>Browser-Rendered Text</figcaption>
	<div id="hello-world" style="align-self: center; text-align: center;color: grey;">Hello, World!</div>
</figure>

<figure>
	<img style="align-self: center; margin-bottom: 15px;" src="{{ '/images/html5-canvas-tips/browser-text.png' | absolute_url }}">
</figure>

<figure>
	<figcaption>Default Canvas-Rendered Text, With HI-DPI Fix</figcaption>
	<canvas id="no-cleartype-canvas" class="no-shadow" width="200" height="24" style="margin: 0 auto;display:block;"></canvas>
	<script>
	window.addEventListener('load', e => {
		const helloWorld = document.getElementById('hello-world');
		if (!(helloWorld instanceof HTMLDivElement)) throw 'Expected div!';
		const font = window.getComputedStyle(helloWorld).font;
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('no-cleartype-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		canvas.style.width = `${canvas.width}px`;
		canvas.style.height = `${canvas.height}px`;
		canvas.width *= ratio;
		canvas.height *= ratio;
		const ctx = canvas.getContext('2d');
		ctx.scale(ratio, ratio);
		ctx.font = font;
		ctx.fillStyle = 'grey';
		const text = 'Hello, World!';
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 24-size.fontBoundingBoxDescent);
	});
	</script>
</figure>
<img style="align-self: center; margin-bottom: 15px;" src="{{ '/images/html5-canvas-tips/bad-canvas-text.png' | absolute_url }}">

<figure>
	<figcaption>Opaque Canvas-Rendered Text, With HI-DPI and ClearType Fix</figcaption>
	<canvas id="cleartype-canvas" class="no-shadow" width="200" height="24" style="margin:0 auto;display:block;"></canvas>
	<script>
	function getBgColor(element) {
		if (element === undefined) throw "Reached end of tree...";
		const bg = window.getComputedStyle(element).background;
		if (bg === 'none') return getBgColor(element.parentElement);
		return [bg, element];
	}
	function redraw(ctx, bg) {
		const helloWorld = document.getElementById('hello-world');
		if (!(helloWorld instanceof HTMLDivElement)) throw 'Expected div!';
		const font = window.getComputedStyle(helloWorld).font;
		ctx.fillStyle = bg;
		ctx.fillRect(0, 0, 200, 50);
		ctx.font = font;
		ctx.fillStyle = 'grey';
		const text = 'Hello, World!';
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 24-size.fontBoundingBoxDescent);
	}
	window.addEventListener('load', e => {
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('cleartype-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		canvas.style.width = `${canvas.width}px`;
		canvas.style.height = `${canvas.height}px`;
		canvas.width *= ratio;
		canvas.height *= ratio;
		const ctx = canvas.getContext('2d', {alpha: false});
		ctx.scale(ratio, ratio);
		const [bg, element] = getBgColor(canvas);
		element.addEventListener('change', e => {
			const [bg2, element] = getBgColor(canvas);
			redraw(ctx, bg2);
		});
		redraw(ctx, bg);
	});
	</script>
</figure>

<img style="align-self: center; margin-bottom: 15px;" src="{{ '/images/html5-canvas-tips/good-canvas-text.png' | absolute_url }}">
</div>

## Matching Background Colors on an Opaque Canvas

When using an opaque canvas, the default fill color when initialized or when calling `ctx.clearRect(...)` is always
`#000`. If we want the canvas fill to match our page (assuming it's a solid color), we can get the color with this
simple function:

```js
/**
 * Returns the background color of the nearest ancestor that is not `none`.
 * @param {HTMLElement} element
 * @returns {string}
 */
function getBgColor(element) {
    if (element === undefined) throw "Reached end of tree...";
    const bg = window.getComputedStyle(element).background;
    if (bg !== 'none') return bg;
    return getBgColor(element.parentElement);
}

// ...later...
const bg =
ctx.fillStyle = getBgColor(canvas);
ctx.fillRect(0, 0, canvas.width, canvas.height);
```

If the background can change (e.g., when entering or leaving dark mode) you can subscribe to change events like so:

```js
/**
 * Returns the background color of the nearest ancestor that is not `none`.
 * @param {HTMLElement} element
 * @returns {[string, HTMLElement]}
 */
function getBgColor(element) {
    if (element === undefined) throw "Reached end of tree...";
    const bg = window.getComputedStyle(element).background;
	// Note that we've changed this to return the element as well as the color.
    if (bg !== 'none') return [bg, element];
    return getBgColor(element.parentElement);
}

// ...later...
function redraw(bg_color) {
    ctx.fillStyle = bg_color;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    // ...
}
const [bg, element] = getBgColor(canvas);
redraw(bg);
element.addEventListener('change', e => redraw(window.getComputedStyle(element).background));
```]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="tips" /><category term="programming" /><category term="html5" /><category term="canvas" /><category term="tips" /><summary type="html"><![CDATA[The &lt;canvas&gt; element may be the best thing to happen to HTML since &lt;marquee&gt;. Iâve been using it a lot for various projects recently and thought itâd be nice to collect some of the tips and tricks Iâve learned into once place.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/html5-canvas-tips/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/html5-canvas-tips/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Booting Sun SPARC Servers</title><link href="https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers.html" rel="alternate" type="text/html" title="Booting Sun SPARC Servers" /><published>2024-10-04T00:00:00-04:00</published><updated>2024-10-04T00:00:00-04:00</updated><id>https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers</id><content type="html" xml:base="https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers.html"><![CDATA[In early 2022 [I got several Sun SPARC servers][retro-roundup-2022] for free off of a FreeCycle ad: I was recently
[called out][hn-comment]{: target="_blank"} for not providing any sort of update on those devices... so here we go!

[retro-roundup-2022]: {% post_url /retrocomputing/2022-06-03-retro-roundup %}
[hn-comment]: https://news.ycombinator.com/item?id=41722918

<!--more-->

## The Devices

| Name            |  Released | Original MSRP | Inflation-adjusted (2024) |
|:----------------|----------:|--------------:|:--------------------------|
| SPARCstation 20 | Mar. 1994 |       $12,195 | $26,080                   |
| Ultra 1 Creator | Nov. 1995 |       $25,995 | $53,276                   |
| Axil Ultima 1   | Sep. 1996 |        $9,995 | $19,939                   |

## NVRAM Woes

{% include popimg.html src="/images/sparc-journey/invalid-nvram.jpg" alt="Invalid NVRAM boot messages" style="float:right; margin-left:1em;" %}

Sun SPARC machines store some of their BIOS configuration in a chip called an
<dfn><abbr title="non-volatile RAM">NVRAM</abbr></dfn>, a special type of writeable random access memory that does not
clear its contents when the machine powers off. This is usually a small RAM chip with its own internal battery that
recharges when the machine is running. Unfortunately this means that when the devices is powered off for extremely long
periods the NVRAM loses its values. Even more unfortunately, over time the NVRAM battery degrades to the point where it
can no longer be recharged, and every power cycle results in a compete configuration wipe.

Such is the case with my SPARC machines; upon powering on we're greeted with a sad message.
`Incorrect configuration checksum; Ethernet address ff:ff:ff:ff:ff:ff, Host ID: ffffffff. The IDPROM contents are invalid`{:.amber-term}
means that our NVRAM has been cleared (the term IDPROM is a historical artifact -- older Sun architectures used a
<dfn><abbr title="Programmable ROM">PROM</abbr></dfn> chip instead of an NVRAM chip). Thankfully, there's a process in
place to restore it manually by entering NVRAM values by hand. Here's the general process:

1. Boot your Sun SPARC machine. When you see the `The IDPROM contents are invalid`{: .amber-term} message, press <kbd><kbd>STOP</kbd>+<kbd>A</kbd></kbd> (<kbd>STOP</kbd> is a special key on Sun keyboards). This should drop you to the `ok`{:.amber-term} prompt, which is the OpenBoot debugging prompt.
   <!-- TODO: take photo of STOP key. -->
2. Now we're going to poke values into our NVRAM using the `mkp` command. This command has a format `<value> <location> mkp`. Here's the layout of NVRAM, or at least the parts we care about:

   | Location(s) | Description                                                             |
   |------------:|-------------------------------------------------------------------------|
   |           0 | Always `1` (format/version number).                                     |
   |           1 | First byte of HostID (machine type[^1]).                                    |
   |   2&ndash;7 | 6-byte ethernet address (first three bytes should be `80:00:20`).       |
   |   8&ndash;b | Date of manufacture (can be zeros).                                     |
   |   c&ndash;e | Remainder of HostID.                                                    |
   |           f |  IDPROM checksum - bitwise exclusive-or of locations 0&ndash;e. |
   {: .compact-table}

   So let's start poking values into NVRAM:

   <div style="display:grid;grid-template-columns: 1fr auto;gap:1em;">
   <div style="grid-column:1;"><div class="language-plaintext amber-term highlighter-rouge" style="line-height: 1.0;"><pre class="highlight"><code>ok set-defaults
ok <span class="highlight-1">1</span> 0 mkp
ok <span class="highlight-2">80</span> 1 mkp
ok <span class="highlight-3">8</span> 2 mkp
ok <span class="highlight-3">0</span> 3 mkp
ok <span class="highlight-3">20</span> 4 mkp
ok <span class="highlight-3">c0</span> 54 mkp
ok <span class="highlight-3">ff</span> 6 mkp
ok <span class="highlight-3">ee</span> 7 mkp
ok <span class="highlight-4">0</span> 8 mkp
ok <span class="highlight-4">0</span> 9 mkp
ok <span class="highlight-4">0</span> a mkp
ok <span class="highlight-4">0</span> b mkp
ok <span class="highlight-5">c0</span> c mkp
ok <span class="highlight-5">ff</span> d mkp
ok <span class="highlight-5">ee</span> e mkp
ok <span class="highlight-6">0 f 0 do i idprom@ xor loop f</span> mkp</code></pre></div></div>
   <div style="grid-column:2;" markdown=1>

   | Locations | Values |
   |----------:|:-------|
   | 0--7 |<code><span class="highlight-1">01</span><span class="highlight-2">80</span><span class="highlight-3">080020c0ffee</span></code>|
   | 8--f |<code><span class="highlight-4">00000000</span><span class="highlight-5">c0ffee</span><span class="highlight-6">??</span></code>|

   <!-- {: .compact-table} -->

   </div></div>

   That last line is a small function that will generate the checksum that goes in location `f`.
3. Enter `banner`{:.amber-term} at the `ok`{:.amber-term} prompt. This will print out the system banner, and allow us to
   validate that the values we've entered are correct. If all is well, you should see something like this:

   <div style="grid-column:1;"><div class="language-plaintext amber-term highlighter-rouge"><pre class="highlight"><code>ok banner
Sun Ultra 1 UPA/SBus (UltraSPARC 167MHz), Keyboard Present
OpenBoot 3.7, 384 MB memory installed, Serial #12648430.
Ethernet address <span class="highlight-3">8:0:20:c0:ff:ee</span>, Host ID: <span class="highlight-2">80</span><span class="highlight-5">c0ffee</span>.</code></pre></div></div>

   If, instead, you see a message like `The IDPROM contents are invalid`{:.amber-term} after the banner, then either the
   checksum is wrong (check that you typed it correctly!) or the first byte of the HostID is incorrect -- this byte
   specifies the machine type, and must match the machine you're trying to boot[^1]. Don't forget to re-generate the
   checksum after updating any of these values!
4. Finally enter `reset`{:.amber-term} at the `ok`{:.amber-term} prompt, which will restart the boot process. Because we
   haven't lost power, however, the NVRAM will retain the values we've set. Wait for the machine to boot. This can take
   quite a while, especially if there is a lot of RAM in the machine. Pro tip, plugging an ethernet cable between the
   Sun server and another machine can help here -- otherwise the Sun server can spend a lot of time complaining about
   `SUNW,hme0: Link Down - cable problem?`{:.amber-term}. I plugged the Sun Ultra 1 into a powered on Raspberry Pi 3b
   and it stopped complaining.
5. Eventually you'll be brought to a Unix login, assuming the machine is running Solaris. If you know the password,
   great; if not, things get tricky[^2]. <!-- TODO: talk about clearing root password by booting debian -->
   Once logged in, you can set the date and time (for as long as the machine is
   powered on, anyways) at the `root#`{:.amber-term} prompt with `date 1004102024`{:.amber-term} (in format
   `mmddHHMMYY`).

[^1]: A complete table can be found at the <ruby style="ruby-position: under; ruby-align: center;">
      [SUN NVRAM/hostid FAQ][sun-nvram-faq]{: target="_blank" }
      <rt>Archived at: [Wayback Machine][sun-nvram-faq-wb]{:target="_blank" .no-arrow}.</rt>
      </ruby>, but for my purposes `80` is the correct value for a Sun Ultra 1, and `72` is the correct value for a
      SPARCstation 20.

[^2]: I ended up buying an Adaptec ASC-29160 Ultra 3 SCSI controller PCI card to throw in another old computer. This
      card can be found pretty easily on eBay, and only cost me $14 USD with shipping. It has 68- and 50-pin SCSI
      headers, but the disks in my Sun servers are 80-pin, so I also had to purchase an 80-to-68 pin adaptor
      ($22 USD shipped from eBay). Using this and a CloneZilla disk I was able to clone entire disk images for posterity
      and inspection. I believe this is also how I got the root password cleared, but I was also messing around with
      net-booting at the time and I honestly can't remember which method ended up working.

[sun-nvram-faq]: https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml
[sun-nvram-faq-wb]: https://web.archive.org/web/2/https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml

## Results

### Sun Ultra 1 Creator

The Sun Ultra 1 was the first machine I tried to boot, and so far the only one to successfully fully boot.

{% include carousel.html height="600" unit="px" number="1" %}

### Sun SPARCstation 20
{:style="clear:both;"}

{% include popimg.html src="/images/sparc-journey/sp20-simm-errors.jpg" alt="SPARCstation 20 SIMM Errors" style="float:left;margin-right:1em;" width="400px" %}

After some stumbles learning about the machine-type byte in the host ID[^1], this machine was able to get past the NVRAM
check, but failed during memory diagnostics. This output repeated for some 10 minutes before I turned the machine off.
For J0301, it looks like the fourth bit of the lowest byte (`0b00010000`) is faulty, always set to `0b1`. For example,
the pattern `0b10100101` (`0xa5`) becomes `0b10110101` (`0xb5`). For J0302, something stranger seems to be happening, as
`0b10100101` (`0xa5`) becomes `0x01001010` (`0x4a`) and `0b11111111` (`0xff`) becomes `0b11101111` (`0xef`).

| U-number[^3] |    Physical Addresses    | Expected Value | Observed Value |
|-------------:|:------------------------:|---------------:|:---------------|
|         J0301|`0x0c4012a8`--`0x0c4fb2a8`|   `0xa5a5a5a5` | `0xa5a5a5b5`   |
|         J0301|`0x0c4012a8`--`0x0c4fb2a8`|         `0x00` | `0x10`         |
|         J0302|`0x188ff2b8`--`0x18a011a9`|   `0xa5a5a5a5` | `0xa5a5a54a`   |
|         J0302|`0x188ff2b8`--`0x18a011a9`|   `0xffffffff` | `0xffffffef`   |
{:.compact-table style="width:unset;clear:none;"}

[^3]: This is the SIM slot identifier. On a SPARCstation 20, J0301 is "bank 3", physical addresses
      0x0c000000--0x0fffffff, and J0302 is "bank 6", physical addresses 0x18000000--0x1bffffff.
      See [SPARCstation 20 Service Manual, p.35: Â§SIMM Errors on Archive.org][sp20-simm-errors].
      ![SPARCstation 20 SIMM Layout]({{'/images/sparc-journey/sp20-simm-layout.jpg'|relative_url}}){:style="max-width:500px;"}

[sp20-simm-errors]: https://archive.org/details/manualzilla-id-6034531/page/n57/mode/2up?q=%22SIMM+errors%22

One fun detail I noticed poking around this machine: there's a little bear with a top hat silkscreened onto the
motherboard:
{:style="clear:left;"}

![asdf]({{'/images/sparc-journey/sparcstation-mobo-zoom.jpg'|relative_url}})

{% include carousel.html height="600" unit="px" number="2" %}

### Axil Ultima 1
{:style="clear:both;"}

Perhaps the saddest story here, and a testament to the quality and reliability of original Sun hardware, this Sun clone
initially had some struggles booting, and wouldn't recognize keyboard input. After a couple power cycles, however, it
stopped booting altogether.

{% include carousel.html height="600" unit="px" number="3" %}

## Notes

I did start writing a section about my efforts last year to boot NetBSD on this machine. I honestly can't remember if I
had much luck in the end, and I was having difficulty repeating these steps and running out of time to work on this
project. So I've decided to leave this section as-is here at the end; the steps *should* be technically accurate, but as
I said I haven't had time to verify them and/or finish writing the section. You can check out
<ruby style="ruby-position: under; ruby-align: center;">[this page from NetBSD][netbsd-boot]{: target="_blank" }
<rt>Archived at: [Wayback Machine][netbsd-boot-wb]{:target="_blank" .no-arrow}.</rt></ruby> with more instructions if
you're really interested.

[netbsd-boot]: https://www.netbsd.org/docs/network/netboot/intro.sun.html
[netbsd-boot-wb]: https://web.archive.org/web/2/https://www.netbsd.org/docs/network/netboot/intro.sun.html

### Et tu, root-e?

Now that we've managed to convince our Sun server to begin booting, there's a few others problems. First, Solaris
doesn't support DHCP, and cannot get a IP address; second, it also doesn't have a configuration for its own hostname.
Let's look at configuring those. Instead of DHCP, Solaris uses <defn><abbr title="Reverse Address Resolution Protocol">RARP</abbr></defn>,
an older protocol (1984; DHCP was first defined in 1993).

Now, <defn><abbr title="Address Resolution Protocol">ARP</abbr></defn> is a link-layer protocol that allows
internet-layer addresses (IPs) to be resolved to link-layer addresses (MACs). *Reverse* ARP is used to resolve a MAC to
an IP. So, I hooked up a Raspberry Pi 3b with an ethernet cable directly to the Sun server. At boot time, Solaris will
send out a broadcast request with its MAC address (configured via NVRAM) and then will listen for a response to
auto-configure its IP. We can install the `rarpd` package on our Pi, and configure it to know the IP address associated
with our Sun's MAC.

Checking `man rarpd` we can note a few important details: first, an association between MAC addresses and hostnames is
configured in `/etc/ethers`. Second, an association between hostnames and IPs is read from `/etc/hosts` (this file
already exist on all Linux systems). Third, there's a section about "bootable images":

> By  default  rarpd  also checks if a bootable image, of a name starting with the IP address in hexadecimal upper-case
> letters, is present in the TFTP boot directory before it decides whether to respond to the RARP request.  The
> comparison involves exactly the first eight characters, and ignores any additional character.  A file name shorter
> than eight characters in length is unsuccessful.  Typically, 192.168.0.122 would correspond to  an  image  named like
> C0A8007A.SUN.

Ok, that's a lot to chew on, but the gist is that we can do the following:

<div style="display: grid; grid-column-template: 1fr 1fr; gap: 1em;">
<div markdown=1 style="grid-column:1;">
```conf
b8:27:eb:fc:10:0c pi            # Our Pi
08:00:20:c0:ff:ee SUN.TEST.COM  # Our Sun
```
{:data-file-name="/etc/ethers"}
</div>
<div markdown=1 style="grid-column:2;">
```conf
127.0.0.1    pi            # Our Pi
192.168.6.37 SUN.TEST.COM  # Our Sun
```
{:data-file-name="/etc/hosts"}
</div>
</div>

And as for the bootable images, for now we'll run `rarp` without that restriction using the `-e` parameter. We'll also
use `-d` so that the daemon stays connected to the TTY and we can continue to see log messages. Make sure the system
service isn't running with `sudo systemctl stop rarpd`. Now we can run `sudo rarpd -e -d`. Now let's boot again and see
if we get an IP address.

<!-- The Axil started to boot, but then on subsequent power cycles deteriorated to the point of no longer printing any output. -->

<!--
Notes:
- https://forum.vcfed.org/index.php?threads/how-to-workaround-when-your-sun-ultra-5-10-nvram-no-longer-works.52997/
  on how to reprogram the nvram
- https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml
  lots of facts, specifically the requisite first bytes of the hostid.
- http://sunsite.uakom.sk/sunworldonline/swol-11-1995/swol-11-fusion.intro.html
- https://www.edn.com/axil-launches-the-axil-ultima-1-and-axil-ultima-2-workstations-and-servers/

 -->]]></content><author><name>Sidneys1</name><email>admin@sidneys1.com</email></author><category term="retrocomputing" /><category term="retrocomputing" /><category term="sun-sparc" /><summary type="html"><![CDATA[In early 2022 I got several Sun SPARC servers for free off of a FreeCycle ad: I was recently called out for not providing any sort of update on those devicesâ¦ so here we go!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/sparc-journey/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/sparc-journey/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How I Back Up Google Photos</title><link href="https://sidneys1.github.io/Backing-Up-Google-Photos/" rel="alternate" type="text/html" title="How I Back Up Google Photos" /><published>2024-06-28T00:00:00-04:00</published><updated>2024-06-28T00:00:00-04:00</updated><id>https://sidneys1.github.io/backing-up-google-photos</id><content type="html" xml:base="https://sidneys1.github.io/Backing-Up-Google-Photos/"><![CDATA[Google Photos is wonderful. It backs up my photos and videos, tags them, and makes them available to share with my
family.

But I also don't trust that Google will never accidentally "loose" my photos. Here is the process I use to back up my
Google Photos data to a self-hosted instance of Photoprism.

<!--more-->
This guide covers the process I use to back up my Google Photos content, in its original quality and with sidecar
metadata, to Photoprism.

Prerequisites and Setup
-----------------------

My Photoprism instance runs on a TrueNAS Scale server as a kubernetes app. While yours doesn't have to run in the exact
setup, it's worth describing. Photoprism has three primary storage folders, "Originals", "Imports", and a data path for
sidecar files, multimedia caches, and the database file (if you're using the built-in Sqlite storage, though I'd
strongly caution you to set up an external MariaDB instance if you have a large photo library). Photoprism treats
"Originals" as essentially a read-only store of media - anything you put in here will be imported by Photoprism as-is.
Meanwhile any media put in "Imports" will be ingested by Photoprism and moved to the Originals folder; however you will
have no control over the organization of these imported media. For our purposes, I *strongly* recommend putting your
Google Photos media in "Originals" to preserve the folder structure Takeout outputs.

In my TrueNAS setup the Originals and Import folders are mounted onto ZFS datasets on the host, which allows me to
access and administer the media files while Photoprism isn't running. Specifically, "Originals" is mounted to
`/mnt/Bulk Storage/Photoprism/Originals`, which we'll just call `$ORIGINALS` from here on. First and most importantly,
we will be using ZFS extended attribute `i`mmutable to ensure that any files already in our "Originals" folder won't
be overwritten when we extract the Takeout GZip archives. To do this, we can run the following command:

```sh
# Find all regular files in our Originals folder and mark them as +i (immutable).
find "$ORIGINALS" -type f -print0 \
| sudo xargs -0 -n 1 chattr +i
```

We'll also be using a few tools not distributed with TrueNAS Scale (or more Linux distros, for that matter). Most can be
installed via package managers, the rest can be built from source:

- `pigz` - Parallel GZip implementation ([homepage](http://www.zlib.net/pigz/)).
- `progress` - Coreutils' progress viewer (not necessary - just nice; [homepage](https://github.com/Xfennec/progress)).
- `jdupes` - Jody Bruchon's enhanced `fdupes` clone ([homepage](https://codeberg.org/jbruchon/jdupes)).

Step 1 - Create Takeout Archives
--------------------------------

1. Go to [Google Takeout](https://takeout.google.com).
2. Click <button>Deselect all</button>.
3. Scroll down to "Google Photos" and select its checkbox.
4. Scroll to the bottom and click <button>Next Step</button>.
5. For "File type" select `.tgz`, and for "File size" select 50GB.
6. Click <button>Create Export</button>.

Step 2 - Downloading Takeout Archives
-------------------------------------

<div markdown=1>

Once your Google Takeout files are ready you will get an email (you can also check the Takeout site for completed
archives). Depending on the size of our Google Photos library you may have multiple ~50GB files. I usually have around
10-15. I prefer to download one file at a time (depending on free disk space). Clicking the file will start a browser
download, but I like to pause this download, right-click it and "copy download URL", and then enter that into a download
tool like Aria2.

<aside markdown=1>

The total size of your Takeout files may be much larger than your total Google Photos library. Takeout will organize
your photos and videos by year and month, but any named albums you've created will also have a top-level folder
containing yet another copy of any photos or videos in that album.

Because of this, we'll be utilizing some ZFS tricks to minimize and deduplicate your disk usage.

</aside>

</div>

Step 3 - Extracting Takeout Archives
------------------------------------

Once I have some Takeout archive files downloaded (you don't have to download them all at once, or even in order!) we'll
start extracting them into our "Originals" folder. Your Photoprism instance shouldn't index Originals unless you tell it
to, but I usually shut Photoprism down while performing these steps just to be safe.

<details markdown=1><summary>Here's the script I use.</summary>

This will use `pigz` to extract the specified archive in parallel (for speed) and then extract the Google Photos files
into our "Originals" folder:

```sh
#!/usr/bin/env sh

# Usage:
# sudo ./extract-to-originals.sh takeout-archive.tgz

if [ "$(id --user)" -ne 0 ]; then
    echo "Please run with sudo!" 1>&2;
    exit 1;
fi

pigz --decompress <"$1" \
| tar --extract --strip-components=2 --skip-old-files --directory="$ORIGINALS" \
& progress --wait -monitor --command pigz;

chown -R photoprism:photoprism "$ORIGINALS";
```
{:data-file-name="extract-to-originals.sh"}

Let's break down what's happening here:

1. `if [ "$(id -u)" -ne 0];` - checks if the script was run as `root` (or with `sudo`).
2. `pigz --decompress <"$1"` - decompress the GZip file specified in the first passed to the script.
3. `tar --extract`â¦ - extract files from the Tar archive that `pigz` decompressed. There's a few extra options:
   - â¦`--strip-components=2`â¦: remove some unnecessary path components that Takeout adds.
   - â¦`--skip-old-files`â¦: skip files that already exist on disk.
   - â¦`--directory`: extract files into our `$ORIGINALS` folder.
4. `progress --wait --monitor --command pigz` - monitor the progress of the `pigz` command in decompressing the input
   file.
5. `chown -R photoprism:photoprism "$ORIGINALS"` - Because `tar` attempts to preserve the ownership of the files it
   extracts, we need to correct this after extraction. Obviously update the `user:group` to suit your own needs.

Because the files already in our "Originals" folder are marked `i`mmutable tar can't overwrite them - and in fact we
also provide tar with the `--skip-old-files` option to avoid a lot of error output about not being able to extract
existing files. We do this so that the next time you want to back up your Google Photos, any files that existed between
the last backup and the new one aren't re-written and we can safely skip extracting them from the archive. This will
save a *ton* of time.

</details>

Step 4 - Deduplicating Media Files
----------------------------------

Repeat step 3 for all of the Takeout archives - you can delete each one as you go once it's been extracted. Once you're
done, we can inspect how many files we have that are new by counting the files that are not `i`mmutable.

<details markdown=1><summary>Here's a little script to do just that.</summary>

```sh
#!/usr/bin/env sh

if [ "$(id -u)" -ne 0 ]; then
    echo "Please run with sudo!" 1>&2;
    exit 1;
fi

find "$ORIGINALS" -type f -print0 \
| xargs --null lsattr \
| grep -- "----------------------" \
| wc --lines;
```
{:data-file-name="count-new-originals.sh"}

Breaking it down:

1. `if [ "$(id -u)" -ne 0 ]` - again, checks that we're running as `root` or with `sudo`.
2. `find "$ORIGINALS" -type f -print0` - finds files in our originals folder. We use `-print0` to safely handle
   filenames with weird characters in them.
3. `xargs --null lsattr` - for each file that `find` outputs we want to run `lsattr` - this will list any extended
   attributes on each file.
4. `grep -- "----------------------"` - for each line (file) of output from `lsattr`, we're only interested in lines
   (files) that have no extended attributes set (files that have `i`mmutable set would show as
   `----i-----------------`).
5. `wc --lines` - count the number of lines (files).

</details>

Neat! Now let's deduplicate all of these files. As mentioned in the aside above, Takeout will include multiple copies
of each piece of media, as each one can appear in multiple albums. To deduplicate this and save you a bunch of hard
drive space we'll use `jdupes`. This tool will search for files that are identical and (in our case) turn them into
filesystem hardlinks - which means that the same data on disk can be pointed to by multiple file names.

First we need to change all files back from immutable. This can be done quickly with `sudo chattr -R -i "$ORIGINALS"`.
Then we run `jdupes`, which has a lot of options, but the ones we want are:

```sh
sudo jdupes --link-hard --recurse "$ORIGINALS"
```

Aka:

- `--link-hard` - we want to hard-link all identical files together.
- `--recurse` - consider all files within subdirectories of `$ORIGINALS` recursively.

When this is done we'll have potentially saved a lot of disk space!

<details markdown=1><summary>Want to find out how much?</summary>

Here's a short command that will tell you exactly how much space has been saved!

```sh
find "$ORIGINALS" -type f -links +1 -printf '%i %s\n' \
| awk 'a[$1]++{sum+=$2}END{print sum}' \
| numfmt --to=iec-i --suffix=B
```
{:data-file-name="deduplication-space-savings.sh"}

Here's the gist of what's happening:
1. `find "$ORIGINALS" -type f`â¦ - find all `f`iles in `$ORIGINALS`;
   - â¦`-links +1`â¦ - that have more than one hardlink;
   - â¦`-printf '%i %s\n'` - and output the file's `inode` number and file size (in bytes).
2. `awk 'a[$1]++{sum+=$2}END{print sum}'` - this line is a bit heavy, but here's what the `awk` script is doing:
   - `a[$1]++`

     Increment the value stored in `a[$1]` (where `$1` is going to be the `inode` number from each line). The `inode` is
     the unique data on disk - multiple file paths hardlinked to the same data will have the same `inode` number.
   - `{sum+=$2}`

     The `{sum+=$2}` part is a conditional clause - that means that if the value before it is "truthy" it will execute.
     The first time a unique `inode` is encountered `a[$1]++` will post-increment to 1, returning 0. This is falsy, so
     the conditional clause won't run. Each time an inode is encountered after that, however, the value with be 1 or more,
     which is a truthy value and the conditional clause will run. All the clause actually does (when run) is increment
     the value `sum` (which starts at 0) by `$2` (the file size in bytes).
   - `END{print sum}` - when the script ends, print the value in `sum`.
3. `numfmt --to=iec-i --suffix=B` - this converts the value of `sum` output by `awk` to an IEC size (e.g., `1024` would
   be converted to `1.0KiB`).

So as an example, say our "Originals" folder only contains three files:

- ð¼ï¸ `a.jpg`
- ð¼ï¸ `b.jpeg`
- ð `sidecar.json`

And `a.jpg` and `b.jpeg` are both hardlinks to the same 1MiB of data, and `sidecar.json` is a 1KiB standalone file. When
we run our script, the `find` portion will output three lines:

```
12345 1048576
12345 1048576
67890 1024
```

When `awk` gets these lines, it will perform the following:

- Line 1: Post-increment `a[12345]` (from 0 to 1), returning 0. 0 is falsy, so `{sum+=1048576}` doesn't run.
- Line 2: Post-increment `a[12345]` (from 1 to 2), returning 1. 1 is truthy, so `{sum+=1048576}` runs - sum is now `1048576`.
- Line 3: Post-increment `a[67890]` (from 0 to 1), returning 0. 0 is falsy, so `{sum+=1024}` doesn't run.
- End of input: `END{print sum}` runs, outputting `1048576`.

Finally, `numfmt` converts `1048576` to `1.0MiB`, and we see our space savings is 1 megabyte! This is correct, as if
`b.jpeg` wasn't hardlinked to `a.jpg` it would take an additional 1 megabyte.

</details>

Cleanup
-------

Finally, we can re-mark our files as `i`mmutable:

```sh
find "$ORIGINALS" -type f -print0 \
| sudo xargs -0 -n 1 chattr +i
```
{:data-file-name="make-files-immutable.sh"}

Now we turn Photoprism back on, and tell it to re-index new files in the Originals folder. It will even intelligently
use the sidecar JSON files that Takeout exports to enrich each media item with additional metadata.]]></content><author><name>Sidneys1</name></author><category term="other" /><category term="datahoarding" /><category term="self-hosting" /><category term="zfs" /><category term="photoprism" /><category term="truenas" /><summary type="html"><![CDATA[Google Photos is wonderful. It backs up my photos and videos, tags them, and makes them available to share with my family. But I also donât trust that Google will never accidentally âlooseâ my photos. Here is the process I use to back up my Google Photos data to a self-hosted instance of Photoprism.]]></summary></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2024-02-01T00:00:00-05:00</published><updated>2024-02-01T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÃ -->

I recently rediscovered an obscure 1997 Simon & Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: [Math Invaders](https://archive.org/details/MathInvaders). In this part, we'll investigate whether we can
enter an "editor mode", hinted at within the `strings` contained within the program. There's even a
â¨<span class="shimmer">surprise ending</span>â¨ that I didn't see coming!

<!--more-->
---

Here's where we left off, investigating the disassembly of a function that references a mysterious string:
`*** EDITOR MODE ***`. Cleaning the disassembly up and commenting to be a bit to be more readable gives us:

<div class="code-split-root" data-file-name=".cpp" ><div markdown=1 class="code-split-scroll">

```cpp
// Because `param_1` from the disassembly (aka `this`) is passed to
// `CWnd::SetWindowTextA` at the end, this function probably belongs
// to a class inheriting `CWnd`.
class CGameWnd : public CWnd;

void CGameWnd::_updateWindowTitle() {
	// Don't do anything if we're in fullscreen mode.
	if (gFullscreen) return;
	char buffer[256];
	if (this->unknown_334 != 0) {
		// If the variable at offset 0x334 is not 0/FALSE/NULL,
		// we have a file loaded.
```
{:style="--left: 8;"}

```cpp
		if (this->unknown_3714 == 0) {
			// If the variable at offset 0x3714 is 0/FALSE/NULL,
			// we're in "editor mode"... whatever that is!
			// Append text indicating this to the buffer.
			strcat(buffer, " - *** EDITOR MODE ***");
		}
```
{:.code-split style="--left: 8;"}

```cpp
	}
```
{:.code-split style="--left: 4;"}

```cpp
	// Set the window title to the contents of the buffer.
	this->SetWindowTextA(buffer);
}
```
{:.code-split}

</div></div>

Ok! So to activate editor mode, we need to **1)** not be fullscreen, **2)** have `CGameWnd->unknown_334` be non-zero,
and **3)** have `CGameWnd->unknown_3714` be zero. Enabling fullscreen (via the <samp>3d.ini</samp> file described in
part II) no longer seems to crash my game (that must have been a mistake of mine!). The game starts and plays in
fullscreen, and the title even updates between "Paused, Press 'p' to resume." and "Running..." when we press
<kbd>P</kbd>!

<div markdown="1">

<aside markdown=1>

While I could use a debugger to change the value at runtime, this is the only place the value is read, so we can assume
that any editor mode functionality has also been stripped out...

</aside>

But try as I might, <span class="aside-attn">no amount of reverse engineering is allowing me to toggle the
`unknown_3714` variable</span>. No code even exists (that I can find) to change it, except during initialization or
loading of levels, when it's always set to `TRUE`. So I have a theory: there *was* an editor mode, but its functionality
has been "removed" behind something like `#ifdef EDITOR`.

</div>

Well then! Without a deus ex machina, it looks like we'll never break into the "editor mode". I reached out to the
community to see if anyone knew more about the game itself, or had heard of a source code leak for this nearly 30 year
old game. A few people were even so kind as to search Usenet for me. But nothing was turning up. A few months passed and
I'd pretty much given up on ever finishing this part III post.

## [Vindication!](https://c.tenor.com/vV7u0Ur7I0YAAAAd/tenor.gif){:target="_blank" referrerpolicy="no-referrer"}

<div class="chat rfloat">
	<div class="bubble from-them">
		<q>You could try downloading this SSK@<span class="blur">YoUTHinkYOUrecLeVeRdONtYou?</span>/SSPYTH.zip</q>
	</div>
	<div class="bubble from-them">
		<q>Its password seems to be the file name.</q>
	</div>
</div>

Months after I'd given up I received an encrypted message, sent to the SimpleX address listed in my website footer. It
didn't contain much more than a Freenet hash. I hurriedly installed a client and accessed the hash &mdash; the file
downloaded &mdash; the password worked &mdash; and inside? <span class="shimmer">Beautiful, wonderful source
code</span>, with "last modified" dates ranging from *December 1995 to January 1997*! And sure enough, there are several
instances of `#ifdef EDITOR` that block the "Editor Mode" from being used, as I suspected! In fact, editor mode is
implemented as a completely separate static library, that is only linked into the executable when editor mode is to be
used. No wonder none of the relevant code can be found when reverse engineering the released binary!

Now that we have source code and can fully analyze the game in the ground truth, let's poke around and see what we can
find. The source code is laid out as follows:

* ð <samp>3DLIB</samp> - *The core 3D engine.*
  * ð *Various Assembly, and C++ source and header files.*
* ð <samp>EditLib</samp> - *Editor Mode functionality.*
  * ð *Various C++ source and header files.*
* ð <samp>RES</samp> - *The game icon in BMP and ICO formats.*
* ð¨ *Various Microsoft Developer Studio (Visual C++) files.*
* ð *Various C++ source and header files.*
* ð *Some example save files.*
* âï¸ <samp>SSPYTH.EXE</samp> - *A compiled binary.*
* ð§ <samp>3D.INI</samp> - *An example configuration file.*

### Cheat Codes

<div markdown=1>

<aside markdown=1>

A little more digging in Ghidra and I would have found them, as they print certain messages when activated and these
messages are visible as strings in the binary (even the unused codes!).

</aside>

<span class="aside-attn">The game has a few cheat codes!</span> They can be activated by typing the code in during play,
as it keeps a buffer of the last 20 key presses. All cheat codes begin with <kbd>K</kbd> and are committed with
<kbd>L</kbd>:

</div>

<div class="no-reverse" markdown=1>

| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cheat&nbsp;Code | Message | Description |
|-----------------------:|:-------:|:------------|
| <span class="aside-attn"><kbd><kbd>K</kbd><kbd>E</kbd><kbd>Y</kbd><kbd>1-4</kbd><kbd>L</kbd></kbd></span> | <samp>Add Key</samp> | Gives the specified key (1-4). |
| <kbd><kbd>K</kbd><kbd>W</kbd><kbd>N</kbd><kbd>0-9</kbd><kbd>L</kbd></kbd> | <samp>Add Weapon</samp> | Gives the specified weapon (0-9) with max ammo. |
| <kbd><kbd>K</kbd><kbd>V</kbd><kbd>U</kbd><kbd>R</kbd><kbd>L</kbd></kbd> | <samp>Add Strength, Shield</samp> | Sets max strength, max shield, and dons the spacesuit. |
| <span class="aside-attn"><kbd><kbd>K</kbd><kbd>H</kbd><kbd>J</kbd><kbd>1-6</kbd><kbd>L</kbd></kbd></span> | *None* | Gives the specified item (1-6), however items 2, 3, and 6 are not allowed to be given via this cheat.<br/>The items 1-6 are: "health pack", "light divider", "time warper", "drainer field", "ultra drainer field," and "reflection". |
| <span class="aside-attn"><kbd><kbd>K</kbd><kbd>Y</kbd><kbd>H</kbd><kbd>R</kbd><kbd>L</kbd></kbd></span> | <samp>Add Everything</samp> | Adds all keys, weapons, and allowed items. |
| <span class="aside-attn"><kbd><kbd>K</kbd><kbd>N</kbd><kbd>N</kbd><kbd>L</kbd></kbd></span> | <samp>Problem Debug Mode ON</samp><br/><samp>Problem Debug Mode OFF</samp> | Toggles a mode in which math problems' expected answers are printed. |
| <kbd><kbd>K</kbd><kbd>01-27</kbd><kbd>L</kbd></kbd> | *None* | Go to level 01-27. |

<aside markdown=1>

The strings `Add Key`, `Add Everything`, and `Problem Debug Mode %s` do actually exist in the release binary, but the
code to activate them (as well as the `KHJ#L` code) is not present. The source code I have does not have any mechanism
to remove it (e.g., a preprocessor directive), so my assumption is that some of the cheat codes were removed from the
"final" build of the game, but that these changes were not committed to the version of the source code I have access to.

</aside>

</div>

### Building a 27 Year Old Game

<div markdown=1 class="clearfix">

{% include carousel.html height="300" unit="px" number="1" class="rfloat" %}

Of course, the piÃ¨ces de rÃ©sistance of having access to the source code: editor mode! Let's see what it takes to get it
working. First, we'll need to get the source code building. Thanks to the lovely project [DOSBox-X][dbx], emulating
older Windows operating systems is as simple as following [a guide][w95dbx]. I also sourced the following disk images:
[Windows 95 OSR2][w95osr2][^osr2], [Visual C++ 4.2][vcpp42], the [DirectX 1.0 SDK][dxsdk], and the
[ActiveMovie SDK][netcd][^amalt] (this disk contains many other interesting installers as well). If you're planning on
building up such a virtual machine yourself, you'll have to find your own product keys, sorry.

[dbx]: https://dosbox-x.com/
[w95dbx]: https://dosbox-x.com/wiki/Guide%3AInstalling-Windows-95
[w95osr2]: https://archive.org/details/win-95-osr-2
[vcpp42]: https://winworldpc.com/product/visual-c/4x
[dxsdk]: https://archive.org/details/gamesdk
[netcd]: https://archive.org/details/the-net-cd
[^osr2]: The [3rd release of Windows 95](https://en.wikipedia.org/wiki/Windows_95#Editions), "OEM Release 2", added support for FAT32 drives.
[^amalt]: Alternative source in disk 4 of [Storm #1 - Internet Archive](https://archive.org/details/storm-1).

Breezing through the guide leaves us with a fully functional Windows 95 install, with Visual C++ 4.2 (which includes the
Microsoft Developer Studio IDE - which we'll need), the DirectX SDK, and the ActiveMovie SDK. Our source code contains
an `.mdp` file, which is a Developer Studio project, so let's open it and build the default project with
<kbd><kbd>Ctrl</kbd>+<kbd>B</kbd></kbd>!

</div>


<div class="code-split-root" data-file-name=".log" ><div markdown=1 class="code-split-scroll">

```
--------------------Configuration: 3dlib - Win32 Debug--------------------
Compiling...
```
{:style="clear: both;"}

<div class="language-plaintext highlighter-rouge code-split"><div class="highlight">
<pre class="highlight">
<code>decomp.cpp
<span class="err">fatal error C1083: Cannot open source file: 'C:\Sspyth\3dlib\decomp.cpp': No such file or directory</span>

Error executing cl.exe.
Sspyth.exe - 1 error(s), 4 warning(s)
</code></pre></div></div>

</div></div>

Alright, some errors, but nothing we can't solve. The first thing we notice is we're missing a file
<samp>3DLIB\DECOMP.CPP</samp>. Poking around, we find there's a file named <samp>3DLIB\aviDECOMP.CPP</samp>. A simple
file rename gets us past this error. Re-running the build gives us another error, now in the linking process. It can't
seem to find the 3DLib and ActiveMovie libraries:

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>e_frame.cpp
.\.\ztest.hpp(9) : <span class="err">fatal error C1083: Cannot open include file: 'strmif.h': No such file or directory</span>
</code></pre></div></div>

<div markdown=1 class="float-reverse">

![Game not installed]({{ "/images/reverse-engineering-a-win95-game-III/game-not-installed.png" | absolute_url }})
{: .rfloat }

That's as easy as adding the full path to the ActiveMovie SDK's include directory to the compiler path, and adding the
<samp>lib\StrmBase.lib</samp> file and the 3DLib output file to the linker properties. Our project now builds, and we
can verify that the game runs! Well, it tells us <samp>Game not installed, run the setup program.</samp>, but commenting
out a few lines in `CSspythApp::InitInstance()` fixes that:

</div>

```cpp
// Check for game installed
// char buffer[260];
// strcpy(buffer, "");
// GetRegString("Version", buffer, 20);
// if (strcmp(SSP_VERSION, buffer)) {
// 	AfxMessageBox("Game not installed, run the setup program.", MB_OK | MB_ICONSTOP);
// 	return FALSE;
// }
```
{: style="clear: both;" data-file-name="SSPYTH.CPP" }

Installing the game and pointing the `pakpath` setting in <samp>3D.INI</samp> to the install directory allows the game
to load assets and run!

![Game running]({{ "/images/reverse-engineering-a-win95-game-III/game-running.png" | absolute_url }})

### Editor Mode

So what do we need to enable editor mode? Let's create a new build configuration just for this use case. We already know
we have to add `/D EDITOR` to the compiler settings, and doing so builds... and fails. Why now?

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>sspyth.obj : <span class="err">error LNK2001: unresolved external symbol "public: void __thiscall CEditFrame::EditDoor(void *)"(?EditDoor@CEditFrame@@QAEXPAX@Z)
sspyth__/Sspyth.exe : fatal error LNK1120: 7 unresolved externals</span>
Error executing link.exe.
Sspyth.exe - 8 error(s), 0 warning(s)
</code></pre></div></div>

Ah, EditLib! Let's add that to our linker options as well and try again. This time the build succeeds and
we can run the game as before. Now, how do we activate it? We know so far that: **1)** the game has to be in windowed mode,
so we set `fullscreen=0` in <samp>3D.INI</samp>; and **2)** there are some mystery values in the main window class that must be
set just-so to be "in editor mode". Thankfully now we can look at actual code! It turns out our
`CGameWnd::_updateWindowTitle()` decompilation above is actually named `CMainFrame::ShowPauseState()`:

```c++
void CMainFrame::ShowPauseState(void)
{
	if (g_FullScreen)
		return;

	char buffer[256];
	if (m_game.m_pscene != NULL) {
		char drive[5],directory[200], name[30], extension[5];
		_splitpath(FileName, drive, directory, name, extension);
		sprintf(buffer, "  S.S. Pythagoras  -  '%s'  ", name);
		if (!m_game.m_GameMode)
			strcat(buffer, " - *** EDITOR MODE ***");
		if (m_game.Paused())
			strcat(buffer, " - Paused,  press 'p' to resume.");
		else
			strcat(buffer, " - Running...");
	} else {
		sprintf(buffer, "  S.S. Pythagoras  -  NO ACTIVE LEVEL");
	}

	SetWindowText(buffer);
}
```
{:data-file-name="MainFrm.cpp"}

<div markdown=1 class="float-reverse">

<div class="rfloat"><div class="code-split-root" data-file-name="GAME.CPP" ><div markdown=1 class="code-split-scroll">

```c++
void CGame::Update(CKeyboard& keys) {
```
{:style="--left: 4"}

```c++
	if (keys.KeyDownWasUp('G'))	{
		m_GameMode = !m_GameMode;
		GetMainFrame()->ShowPauseState();
	}
```
{:.code-split style="--left: 4"}

```c++
}
```
{:.code-split}

</div></div></div>

Awesome, my guesses were *really* close. `unknown_334` is `m_game.m_pscene`, and `unknown_3714` is `m_game.m_GameMode`.
Let's see if I'm right, and `m_GameMode` is changed with a `#ifdef EDITOR`-surrounded key input. `m_GameMode` is only
changed in two places in the code, both in <samp>GAME.CPP</samp>. The first is during initialization, where it is set to
`TRUE`. The second place is further down the file, in `CGame::Update(CKeyboard&)`:

</div>

Ok, this isn't surrounded by `#ifdef EDITOR`... I suspect again that the "final" version of the game saw a few code
changes that weren't included in the copy of the code I have. But a little digging shows that `m_GameMode` alone has no
real effect, because just a little further down is the code to actually *perform* editor mode:

<div class="code-split-root" data-file-name="GAME.CPP" ><div markdown=1 class="code-split-scroll">

```c++
////////////////////////////////////////// EDITOR
#ifdef EDITOR
```

```c++
if (keys.KeyDownWasUp('I')) {
	GetApp()->ShowEditFrame();
	GetApp()->m_editframe->OnInsertButton();
}
```
{:.code-split}

```c++
#endif
```
{:.code-split}

</div></div>

<div markdown=1>

<aside markdown=1>

I've skipped over some steps I had to take related to the release version PAK files referencing unused &mdash; and
unincluded &mdash; textures and models. I suspect the released game runs fine without them because it only loads used
textures, while the editor mode loads all textures (in case you want to use them) that are defined. As I don't have the
original game assets (I only have source code and the PAK files distributed with the released game) I can't recover
these textures and models, and so I just copied existing files and gave them the expected name.

Another item of interest is that in activating editor mode *no* textures will load properly, as the files on-disk are
expected to be [PCX](https://en.wikipedia.org/wiki/PCX) format, but when packing a PAK file the raw data is stored
unencoded (likely to increase loading speed). My extractor from Part I, PAKrat, just extracts the raw data into the
specified file path, leaving me with invalid PCX files. The actual format, as stored in the PAK, is like so:

```c
struct {
  // Width and height of the data:
  int columns, rows;
  // The data itself (pretend):
  unsigned char[columns * rows];
  // The width, height, and x-y offset
  // of the desired sub-image:
  int width, height, offset_x, offset_y;
};
```

</aside>

So, we need to press <kbd>G</kbd> to switch the game mode, and then <kbd>I</kbd> (I suspect for **I**nsert or
**I**nspect) <span class="aside-attn">will show the editor controls</span>! Once editor mode is active you can also
press <kbd>E</kbd> to **E**dit door and entity instances, or <kbd>T</kbd> to edit the focused object's **T**ype. Let's
give it a go:
{:style="clear: both;"}

{% capture editor_mode %}{{ "/images/reverse-engineering-a-win95-game-III/editor-mode-opt.png" | absolute_url }}{% endcapture %}
{% capture editor_mode_thumb %}{{ "/images/reverse-engineering-a-win95-game-III/editor-mode-thumb.png" | absolute_url }}{% endcapture %}
{% include popimg.html src=editor_mode thumb=editor_mode_thumb alt="Editor Mode" %}

</div>

## Next Steps

If there's ever going to be a follow-up to this three-part post, there's a few things I'd like to try:

* Add modern <kbd>W</kbd><kbd>A</kbd><kbd>S</kbd><kbd>D</kbd> keyboard controls &mdash; the current control scheme is
  <kbd>A</kbd>/<kbd>Z</kbd> for forward/back, and <kbd>Shift</kbd>/<kbd>X</kbd> for left/right.
* Get the game running on modern versions of Windows &mdash; I'd like to do this by getting it running "well" on each
  newer OS starting with Windows XP and moving forward.
* Properly handle texture files when extracting &mdash; PAKrat (from part I) doesn't extract the PCX textures correctly.]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, weâll investigate whether we can enter an âeditor modeâ, hinted at within the strings contained within the program. Thereâs even a â¨surprise endingâ¨ that I didnât see coming!]]></summary></entry><entry><title type="html">Colloquial Skeuomorphisms</title><link href="https://sidneys1.github.io/Skeuomorphisms/" rel="alternate" type="text/html" title="Colloquial Skeuomorphisms" /><published>2023-08-18T00:00:00-04:00</published><updated>2023-08-18T00:00:00-04:00</updated><id>https://sidneys1.github.io/colloquial-skeuomorphisms</id><content type="html" xml:base="https://sidneys1.github.io/Skeuomorphisms/"><![CDATA[<!-- cSpell:words skeuomorph -->
<!-- cSpell:ignore ËskyoÍoÉËmÃ´rf -->

Language is strange &ndash; why do we say "hang up the phone" even when using a cell phone? This page documents some
examples of "skeuomorphisms" in our common vernacular.

I'll be updating this page as I come across more!

<!--more-->

<div class="card float" markdown=1>
<ruby>*skeuomorph*<rp>(</rp><rt>[ËskyoÍoÉËmÃ´rf]</rt><rp>)</rp></ruby>
: An object or feature which imitates the design of a similar artifact made from another material.
: **In computing:** An element of a graphical user interface which mimics a physical object.
</div>

* TOC
{:toc}

# Telecommunications
---

*ð* *"<u>Hang</u> up the Phone"*
: Wall-mounted landline telephones had a hook to "hang" the receiver on.

*ð£ï¸* *"<u>Call</u> me"*
: You don't have to shout anymore.

*âï¸* (Re)<u>dial</u>
: Early telephones had an actual rotary dial to select the numbers you would call.

*ðï¸* *"The Phone is <u>Ringing</u>"*
*ð* <u>Ring</u>tone
: Early telephones had an actual bell that would ring when a specific "[ringing tone][ringing-tone]" was received (in
  North America this is alternating 440 Hz and 480 Hz tones). The ringing tone required to set off the bell
  [differed from region to region][national-characteristics]. The term "ringtone" eventually became synonymous with
  being able to [change the sound][personalized-ringtones] of an electronic telephone's "ringing" audio.

[ringing-tone]: https://en.wikipedia.org/wiki/Ringing_tone
[national-characteristics]: https://en.wikipedia.org/wiki/Ringing_tone#National_characteristics
[personalized-ringtones]: https://en.wikipedia.org/wiki/Ringing_tone#Personalized_ringing_tones

# Computers and the Internet
---

*âï¸* <u>Cut</u> and <u>Paste</u>
: Editing on paper involved actual scissors and glue.

*ð°* Message <u>Board</u>
: A community message board is often a literal corkboard.

*ð* *"Get On<u>line</u>"*
: Before Wi-Fi, computers needed to be physically connected to a phone line and modem to access the Internet.

*ð§* Email <u>CC</u>
: To send a physical letter in duplicate, you would need to create a <dfn><abbr title="Carbon Copy">CC</abbr></dfn>,
  or "[Carbon Copy][cc]".

[cc]: https://en.wikipedia.org/wiki/Carbon_copy

# Media and Electronics
---

*âª* Re<u>wind</u>
*ð¼* *"<u>Tape</u> it"*
*ð¹* *"Get it on <u>Tape</u>"*
: Cassettes, the primary storage medium before optical disks, contained magnetic tape wound around two spindles.

*ð»* *"Stay <u>Tune</u>d"*
*ðï¸* <u>Tune</u> In / <u>Tune</u> Out
: Radio and television broadcasts require frequency matching (just like tuning an instrument).

*ð´* <u>Turn</u> On/Off
: Most early electronic devices featured a rotating power selector.

# Home
---

*ð§* <u>Ice</u>box
: Before refrigeration, keeping food fresh involved actual blocks of ice.

*ðª* *"<u>Turn</u> out the Light"*
: Gas and oil lamps had a dial which, when turned, would snuff out the flame.

# Transportation
---

*ð* *"<u>Roll</u> the Window Up/Down"*
: Sliding automobile passenger windows used to be operated via a hand crank.]]></content><author><name>Sidneys1</name></author><category term="other" /><category term="linguistics" /><summary type="html"><![CDATA[Language is strange â why do we say âhang up the phoneâ even when using a cell phone? This page documents some examples of âskeuomorphismsâ in our common vernacular. Iâll be updating this page as I come across more!]]></summary></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-03-16T00:00:00-04:00</published><updated>2023-03-16T00:00:00-04:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun Ghidra -->
<!-- cSpell:ignore sspyth MATHINV mbscpy strcmp -->

I recently rediscovered an obscure 1997 Simon & Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: [Math Invaders](https://archive.org/details/MathInvaders). In this part, we'll investigate disassembling and
reverse engineering the binary to identify an undocumented settings file format.

<!--more-->
---

As our reverse engineering tool of choice, we'll be using the National Security Agency's
[Ghidra](https://ghidra-sre.org/). This powerful tool allows us to disassemble the `MATHINV.EX_` binary that is bundled
on the disk. The first bit of information we get when ingesting the binary in Ghidra is an "Import Results Summary"
dialog, with information about the binary itself. Here's some excerpts:

```
Compiler:                     visualstudio:unknown
Debug Misc:                   Release/sspyth.exe
PDB File:                     sspyth.pdb
PE Property[FileDescription]: SSPYTH MFC Application
```

Interesting - the project in visual studio seems to have originally been called "sspyth", short for "S.S. Pythagoras",
the name of the protagonist's ship within the game. Let's try and identify the entrypoint. This is a Windows MFC program,
which means the actual entrypoint is "runtime code" that will identify the main MFC module within the program and
initialize it. So instead of looking for this entrypoint (which Ghidra finds for us and names `entry`), we will try and
find the main MFC module initializer by searching for something we know happens early in the program's execution.

When first run, the game checks that DirectX, DirectPlay, and the game CD are inserted. Using Ghidra's
<kbd class="menu"><kbd>Search</kbd><kbd>For Strings...</kbd></kbd> tool we'll find the "Please insert CD" message.

![string search]({{ '/images/reverse-engineering-a-win95-game-II/string-search.png' | absolute_url }})

Clicking the result will select the data in the CodeBrowser, and right-clicking the automatically created symbol allows
us to click <kbd class="menu"><kbd>References</kbd><kbd>Find references to s_Please_insert...</kbd></kbd> to find all
references to this particular value within the codebase. Doing so brings up one result at 0x0042cb86. Clicking the
result takes us to the relevant address. The disassembly shows us a function called `FUN_0042ca2f(CWinApp *param_1)`,
which we'll renamed to `CWinAppEntrypoint`. As this function is not called anywhere else in the code, we can be fairly
confident that this is only called by runtime code that gets its address programmatically.

<details markdown="1">
<summary>Disassembly of <code>CWinAppEntrypoint</code> (click to expand).</summary>

```c
void CWinAppEntrypoint(CWinApp *param_1) {
  int iVar1;
  undefined4 *puVar2;
  FILE *_File;
  undefined4 local_28c;
  BYTE local_21c [264];
  char local_114 [260];
  void *pvStack_10;
  undefined *puStack_c;
  undefined4 local_8;

  local_8 = 0xffffffff;
  puStack_c = &LAB_0042cc3d;
  pvStack_10 = ExceptionList;
  ExceptionList = &pvStack_10;
  CWinApp::Enable3dControlsStatic(param_1);
  CWinApp::LoadStdProfileSettings(param_1,4);
  FID_conflict:__mbscpy((char *)local_21c,&DAT_00495378);
  FUN_0042d603(s_Version_0049537c,local_21c);
  iVar1 = _strcmp(s_1.00-Rel_00495384,(char *)local_21c);
  if (iVar1 != 0) {
    AfxMessageBox(s_Game_not_installed,_run_the_setu_00495390,0x10,0);
    FUN_0042cc47();
    return;
  }
  FID_conflict:__mbscpy((char *)local_21c,&DAT_004953bc);
  FID_conflict:__mbscpy(local_114,&DAT_004953c0);
  GetPrivateProfileStringA
            (s_MazePath_004953dc,s_pakpath_004953d4,&DAT_004953d0,local_114,0x104,
             s_.\3d.ini_004953c4);
  puVar2 = (undefined4 *)_strlen(local_114);
  if (puVar2 == (undefined4 *)0x0) {
    FUN_0042d603(s_pakpath_004953e8,local_21c);
    FID_conflict:_strcat((char *)local_21c,s_game.pak_004953f0);
    while (_File = FID_conflict:__wfopen((char *)local_21c,&DAT_004953fc), _File == (FILE *)0x0)  {
      iVar1 = AfxMessageBox(s_Please_insert_the_Math_Invaders_C_00495400,0x11,0);
      if (iVar1 == 2) {
        FUN_0042cc47();
        return;
      }
    }
    puVar2 = (undefined4 *)_fclose(_File);
  }
  AfxSetAllocStop(0x53b0);
  local_8 = 0;
  if (puVar2 == (undefined4 *)0x0) {
    local_28c = 0;
  }
  else {
    local_28c = FUN_0042e186(puVar2);
  }
  local_8 = 0xffffffff;
  *(undefined4 *)(param_1 + 0x1c) = local_28c;
  FUN_0042e2e0(*(int **)(param_1 + 0x1c));
  FUN_0042cc47();
  return;
}
```

</details>

Alright! We can already see some useful things here. `FUN_0042d603` gets a value from the game's Registry key, so that
line just checks that the program is installed. In fact, we can just rename `FUN_0042d603` to `GetValueFromRegistry`.
Further down we see a `GetPrivateProfileStringA ` call. I had to look this function up as it's somewhat esoteric, but it
and the whole `GetPrivateProfile*` still supported in today's Win32 API!

> Retrieves a string from the specified section in an initialization file.
> <cite>[`GetPrivateProfileStringA` function (`winbase.h`) - Win32 apps | Microsoft Learn][prof-string-a]</cite>

This description undersells this singular function call - when called the `GetPrivateProfileXxx` family of APIs will
open and read a given `*.ini` file, parse it, and return the value in the specified `[section]` and `key=`. If the given
file does not exist, it will return the default value.

And, using Ghidra's Symbol Tree, we can find all calls to the `GetPrivateProfileXxx` APIs and the parameters used. Doing
so provides us with this list of parameters, expected to be found in `.\3d.ini` (relative to the CWD). These are mostly
loaded in another function called by `CWinAppEntrypoint`: `FUN_0042e2e0`, which we can rename to `LoadSettings`:

```ini
[MazePath]
pakpath =       ; String
datapath =      ; String
diskpath =      ; String
lastfile =      ; String
room =          ; String
usepakfile = 0  ; Integer. In practice it is used as a boolean,
                ; where 0 is FALSE, and anything else is TRUE.

[Render]
fullscreen = 1  ; Integer
winsize = 10    ; Integer
textdetail = 10 ; Integer
```

Let's see if this works. Let's just create a `C:\MathInvaders\3d.ini` and as a simple test, we'll set
`[Render]`&rarr;`fullscreen` to `0`, and...

![It works! ...sorta.]({{ '/images/reverse-engineering-a-win95-game-II/guest%20os_000.png' | absolute_url }})

Well... Sort of. Ok, the game doesn't actually run, and there's a weird white space at the bottom of the window. But
we've proven it works! But what's intriguing to me is the `[MazePath]` section of the config... I wonder what we could
use *those* settings for. In particular, the `fullscreen` setting is loaded into a global variable that we'll call
`gFullscreen` - this factors into to code processing some very interesting strings about an "editor mode"... I wonder
if we can activate that?

```c
if (gFullscreen == 0) {
	if (*(int *)(param_1 + 0x334) == 0) {
		_sprintf(local_104,s__Math_Invaders_-_NO_ACTIVE_LEVEL_0049585c);
	}
	else {
		__splitpath(&DAT_0049c7c8,local_1fc,local_1f4,local_12c,local_10c);
		_sprintf(local_104,s__Math_Invaders_-_'%s'_004957f4,local_12c);
		if (*(int *)(param_1 + 0x3714) == 0) {
			FID_conflict:_strcat(local_104,s__-_***_EDITOR_MODE_***_00495810);
		}
		iVar1 = CSplitterWnd::IsTracking((CSplitterWnd *)(param_1 + 0x2e0));
		if (iVar1 == 0) {
			FID_conflict:_strcat(local_104,s__-_Running..._0049584c);
		}
		else {
			FID_conflict:_strcat(local_104,s__-_Paused,_press_'p'_to_resume._00495828);
		}
	}
	CWnd::SetWindowTextA(param_1,local_104);
}
```

Next time!


<!-- References -->

[prof-string-a]: https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getprivateprofilestringa]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, weâll investigate disassembling and reverse engineering the binary to identify an undocumented settings file format.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-02-23T00:00:00-05:00</published><updated>2023-02-23T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÃ -->

I recently rediscovered an obscure 1997 Simon & Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: [Math Invaders](https://archive.org/details/MathInvaders). Let's reverse engineer the game a bit and see what
we can find; are there any secrets, unused assets, etc?

<!--more-->
---

# Poking around the CD

Installing Math Invaders merely copies the EXE to `C:\MathInvaders` (or your chosen installation path). When run, the
executable checks if you have the CD inserted (searching for a path stored in the registry during installation). So in
practice, all of the resources can be found on the CD and the CD only.

```
ð DIRECTX
ð PAKS
ð WIN.31
ð WIN.95
ð AMOVIE.EX_
ð§ AUTORUN.INF
ð DSETUP.DLL
ð DSETUP6E.DLL
ð DSETUP6J.DLL
ð DSETUPE.DLL
ð DSETUPJ.DLL
âï¸ LAUNCH.EXE
ð MATHINV.EX_
ð README.TXT
âï¸ SETUP.EXE
âï¸ SPRINT.EXE
ð SSPUNINS.EX_
```

So, we have a few directories. `PAKS` includes the game resources, while the others are all installer files for a
bundled DirectX 4.0 and "Sprint Internet Passport 3.01" (which seems to be an AOL-like service). The remaining files are
largely DLLs to support the various installers, as well as a readme for our game.

<details markdown="1">
<summary>Readme Contents, for those interested.</summary>

```
{% include_relative _readme.txt %}
```

</details><br/>


Upon installing `MATHINV.EX_` is copied to the installation directory and renamed to `MATHINV.EXE`, of course. Let's
overlook this file for now and instead take a look in the `PAKS` directory:

```
ð LEVELS
ð VIDEO
ð GAME.PAK
```

`LEVELS` contains `LP##.PAK` files, where `##` is a two-digit number from 01 to 27. Video contains (unsurprisingly)
several AVI files, as this game has a few full motion video "FMV" sequences at startup and shutdown.

# PAK Files and `pakrat`

Let's poke at `GAME.PAK` in a hex editor. The first ~5K of the `GAME.PAK` file looks like this:

```
0000h  56 00 00 00 57 61 76 65 73 5C 43 6C 69 63 6B 2E  V...Waves\Click.
0010h  77 61 76 00 00 00 00 00 00 00 00 00 00 00 00 00  wav.............
0020h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0030h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0040h  00 00 00 00 20 17 00 00 42 6D 70 73 5C 43 75 72  .... ...Bmps\Cur
0050h  73 6F 72 2E 62 6D 70 00 00 00 00 00 00 00 00 00  sor.bmp.........
0060h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0070h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0080h  00 00 00 00 00 00 00 00 E8 32 00 00 42 6D 70 73  ........Ã¨2..Bmps
0090h  5C 46 6F 6E 74 2E 62 6D 70 00 00 00 00 00 00 00  \Font.bmp.......
00A0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00B0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00C0h  00 00 00 00 00 00 00 00 00 00 00 00 20 4B 00 00  ............ K..
00D0h  42 6D 70 73 5C 49 68 69 67 68 73 63 6F 2E 62 6D  Bmps\Ihighsco.bm
00E0h  70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  p...............
00F0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0100h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
```

And the remainder of the file is various binary data. In fact, immediately after the ~5K run above we see the following
header, immediately recognizable as a [Waveform Audio File Format](https://en.wikipedia.org/wiki/WAV) header:

```
1720h  52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20  RIFFÃ...WAVEfmt
```

This lines up with the file extension of the first string we see at the beginning of the file, `Waves\Click.wav`. A
little deduction shows that the ~5K prelude area is structured as follows:

```cpp
struct prelude {
    uint32_t count;
    struct entry {
        char name[64];
        uint32_t offset;
    } entries[];
}
```

Or, in english, we have first four bytes (a little-endian unsigned integer) representing the number of resource headers
in the list. This is followed by that number of entries, each of which is a 64-character ASCII string followed by a
four-byte offset into the PAK file where the data for that file resides. We use a little C trick here called a
"[flexible array member](https://en.wikipedia.org/wiki/Flexible_array_member)" to index past the end of our C struct.
Note that each entry doesn't need to store the length of the file - this is calculated from the offset of the next file
in the list or (in the case of the last entry) the end of the `PAK` file itself.

Armed with this knowledge, let's write a simple program to "extract" `PAK` files, which we'll call `pakrat`. The program
will take the targeted `PAK` file as a command-line argument and extract the contents to the current working directory.
Let's get started with this:

```cpp
#include <iostream>
#include <fstream>
#include <cstring>
#include <cerrno>

int main(int argc, char* argv[]) {
	if (argc < 2) {
		std::cerr << "Usage: " << argv[0] << " FILE\n";
		return 1;
	}
	std::cout << ("PAKrat 0.1\n");


	std::ifstream file(argv[1], std::fstream::in | std::fstream::binary);
	if (!file) {
		std::cerr << "Error opening '" << argv[1] << "': " << std::strerror(errno) << "\n";
		return 1;
	}

	file.seekg(0, std::ifstream::end);
	size_t file_size = file.tellg();
	std::cout << "File '" << argv[1] << "' size: " << file_size << " Bytes\n";
	file.seekg(0, std::ifstream::beg);
}
```

Running it against `GAME.PAK` produces:

```
PAKrat 0.1
File '../GAME.PAK' size: 22984537
```

So far so good! Continuing on (you'll also need to `#include <iomanip>`, and add the `struct prelude` we defined
before):

```cpp
// Let's start by getting the number of entries, so we know how large a buffer to allocate
char* buffer = (char*)malloc(sizeof(uint32_t));
file.read((char*)buffer, sizeof(uint32_t));
uint32_t count = *(uint32_t*)buffer;
std::cout << "File contains " << *(uint32_t*)buffer << " entries:\n";

// Reallocate to the appropriate size.
buffer = (char*)realloc((void*)buffer, sizeof(prelude) + (sizeof(prelude::entry) * count));
file.read(buffer + 4, sizeof(prelude::entry) * count);

// Interpret by casting to a prelude, then print all the files and their offsets.
prelude* header = (prelude*)buffer;
for (auto i = 0; i < header->count; ++i) {
	std::cout << "0x" << std::hex << std::setw(8) << std::setfill('0') << header->entries[i].offset
			  << " " << header->entries[i].name << "\n";
}
```

We now output:

```
PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav
0x000032e8 Bmps\Cursor.bmp
0x00004b20 Bmps\Font.bmp
0x00009a58 Bmps\Ihighsco.bmp
--- âï¸ ---
```

Excellent! Let's refactor that last for loop a bit though:

```cpp
// Interpret by casting to a prelude, gather, then print all the files and their offsets.
prelude* header = (prelude*)buffer;
std::vector<std::tuple<char*, uint32_t, uint32_t>> entries;
for (auto i = 1; i < header->count; ++i) {
	auto& entry = header->entries[i];
	auto &prev = header->entries[i - 1];
	entries.push_back(std::make_tuple(prev.name, prev.offset, entry.offset - prev.offset));
}
auto& last = header->entries[header->count - 1];
entries.push_back(std::make_tuple(last.name, last.offset, file_size - last.offset));
```

There, now we have made a more manageable list, including sizes. Let's add some code to print it out. Sorry for the
`std::ios` cruft, formatting C++ streams is a constant annoyance:

```cpp
for (auto& entry : entries) {
	std::ios old_state(nullptr);
	old_state.copyfmt(std::cout);
	std::cout << "0x" << std::hex << std::setw(8) << std::setfill('0') << std::get<1>(entry)
			  << " " << std::get<0>(entry) << " ";
	std::cout.copyfmt(old_state);
	std::cout << std::get<2>(entry) << " Bytes\n";
}
```

```
PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- âï¸ ---
```

Nearly there! The last push is just to extract the files (you'll want to add `#include <filesystem>` for filesystem
operations and `#include <algorithm>` for `std::replace`)!

```cpp
// Extract files
for (auto& entry : entries) {
	char* path_str = std::get<0>(entry);
	uint32_t offset = std::get<1>(entry);
	uint32_t length = std::get<2>(entry);

	// Replace Windows path separators
	std::replace(path_str, path_str + strlen(path_str), '\\', '/');

	std::filesystem::path path(path_str);
	auto filename = path.filename();
	auto parent = path.parent_path();

	// Create parent folder(s) (if needed)
	if (!parent.empty() && !std::filesystem::exists(parent)) {
		std::cout << "Creating directory " << std::quoted(parent.c_str()) << '\n';
		std::filesystem::create_directories(parent);
	}

	std::cout << "Creating file " << std::quoted(path_str) << '\n';
	std::ofstream out_file(path, std::fstream::out | std::fstream::binary);
	if (!out_file) {
		std::cerr << "Error creating file: " << std::strerror(errno) << "\n";
		continue;
	}

	// Seek to the correct location and copy the file in 1KiB chunks
	file.seekg(offset, std::ifstream::beg);
	uint32_t to_read = length;
	do {
		char buffer[1024];
		auto chunk = std::min((size_t)to_read, sizeof(buffer));
		to_read -= chunk;
		file.read(buffer, chunk);
		out_file.write(buffer, chunk);
	} while (to_read > 0);
}
```

```
PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- âï¸ ---
Creating directory "Waves"
Creating file "Waves/Click.wav"
Creating directory "Bmps"
Creating file "Bmps/Cursor.bmp"
Creating file "Bmps/Font.bmp"
Creating file "Bmps/Ihighsco.bmp"
--- âï¸ ---
```

And that's it! You can find the full source code [in this GitHub repository](https://github.com/Sidneys1/PAKrat). Here's
a sample of an extracted asset! This is `Waves\Glose2a.wav`, an one of 3 randomized clips that play when you lose a
level:

{% assign wav = '/audio/reverse-engineering-a-win95-game-I/Glose2a.wav' | absolute_url %}
{% include embed_audio.html src=wav mimetype="audio/x-wav" %}


There are also GUI elements in `Bmps`, for example the weapon sprite sheet `Weapons.bmp`:

![weapon sprite sheet]({{ '/images/reverse-engineering-a-win95-game-I/Weapons.bmp' | absolute_url }})

There's even an exit splash screen graphic that is unused, that indicates that the game probably had a shareware or beta
release:

![beta exit splash]({{ '/images/reverse-engineering-a-win95-game-I/Exit1.bmp' | absolute_url }})

-----

Now, attentive readers may have noticed something; If the `PAK` prelude is 4+(68Ã86)=5852 Bytes, but the first asset
(`Waves\Click.wav`) starts at `0x1720` (Byte 5920), then what is in the interstitial 68 bytes? Let's take a look:

* Last entry <span class="highlight-1">name</span> and <span class="highlight-2">offset</span>.
* Fist <span class="highlight-3">file data</span>.

<div class="language-plaintext highlighter-rouge">
<div class="highlight">
<pre class="highlight">
<code>1690h  00 00 00 00 D5 91 50 01 <span class="highlight-1">57 61 76 65 73 5C 47 6C</span>  ....ÃâP.<span class="highlight-1">Waves\Gl</span>
16A0h  <span class="highlight-1">6F 73 65 33 62 2E 77 61 76 00 00 00 00 00 00 00</span>  <span class="highlight-1">ose3b.wav.......</span>
16B0h  <span class="highlight-1">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span class="highlight-1">................</span>
16C0h  <span class="highlight-1">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span class="highlight-1">................</span>
16D0h  <span class="highlight-1">00 00 00 00 00 00 00 00</span> <span class="highlight-2">B7 21 5A 01</span> 00 00 00 00  <span class="highlight-1">........</span><span class="highlight-2">Â·!Z.</span>....
16E0h  BC 42 59 81 00 00 00 00 8C 83 59 81 8C 83 59 81  Â¼BY.....ÅÆY.ÅÆY.
16F0h  88 83 59 81 3B AE F7 BF 00 20 56 81 00 00 00 00  ËÆYï¿½;Â®Ã·Â¿. V.....
1700h  8C 83 59 81 DB AE F7 BF 8C 83 59 81 DE DA F7 BF  ÅÆY.ÃÂ®Ã·Â¿ÅÆY.ÃÃÃ·Â¿
1710h  8C 83 59 81 8C 83 59 81 E2 13 F7 BF 59 B7 5E 01  ÅÆY.ÅÆY.Ã¢.Ã·Â¿YÂ·^.
1720h  <span class="highlight-3">52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20</span>  <span class="highlight-3">RIFFÃ...WAVEfmt</span></code>
</pre>
</div>
</div>

And honestly... I don't know. This space being the same length as the other asset headers makes me think whatever they
used to create these `PAK` files has an off-by-one error, and just wrote an extra entry past the end of their buffer
into uninitialized (or maybe stack/heap) memory. Or, it could be a tightly packed block of some unknown flags or
parameters to the game engine.

### A Short Aside About `PAK`

Digging further into the `LP##.PAK` file for specific levels (in this case, `LP01.PAK`) reveals additional asset types:

* `ð Anims\`
  * ð `Anims.lst`
* `ð Levels\`
  * ð `GameData.dat`
  * ð `Lp01.lev`
* `ð Mazes\`
  * ð `LP01\`
    * ð `lp01.lws`
    * ð `rlp01.wad`
    * ð `wlp01.bsp`
* ð `Objects\`
  * _A variety of `.bsp`/`.BSP` files._
* ð `Waves\`
  * _A variety of `.WAV` files._
* ð `anims\` _(note the case sensitivity)_
  * _58 directories, themselves containing `.pcx` and `.pcxF` files._
* ð `textures\`
  * ð `Lp01.lst`
  * _1345 additional `.pcx` and `.pcxF` files._

Now wait a second... `.pak`, `.bsp`, `.wad`... Sounds an awful lot like
[id Tech 2](https://en.wikipedia.org/wiki/Id_Tech#id_Tech_2) (the Quake engine)! However, digging into it, id's `pak`
format is different, and these `wad` and `bsp` files won't open in any Tech 2 editors I can find. So perhaps the
developers of this engine merely took a lot of inspiration, and/or heavily modified and simplified these formats away
from the Tech 2 specifications.

This engine is almost a midway point (in capability) between Tech 1 (DOOM) and Tech 2 (Quake). It supports angled floors
and vertical viewing angle like Quake, but also only supports sprite-based creatures like Doom.

----

In the next part, we'll explore trying to reverse engineer where this game stores its settings, and see if we can't
uncover some secrets in the binary itself.]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. Letâs reverse engineer the game a bit and see what we can find; are there any secrets, unused assets, etc?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PowerShell Profile Instant Prompt</title><link href="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html" rel="alternate" type="text/html" title="PowerShell Profile Instant Prompt" /><published>2022-09-29T00:00:00-04:00</published><updated>2022-09-29T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html"><![CDATA[Recently I began using [Oh My Posh](https://ohmyposh.dev/) for PowerShell 7+ (pwsh). One thing I noticed however is that
it takes upward of a second to activate in my pwsh `$profile`. Let's dig in and see if we can't improve that.

<!--more-->

First, let's establish a baseline - after [installing Oh My Posh](https://ohmyposh.dev/docs/installation/windows) (say,
with WinGet) we're instructed to add the line `oh-my-posh init pwsh | Invoke-Expression` to our pwsh `$profile`. We can
investigate the cost of this with a handy pwsh package `PSProfiler`:

```powershell
Install-Module PSProfiler;
& pwsh.exe -NoProfile -Command {Import-Module PSProfiler; Measure-Script $profile;}

# Count  Line       Time Taken Statement
# -----  ----       ---------- ---------
#     1     1    00:00.0734463 Import-Module PSReadLine;
#     1     2    00:00.0234282 Set-PSReadLineOption -EditMode Windows
#     1     3    00:00.0011258 Set-PSReadLineOption -PredictionSource HistoryAndPlugin
#     1     4    00:00.0016107 Set-PSReadLineOption -PredictionViewStyle InlineView
#     0     5    00:00.0000000
#     1     6    00:00.3770726 oh-my-posh init pwsh | Invoke-Expression
#     1     7    00:00.0005995 Enable-PoshTransientPrompt
#     1     8    00:00.0005577 Enable-PoshLineError
```

You can see that out of all the commands I have in my profile, oh-my-posh init is taking an order of magnitude longer
than the others. When my system is under load and I _really need that terminal now_, this causes friction. Let's see
what exactly `oh-my-posh init pwsh` is outputting that gets interpreted by `Invoke-Expression` (note that I've inserted
`%LOCALAPPDATA%` and `<some config path>` for brevity):

```powershell
oh-my-posh init pwsh
# (@(& '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='<some config path>' --print) -join "`n") | Invoke-Expression
```

It looks like it just calls itself again! We can skip that first step entirely by just copy-and-pasting this output into
our original profile. Let's measure things again now that we've made this change:

```powershell
& pwsh.exe -NoProfile -Command {Import-Module PSProfiler; Measure-Script $profile;}

# Count  Line       Time Taken Statement
# -----  ----       ---------- ---------
#     1     1    00:00.0790705 Import-Module PSReadLine;
#     1     2    00:00.0279149 Set-PSReadLineOption -EditMode Windows
#     1     3    00:00.0010231 Set-PSReadLineOption -PredictionSource HistoryAndPlugin
#     1     4    00:00.0011608 Set-PSReadLineOption -PredictionViewStyle InlineView
#     0     5    00:00.0000000
#     2     6    00:00.0694422 (@(& '%LOCALAPPDATA%/Programs/oh-my-posh init pwsh ...
#     1     7    00:00.0006244 Enable-PoshTransientPrompt
#     1     8    00:00.0005833 Enable-PoshLineError

& pwsh.exe -NoProfile -Command {Measure-Command { . $profile };}

# ...
# TotalMilliseconds : 463.3328
```

We've successfully brought our oh-my-posh invocation down an order of magnitude and shaved a couple hundred milliseconds
off of our profile initialization. But... we can do better. A cool feature of
[powerlevel10k](https://github.com/romkatv/powerlevel10k) is "instant prompt", which allows a prompt to show
immediately, even while your profile is still loading. Let's reproduce this behavior in pwsh.

```powershell
# In our $profile...
Import-Module PSReadLine;

function prompt {
  if (Test-Path variable:global:ompjob) {
    # snip
  }
  $global:ompjob = Start-Job {(@(& '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='<some config path>' --print) -join "`n")};
  write-host -ForegroundColor Blue "Loading `$profile in the background..."
  Write-Host -ForegroundColor Green -NoNewline " î¿ $($executionContext.SessionState.Path.CurrentLocation) ".replace($HOME, '~');
  Write-Host -ForegroundColor Red -NoNewline "ááá¢"
  return " ";
}
```

First, we create a new `prompt` function; unsurprisingly this is the function that pwsh calls to render your prompt. Our
custom `prompt` function will first check if there's a global variable named `ompjob` - this is going to be a background
job in which we execute oh-my-posh. The first time `prompt` runs this variable will be unset, and so our `if` will be
skipped, and I've snipped it for readability. We'll come back to it.

Now, if the variable is unset, we'll set it to a new background job that executes our `oh-my-posh` invocation, but
without the `Invoke-Expression`. This will let the job's output be the text printed by oh-my-posh that we can consume
with `Invoke-Expression` later. Finally, we print out a nice little prompt - not as fancy as `oh-my-posh`'s, but it'll
do, _and_ it'll display almost instantly.

Finally, let's fill in the `if`-block for when the global variable _is_ set (on the second invocation of `prompt`):

```powershell
Import-Module PSReadLine;

function prompt {
  if (Test-Path variable:global:ompjob) {
    Receive-Job -Wait -AutoRemoveJob -Job $global:ompjob | Invoke-Expression;
    Remove-Variable ompjob -Scope Global;
    Enable-PoshTransientPrompt
    Enable-PoshLineError

    Set-PSReadLineOption -EditMode Windows
    Set-PSReadLineOption -PredictionSource HistoryAndPlugin
    Set-PSReadLineOption -PredictionViewStyle InlineView

    [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding
    return prompt;
  }
  # snip
}
```

First, we get the output from the `ompjob`, and we `Invoke-Expression` it. In doing so, `oh-my-posh` redefines our
`prompt` function. We'll then initialize some other settings within `PSReadLine` and `oh-my-posh`. Finally, we return
whatever `oh-my-posh` produces in its redefined `prompt` function, and we're done! Let's profile this as well:

```powershell
& pwsh.exe -NoProfile -Command {Import-Module PSProfiler; Measure-Script $profile;}

# Count  Line       Time Taken Statement
# -----  ----       ---------- ---------
#     1     1    00:00.0789758 Import-Module PSReadLine;
#     0     2    00:00.0000000
#     0     3    00:00.0000000 function prompt {
#     0     4    00:00.0000000   if (Test-Path variable:global:ompjob) {
#     0     5    00:00.0000000     Receive-Job -Wait -AutoRemoveJob -Job $global:ompjob | Invoke-Expression;
#     0     6    00:00.0000000     Remove-Variable ompjob -Scope Global;
#     0     7    00:00.0000000     Enable-PoshTransientPrompt
#     0     8    00:00.0000000     Enable-PoshLineError
#     0     9    00:00.0000000
#     0    10    00:00.0000000     Set-PSReadLineOption -EditMode Windows
#     0    11    00:00.0000000     Set-PSReadLineOption -PredictionSource HistoryAndPlugin
#     0    12    00:00.0000000     Set-PSReadLineOption -PredictionViewStyle InlineView
#     0    13    00:00.0000000
#     0    14    00:00.0000000     [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding
#     0    15    00:00.0000000     return prompt;
#     0    16    00:00.0000000   }
#     0    17    00:00.0000000   $global:ompjob = Start-Job {(@(& '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh ...
#     0    18    00:00.0000000   write-host -ForegroundColor Blue "Loading `$profile in the background..."
#     0    19    00:00.0000000   Write-Host -ForegroundColor Green -NoNewline " î¿ $($executionContext.SessionState.Path.CurrentLocation) ".replace($HOME, '~');
#     0    20    00:00.0000000   Write-Host -ForegroundColor Red -NoNewline "ááá¢"
#     0    21    00:00.0000000   return " ";
#     0    22    00:00.0000000 }

& pwsh.exe -NoProfile -Command {Measure-Command { . $profile };}

# ...
# TotalMilliseconds : 101.5553
```

Wow! We've almost completely eliminated the overhead of importing our profile, and pushed that execution time into the
background while a user is typing in their first prompt and digesting its output. I'd move the
`Import-Module PSReadLine` into the background as well, except that module doesn't import correctly when you do this.]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="powershell" /><summary type="html"><![CDATA[Recently I began using Oh My Posh for PowerShell 7+ (pwsh). One thing I noticed however is that it takes upward of a second to activate in my pwsh $profile. Letâs dig in and see if we canât improve that.]]></summary></entry><entry><title type="html">How I Built This Website, And How to Do It Yourself</title><link href="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html" rel="alternate" type="text/html" title="How I Built This Website, And How to Do It Yourself" /><published>2022-08-22T00:00:00-04:00</published><updated>2022-08-22T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html"><![CDATA[Sidneys1.com is built statically using [Jekyll](https://jekyllrb.com/), and then published on the world wide web, GitHub
Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Let's walk through
it step by step. We'll be looking into (over the course of several posts):

* Building a website with Jekyll
* Hosting on NearlyFreeSpeech.net
* Customizing the site layout and adding useful features
* Hosting on GitHub Pages
* Hosting on IPFS
* Hosting on Tor

<!--more-->

## Getting Started With Jekyll

I use a Windows PC, and I find that the Jekyll environment is easier to set up under the
[Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about), so that's what I'll be using going
forward in this post. First, we'll install Ruby via your package manager - Ubuntu 20.04 has Ruby 2.7 available on apt
via `apt install ruby`. Next we'll use the Ruby package manager, `gem` to install both Jekyll and Bundler:
`gem install bundler jekyll`. Finally, you can create a new Jekyll site with `jekyll new sitename`.

Once inside the new site folder, you can generate and serve your page with `bundle exec jekyll serve`! This will create
a development server on `http://localhost:4000`. Let's quickly talk about how Jekyll works:

1. You create Markdown or HTML files in your site's folder for each post you wish to make.
2. Jekyll processes these files (along with some templates - we'll get to these later) to generate static HTML files.
3. These static HTML files (in `_site`) are what you want to put on your web hosting! It's all static, so you don't need
   anything fancy like server-side PHP or client-side Angular or React.

To simplify the build-preview and build-release process, let's make a simple Makefile. GNU Make is a tool that allows
you to define simple build steps, and then figures out the interdependencies between these steps for you. Let's take
a look:

```make
all: build

build: _site/

serve:
	bundle exec jekyll serve --watch --livereload --force_polling --drafts --destination _site_live/

_site/:
	env JEKYLL_ENV=production bundle exec jekyll build

clean:
	rm -rf _site/
```

Let's break down each of these sections:
* `all: build`: "all" is the default rule run when you execute `make`. This line says when "all" is run, run "build"
  first.
* `build: _site/`: when the "build" rule is run, we depend on "_site/" being built first.
* `serve: ...`: If you execute `make serve`, this rule is triggered. Make will run the `bundle exec jekyll serve ...`
  command we've listed. The parameters included are:
  * `--watch`: live-rebuild any changes made to the posts as you edit them (very useful!).
  * `--livereload`: use LiveReload to automatically refresh your browser when changes are rebuilt.
  * `--force_polling`: this is a workaround for some WSL bugs. See
    [this WSL issue](https://github.com/Microsoft/BashOnWindows/issues/216).
  * `--drafts`: include posts under the `_drafts` folder (this is where you can put in-progress posts).
  * `--destination _site_live/`: this directs the `serve` command to build the static output under a separate folder
    than the normal `_site/` rule. This way we can't accidentally publish our live preview version of the website - if
    we did, it would be broken because all links would lead to `localhost` instead of your website's URL!
* `_site/: ...`: this rule matches a file path, `_site`, which is Jekyll's output folder. Make understands file paths
  and will know that this rule will build the contents of `_site`. Note that we use `env` to tell Jekyll to use the
  ["production" environment](https://jekyllrb.com/docs/configuration/environments/).

  We'll never run this rule manually (though you could with `make _site/`), but our `build` rule depends on this
  running, and so Make will automatically run it when needed.
* `clean: ...`: Run `make clean` to invoke this rule - in our case, we just delete the `_site/` folder.

## Modifying the Jekyll Configuration

Jekyll configuration is stored in the `_config.yml` file at the root of our site. There are a couple things in here
we'll want to adjust before we publish our site to the world wide web. First of course we'll want to set a few basics:

* `title`: The name of your site (shown in the header).
* `email`: A contact email address (shown in the footer).
* `url`: This one is important - this sets the url used when clicking on absolute links to other pages within your site!
* `baseurl`: Used in conjunction with `url`. The format used is `{url}{baseurl}/path/to/page.html`. If you're hosting
  nothing but Jekyll on your website, then leave this blank.

And that's about it! We'll dig into configuration more when we talk about hosting on Tor and IPFS.

## Hosting

Ok! Now that we have a (basic) site, how do we host it? Let's start simple and look at NearlyFreeSpeech.net, whom I've
been using for years. They're cheap, no-nonsense, and don't have any crazy hidden fees. They also have support for Let's
Encrypt certificates, making SSL support both easy and automatic. Head on over and set up an account. It'll walk you
through creating a site (your website hosting) and you can even register and connect the domain name all within their
system. Eventually you'll find the settings to be able to connect with SSH - enable this and let's update our Makefile
again. Add this rule to your Makefile:

```make
publish: _site/
	rsync --itemize-changes --checksum --recursive --compress --delete _site/* $USER@ssh.phx.nearlyfreespeech.net:.
```

Let's break it down again:
* `publish: _site/`: when we execute `make publish`, we want to make sure the rule to build the `_site/` folder runs
  first.
* `rsync [...] _site/* $USER@ssh.phx.nearlyfreespeech.net:.`: we'll use rsync (a remote file-copying tool) to connect to
  our hosting via SSH, synchronizing the contents of `_site` with the root (`.`) folder of our hosting. You'll want to
  replace `$USER` with your NearlyFreeSpeech.net username, of course.

  The options we're using are:
  * `--itemize-changes`: list changes as we go (for clarity).
  * `--checksum`: rely on a file checksum (not timestamps and file size) to determine if files need to be replaced.
  * `--recursive`: recurse into subdirectories of `_site/`.
  * `--compress`: HTML is very compressible, so why not save some bandwidth?
  * `--delete`: this allows rsync to remove files on your hosting that are no longer present in your `_site` folder.
    This can be useful if you rename or delete a file that you no longer want people to be able to access.

Running `make publish` now should build your website and then prompt your for your NearlyFreeSpeech.net password to
connect with SSH. Provide your password and watch as your site is made available!

## Up Next

In future posts in this series, we'll look at making some quality of life improvements to the default Jekyll layout and
theme, as well as hosting our site on IPFS!]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="meta" /><summary type="html"><![CDATA[Sidneys1.com is built statically using Jekyll, and then published on the world wide web, GitHub Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Letâs walk through it step by step. Weâll be looking into (over the course of several posts): Building a website with Jekyll Hosting on NearlyFreeSpeech.net Customizing the site layout and adding useful features Hosting on GitHub Pages Hosting on IPFS Hosting on Tor]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>