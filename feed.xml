<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://sidneys1.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sidneys1.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sidneys1.github.io/" rel="alternate" type="text/html" /><updated>2025-01-07T14:12:20-05:00</updated><id>https://sidneys1.github.io/feed.xml</id><title type="html">Sidneys1.com on GitHub Pages</title><subtitle>A home for all my ramblings on subjects such as programming, cybersecurity, photography, videography, video games, and whatever else I see fit.</subtitle><author><name>Sidneys1</name><email>admin@sidneys1.com</email></author><entry><title type="html">HTML5 Canvas Tips</title><link href="https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips.html" rel="alternate" type="text/html" title="HTML5 Canvas Tips" /><published>2024-12-02T00:00:00-05:00</published><updated>2024-12-02T00:00:00-05:00</updated><id>https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips</id><content type="html" xml:base="https://sidneys1.github.io/programming/tips/2024/12/02/html5-canvas-tips.html"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">&lt;canvas&gt;</code> element may be the best thing to happen to HTML since <code class="language-plaintext highlighter-rouge">&lt;marquee&gt;</code>. I’ve been
<a href="https://github.com/Sidneys1/Merlin" target="_blank">using</a> it <a href="https://github.com/Sidneys1/Raina" target="_blank">a lot</a> for <a href="https://infosec.exchange/@Sidneys1/113562091539216937" target="_blank">various projects</a>
recently and thought it’d be nice to collect some of the tips and tricks I’ve learned into once place.</p>

<!--more-->

<style>
canvas {
	align-self: center;
	justify-self: center;
	margin-bottom: 15px;
}
canvas:not(.no-shadow) {
	box-shadow: 0 0 10px rgba(0,0,0,0.2);
}
.highlight-4 {
	text-shadow: 0 0 3px #00000080;
}

.grid-2 {
	display: grid;
	grid-template-columns: 1fr auto;
	gap: 1em;

	> div, > figure {
		align-self: center;
	}
}

.grid-3 {
	display: grid;
	grid-template-columns: 1fr auto auto;
	gap: 1em;

	> div, > figure {
		align-self: center;
	}
}

figcaption {
	font-weight: bold;
}

@media screen and (max-width: 1200px) {
	:is(.grid-2,.grid-2-even,.grid-3):not(.no-phone-layout) {
		display: block;
		> canvas, > figure > canvas {
			margin-left: auto;
			margin-right: auto;
			display: block;
		}
	}
}
</style>

<h2 id="pixel-art-canvas">Pixel-Art Canvas</h2>

<p>If you’ve used canvas at all you know that its <code class="language-plaintext highlighter-rouge">width="xxx"</code> and <code class="language-plaintext highlighter-rouge">height="xxx"</code> attributes define the dimensions of the
image the canvas represents, while you can use the <code class="language-plaintext highlighter-rouge">style="width: xxx; height: xxx;"</code> CSS properties to control the
size of the element on the page. If you’re trying to create a pixelated-style game, you can use the CSS to scale up a
relatively small canvas:</p>

<p><img id="favicon" src="https://sidneys1.github.io/favicon.png" style="display:none;" /></p>
<div class="grid-2">
<div>
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">"pixelated-canvas"</span>
		<span class="na">width=</span><span class="s">"50"</span> <span class="na">height=</span><span class="s">"50"</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</code></pre></div>    </div>

    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">canvas</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span> <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">pixelated-canvas</span><span class="dl">'</span><span class="p">).</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">grey</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">rect</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">stroke</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">drawImage</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">favicon</span><span class="dl">'</span><span class="p">),</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</code></pre></div>    </div>
  </div>
	<canvas id="pixelated-canvas" width="50" height="50" style="width: 300px; height: 300px;"></canvas>
	<script>
		window.addEventListener('load', e => {
			const canvas = document.getElementById('pixelated-canvas');
			if (!(canvas instanceof HTMLCanvasElement)) throw `Expected 'canvas', got '${canvas?.constructor.name}'`;
			const ctx = canvas.getContext('2d');
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 50, 50);
			ctx.rect(5, 5, 40, 40);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.drawImage(document.getElementById('favicon'), 13, 13, 24, 24);
		});
	</script>
</div>

<p>Well, isn’t that ugly! Thankfully we can fix it with the <code class="language-plaintext highlighter-rouge">image-rendering: pixelated</code> CSS property. Also note while
we’re here that the stroke seems to be two pixels wide, and semi-transparent. That’s because the point coordinates fall
on the borders between pixels, and the line is being drawn as if it was halfway between them. To overcome this, we’ll
need to offset the coordinates of the line by half a pixel. Maybe an illustration will help:</p>

<div style="display: flex;flex-wrap:wrap;justify-content:center;">
	<img class="no-shadow" alt="An illustration of attempting to draw a line on a pixel grid." src="https://sidneys1.github.io/images/html5-canvas-tips/grid-0-0.png" />
	<img class="no-shadow" alt="An illustration of attempting to draw a line on a pixel grid, offset by half a unit." src="https://sidneys1.github.io/images/html5-canvas-tips/grid-05-05.png" />
</div>

<p>So, let’s apply these fixes:</p>

<div class="grid-2">
	<div>
		<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">canvas</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span> <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
         <span class="highlight-4"><span class="nl">image-rendering</span><span class="p">:</span> <span class="n">pixelated</span><span class="p">;</span></span> <span class="p">}</span></code></pre></div>
		</div>
		<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">rect</span><span class="p">(</span><span class="mf">5<span class="highlight-4">.5</span></span><span class="p">,</span> <span class="mf">5<span class="highlight-4">.5</span></span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
<span class="c1">// ...</span></code></pre></div>
		</div>
	</div>
	<canvas id="pixelated-canvas-2" width="50" height="50" style="width: 300px; height: 300px; image-rendering: pixelated;"></canvas>
	<script>
		window.addEventListener('load', e => {
			const canvas = document.getElementById('pixelated-canvas-2');
			if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
			const ctx = canvas.getContext('2d');
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 50, 50);
			ctx.rect(5.5, 5.5, 40, 40);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.drawImage(document.getElementById('favicon'), 13, 13, 24, 24);
		});
	</script>
</div>

<h2 id="hi-dpi-canvas">HI-DPI Canvas</h2>

<p>Because the canvas element has a specific size in pixels, it is not DPI-aware. That is, if your operating system or
browser zoom is set to anything other than 100%, the number of physical screen pixels that represent each CSS pixel may
not be in a 1-to-1 ratio.</p>

<div class="grid-3">
<div>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is the current pixel ratio of device pixels to CSS pixels. For example,</span>
<span class="c1">// a value of `1.5` would indicate that for every CSS pixel, there are 1.5</span>
<span class="c1">// device pixels (a scaling ratio of 150%).</span>
<span class="kd">const</span> <span class="nx">ratio</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">hidpi-canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">grey</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">moveTo</span><span class="p">(</span><span class="mf">50.5</span><span class="p">,</span> <span class="mf">105.5</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">lineTo</span><span class="p">(</span><span class="mf">150.5</span><span class="p">,</span> <span class="mf">105.5</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">stroke</span><span class="p">();</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">20pt serif</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">fillText</span><span class="p">(</span><span class="s2">`Ratio: </span><span class="p">${(</span><span class="nx">ratio</span><span class="o">*</span><span class="mi">100</span><span class="p">).</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span><span class="s2">%`</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</code></pre></div>    </div>

  </div>

<figure>
	<figcaption>Canvas</figcaption>
	<canvas id="hidpi-canvas" width="200" height="200"></canvas>
	<script>
	window.addEventListener('load', e => {
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('hidpi-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		const ctx = canvas.getContext('2d');
		ctx.fillStyle = 'grey';
		ctx.fillRect(0, 0, 200, 200);
		ctx.moveTo(50.5, 105.5);
		ctx.lineTo(150.5, 105.5);
		ctx.strokeStyle = 'black';
		ctx.stroke();
		ctx.font = '20pt serif';
		ctx.fillStyle = 'black';
		const text = `Ratio: ${(ratio*100).toFixed(0)}%`;
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 100);
	});
	</script>
</figure>

<figure>
	<figcaption>Zoomed 3x</figcaption>
	<img style="align-self: center; margin-bottom: 15px;" src="https://sidneys1.github.io/images/html5-canvas-tips/bad-hi-dpi.png" />
</figure>
</div>

<p>Note how the text is blurry, and the line below it is as well, despite using our half a pixel offset trick from
<a href="#pixel-art-canvas">the previous section</a> (if your ratio is 100%, just consult the screenshot)? Let’s make some tweaks
to the canvas to work around this:</p>

<div class="grid-3">
	<div style="align-self: center;">
		<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">ratio</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">hidpi-canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="highlight-4"><span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">}</span><span class="s2">px`</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">*=</span> <span class="nx">ratio</span><span class="p">;</span>
<span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">*=</span> <span class="nx">ratio</span><span class="p">;</span></span>
<span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>
<span class="highlight-4"><span class="nx">ctx</span><span class="p">.</span><span class="nf">scale</span><span class="p">(</span><span class="nx">ratio</span><span class="p">,</span> <span class="nx">ratio</span><span class="p">);</span></span>
<span class="c1">// ...</span></code></pre></div>
		</div>
	</div>
	<figure>
		<figcaption>Canvas</figcaption>
		<canvas id="hidpi-canvas-2" width="200" height="200"></canvas>
		<script>
		window.addEventListener('load', e => {
			const ratio = window.devicePixelRatio || 1;
			const canvas = document.getElementById('hidpi-canvas-2');
			if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
			canvas.style.width = `${canvas.width}px`;
			canvas.style.height = `${canvas.height}px`;
			canvas.width *= ratio;
			canvas.height *= ratio;
			const ctx = canvas.getContext('2d');
			ctx.scale(ratio, ratio);
			ctx.fillStyle = 'grey';
			ctx.fillRect(0, 0, 200, 200);
			ctx.moveTo(50.5, 105.5);
			ctx.lineTo(150.5, 105.5);
			ctx.strokeStyle = 'black';
			ctx.stroke();
			ctx.font = '20pt serif';
			ctx.fillStyle = 'black';
			const text = `Ratio: ${(ratio*100).toFixed(0)}%`;
			const size = ctx.measureText(text);
			ctx.fillText(text, 100-(size.width / 2), 100);
		});
		</script>
	</figure>
	<figure>
		<figcaption>Zoomed 3x</figcaption>
		<img style="align-self: center; margin-bottom: 15px;" src="https://sidneys1.github.io/images/html5-canvas-tips/good-hi-dpi.png" />
	</figure>
</div>

<p>Note that in the case of my screenshots, the device scaling is 150%, which means for every CSS pixel there are 1.5
device pixels. That means that no matter how much scaling fanciness we do, our 1px line will never perfectly align to
the screen’s pixel grid.</p>

<p>This graphic depicts a 150% scaling ratio between the device pixels (the white and gray grid) and CSS pixels (the black
dotted lines). The red outlines show where a line would be drawn, aligned to the CSS pixel grid. The green pixels show
the effective rasterization of the red area to the physical pixel grid.</p>

<p><img src="https://sidneys1.github.io/images/html5-canvas-tips/fractional-scaling.png" alt="An example of fractional scaling causing misalignment between CSS and physical pixels." class="no-shadow" /></p>

<h2 id="cleartype-font-smoothing">ClearType Font Smoothing</h2>

<p>Riding off our last example, let’s make the text rendering <em>even smoother</em>. If the browser knows that canvas text will
be rendered against a set color, it will use <a href="https://en.wikipedia.org/wiki/Subpixel_rendering" target="_blank">subpixel rendering</a> (aka ClearType). To do this, we
need to use an opaque canvas, created by passing some options to the canvas’ <code class="language-plaintext highlighter-rouge">getContext</code> function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">cleartype-canvas</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nf">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">,</span> <span class="highlight-4"><span class="p">{</span><span class="na">alpha</span><span class="p">:</span> <span class="kc">false</span><span class="p">}</span></span><span class="p">);</span>
</code></pre></div></div>

<div class="grid-2 no-phone-layout" style="gap:0;">

<!-- <div style="grid-column: 3; font-weight: bold;text-align: center;">Zoomed 4x</div> -->

<!-- <div style="align-self: center; font-style:italic; justify-self: end;">Browser-rendered text:</div> -->

<figure>
	<figcaption>Browser-Rendered Text</figcaption>
	<div id="hello-world" style="align-self: center; text-align: center;color: grey;">Hello, World!</div>
</figure>

<figure>
	<img style="align-self: center; margin-bottom: 15px;" src="https://sidneys1.github.io/images/html5-canvas-tips/browser-text.png" />
</figure>

<figure>
	<figcaption>Default Canvas-Rendered Text, With HI-DPI Fix</figcaption>
	<canvas id="no-cleartype-canvas" class="no-shadow" width="200" height="24" style="margin: 0 auto;display:block;"></canvas>
	<script>
	window.addEventListener('load', e => {
		const helloWorld = document.getElementById('hello-world');
		if (!(helloWorld instanceof HTMLDivElement)) throw 'Expected div!';
		const font = window.getComputedStyle(helloWorld).font;
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('no-cleartype-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		canvas.style.width = `${canvas.width}px`;
		canvas.style.height = `${canvas.height}px`;
		canvas.width *= ratio;
		canvas.height *= ratio;
		const ctx = canvas.getContext('2d');
		ctx.scale(ratio, ratio);
		ctx.font = font;
		ctx.fillStyle = 'grey';
		const text = 'Hello, World!';
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 24-size.fontBoundingBoxDescent);
	});
	</script>
</figure>
<img style="align-self: center; margin-bottom: 15px;" src="https://sidneys1.github.io/images/html5-canvas-tips/bad-canvas-text.png" />

<figure>
	<figcaption>Opaque Canvas-Rendered Text, With HI-DPI and ClearType Fix</figcaption>
	<canvas id="cleartype-canvas" class="no-shadow" width="200" height="24" style="margin:0 auto;display:block;"></canvas>
	<script>
	function getBgColor(element) {
		if (element === undefined) throw "Reached end of tree...";
		const bg = window.getComputedStyle(element).background;
		if (bg === 'none') return getBgColor(element.parentElement);
		return [bg, element];
	}
	function redraw(ctx, bg) {
		const helloWorld = document.getElementById('hello-world');
		if (!(helloWorld instanceof HTMLDivElement)) throw 'Expected div!';
		const font = window.getComputedStyle(helloWorld).font;
		ctx.fillStyle = bg;
		ctx.fillRect(0, 0, 200, 50);
		ctx.font = font;
		ctx.fillStyle = 'grey';
		const text = 'Hello, World!';
		const size = ctx.measureText(text);
		ctx.fillText(text, 100-(size.width / 2), 24-size.fontBoundingBoxDescent);
	}
	window.addEventListener('load', e => {
		const ratio = window.devicePixelRatio || 1;
		const canvas = document.getElementById('cleartype-canvas');
		if (!(canvas instanceof HTMLCanvasElement)) throw 'bla';
		canvas.style.width = `${canvas.width}px`;
		canvas.style.height = `${canvas.height}px`;
		canvas.width *= ratio;
		canvas.height *= ratio;
		const ctx = canvas.getContext('2d', {alpha: false});
		ctx.scale(ratio, ratio);
		const [bg, element] = getBgColor(canvas);
		element.addEventListener('change', e => {
			const [bg2, element] = getBgColor(canvas);
			redraw(ctx, bg2);
		});
		redraw(ctx, bg);
	});
	</script>
</figure>

<img style="align-self: center; margin-bottom: 15px;" src="https://sidneys1.github.io/images/html5-canvas-tips/good-canvas-text.png" />
</div>

<h2 id="matching-background-colors-on-an-opaque-canvas">Matching Background Colors on an Opaque Canvas</h2>

<p>When using an opaque canvas, the default fill color when initialized or when calling <code class="language-plaintext highlighter-rouge">ctx.clearRect(...)</code> is always
<code class="language-plaintext highlighter-rouge">#000</code>. If we want the canvas fill to match our page (assuming it’s a solid color), we can get the color with this
simple function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Returns the background color of the nearest ancestor that is not `none`.
 * @param {HTMLElement} element
 * @returns {string}
 */</span>
<span class="kd">function</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">element</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="k">throw</span> <span class="dl">"</span><span class="s2">Reached end of tree...</span><span class="dl">"</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">bg</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">getComputedStyle</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">background</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">bg</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="nx">bg</span><span class="p">;</span>
    <span class="k">return</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ...later...</span>
<span class="kd">const</span> <span class="nx">bg</span> <span class="o">=</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">canvas</span><span class="p">);</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nf">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</code></pre></div></div>

<p>If the background can change (e.g., when entering or leaving dark mode) you can subscribe to change events like so:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Returns the background color of the nearest ancestor that is not `none`.
 * @param {HTMLElement} element
 * @returns {[string, HTMLElement]}
 */</span>
<span class="kd">function</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">element</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="k">throw</span> <span class="dl">"</span><span class="s2">Reached end of tree...</span><span class="dl">"</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">bg</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">getComputedStyle</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">background</span><span class="p">;</span>
	<span class="c1">// Note that we've changed this to return the element as well as the color.</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">bg</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="p">[</span><span class="nx">bg</span><span class="p">,</span> <span class="nx">element</span><span class="p">];</span>
    <span class="k">return</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ...later...</span>
<span class="kd">function</span> <span class="nf">redraw</span><span class="p">(</span><span class="nx">bg_color</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">bg_color</span><span class="p">;</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nf">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">bg</span><span class="p">,</span> <span class="nx">element</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getBgColor</span><span class="p">(</span><span class="nx">canvas</span><span class="p">);</span>
<span class="nf">redraw</span><span class="p">(</span><span class="nx">bg</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">change</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="nf">redraw</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nf">getComputedStyle</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">background</span><span class="p">));</span>
</code></pre></div></div>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="tips" /><category term="programming" /><category term="html5" /><category term="canvas" /><category term="tips" /><summary type="html"><![CDATA[The &lt;canvas&gt; element may be the best thing to happen to HTML since &lt;marquee&gt;. I’ve been using it a lot for various projects recently and thought it’d be nice to collect some of the tips and tricks I’ve learned into once place.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/html5-canvas-tips/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/html5-canvas-tips/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Booting Sun SPARC Servers</title><link href="https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers.html" rel="alternate" type="text/html" title="Booting Sun SPARC Servers" /><published>2024-10-04T00:00:00-04:00</published><updated>2024-10-04T00:00:00-04:00</updated><id>https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers</id><content type="html" xml:base="https://sidneys1.github.io/retrocomputing/2024/10/04/booting-sun-sparc-servers.html"><![CDATA[<p>In early 2022 <a href="/retrocomputing/2022/06/03/retro-roundup.html">I got several Sun SPARC servers</a> for free off of a FreeCycle ad: I was recently
<a href="https://news.ycombinator.com/item?id=41722918" target="_blank">called out</a> for not providing any sort of update on those devices… so here we go!</p>

<!--more-->

<h2 id="the-devices">The Devices</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th style="text-align: right">Released</th>
      <th style="text-align: right">Original MSRP</th>
      <th style="text-align: left">Inflation-adjusted (2024)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">SPARCstation 20</td>
      <td style="text-align: right">Mar. 1994</td>
      <td style="text-align: right">$12,195</td>
      <td style="text-align: left">$26,080</td>
    </tr>
    <tr>
      <td style="text-align: left">Ultra 1 Creator</td>
      <td style="text-align: right">Nov. 1995</td>
      <td style="text-align: right">$25,995</td>
      <td style="text-align: left">$53,276</td>
    </tr>
    <tr>
      <td style="text-align: left">Axil Ultima 1</td>
      <td style="text-align: right">Sep. 1996</td>
      <td style="text-align: right">$9,995</td>
      <td style="text-align: left">$19,939</td>
    </tr>
  </tbody>
</table>

<h2 id="nvram-woes">NVRAM Woes</h2>

<div class="popunder" style="float:right; margin-left:1em;">
	
		<img class="pop" style="" src="https://sidneys1.github.io/images/sparc-journey/invalid-nvram.jpg" alt="Invalid NVRAM boot messages" title="Invalid NVRAM boot messages" onclick="document.getElementById('114-invalid-nvram-boot-messages').showModal()" />
	
	<em>Click to zoom.</em>
</div>

<dialog class="popover" id="114-invalid-nvram-boot-messages" onclick="document.getElementById('114-invalid-nvram-boot-messages').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="/images/sparc-journey/invalid-nvram.jpg" alt="Invalid NVRAM boot messages" title="Invalid NVRAM boot messages" loading="lazy" />
</dialog>

<p>Sun SPARC machines store some of their BIOS configuration in a chip called an
<dfn><abbr title="non-volatile RAM">NVRAM</abbr></dfn>, a special type of writeable random access memory that does not
clear its contents when the machine powers off. This is usually a small RAM chip with its own internal battery that
recharges when the machine is running. Unfortunately this means that when the devices is powered off for extremely long
periods the NVRAM loses its values. Even more unfortunately, over time the NVRAM battery degrades to the point where it
can no longer be recharged, and every power cycle results in a compete configuration wipe.</p>

<p>Such is the case with my SPARC machines; upon powering on we’re greeted with a sad message.
<code class="language-plaintext amber-term highlighter-rouge">Incorrect configuration checksum; Ethernet address ff:ff:ff:ff:ff:ff, Host ID: ffffffff. The IDPROM contents are invalid</code>
means that our NVRAM has been cleared (the term IDPROM is a historical artifact – older Sun architectures used a
<dfn><abbr title="Programmable ROM">PROM</abbr></dfn> chip instead of an NVRAM chip). Thankfully, there’s a process in
place to restore it manually by entering NVRAM values by hand. Here’s the general process:</p>

<ol>
  <li>Boot your Sun SPARC machine. When you see the <code class="language-plaintext amber-term highlighter-rouge">The IDPROM contents are invalid</code> message, press <kbd><kbd>STOP</kbd>+<kbd>A</kbd></kbd> (<kbd>STOP</kbd> is a special key on Sun keyboards). This should drop you to the <code class="language-plaintext amber-term highlighter-rouge">ok</code> prompt, which is the OpenBoot debugging prompt.
<!-- TODO: take photo of STOP key. --></li>
  <li>
    <p>Now we’re going to poke values into our NVRAM using the <code class="language-plaintext highlighter-rouge">mkp</code> command. This command has a format <code class="language-plaintext highlighter-rouge">&lt;value&gt; &lt;location&gt; mkp</code>. Here’s the layout of NVRAM, or at least the parts we care about:</p>

    <table class="compact-table">
      <thead>
        <tr>
          <th style="text-align: right">Location(s)</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: right">0</td>
          <td>Always <code class="language-plaintext highlighter-rouge">1</code> (format/version number).</td>
        </tr>
        <tr>
          <td style="text-align: right">1</td>
          <td>First byte of HostID (machine type<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>).</td>
        </tr>
        <tr>
          <td style="text-align: right">2–7</td>
          <td>6-byte ethernet address (first three bytes should be <code class="language-plaintext highlighter-rouge">80:00:20</code>).</td>
        </tr>
        <tr>
          <td style="text-align: right">8–b</td>
          <td>Date of manufacture (can be zeros).</td>
        </tr>
        <tr>
          <td style="text-align: right">c–e</td>
          <td>Remainder of HostID.</td>
        </tr>
        <tr>
          <td style="text-align: right">f</td>
          <td>IDPROM checksum - bitwise exclusive-or of locations 0–e.</td>
        </tr>
      </tbody>
    </table>

    <p>So let’s start poking values into NVRAM:</p>

    <div style="display:grid;grid-template-columns: 1fr auto;gap:1em;">
<div style="grid-column:1;"><div class="language-plaintext amber-term highlighter-rouge" style="line-height: 1.0;"><pre class="highlight"><code>ok set-defaults
ok <span class="highlight-1">1</span> 0 mkp
ok <span class="highlight-2">80</span> 1 mkp
ok <span class="highlight-3">8</span> 2 mkp
ok <span class="highlight-3">0</span> 3 mkp
ok <span class="highlight-3">20</span> 4 mkp
ok <span class="highlight-3">c0</span> 54 mkp
ok <span class="highlight-3">ff</span> 6 mkp
ok <span class="highlight-3">ee</span> 7 mkp
ok <span class="highlight-4">0</span> 8 mkp
ok <span class="highlight-4">0</span> 9 mkp
ok <span class="highlight-4">0</span> a mkp
ok <span class="highlight-4">0</span> b mkp
ok <span class="highlight-5">c0</span> c mkp
ok <span class="highlight-5">ff</span> d mkp
ok <span class="highlight-5">ee</span> e mkp
ok <span class="highlight-6">0 f 0 do i idprom@ xor loop f</span> mkp</code></pre></div></div>
<div style="grid-column:2;">

        <table>
          <thead>
            <tr>
              <th style="text-align: right">Locations</th>
              <th style="text-align: left">Values</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: right">0–7</td>
              <td style="text-align: left"><code><span class="highlight-1">01</span><span class="highlight-2">80</span><span class="highlight-3">080020c0ffee</span></code></td>
            </tr>
            <tr>
              <td style="text-align: right">8–f</td>
              <td style="text-align: left"><code><span class="highlight-4">00000000</span><span class="highlight-5">c0ffee</span><span class="highlight-6">??</span></code></td>
            </tr>
          </tbody>
        </table>

        <!-- {: .compact-table} -->

      </div></div>

    <p>That last line is a small function that will generate the checksum that goes in location <code class="language-plaintext highlighter-rouge">f</code>.</p>
  </li>
  <li>
    <p>Enter <code class="language-plaintext amber-term highlighter-rouge">banner</code> at the <code class="language-plaintext amber-term highlighter-rouge">ok</code> prompt. This will print out the system banner, and allow us to
validate that the values we’ve entered are correct. If all is well, you should see something like this:</p>

    <div style="grid-column:1;"><div class="language-plaintext amber-term highlighter-rouge"><pre class="highlight"><code>ok banner
Sun Ultra 1 UPA/SBus (UltraSPARC 167MHz), Keyboard Present
OpenBoot 3.7, 384 MB memory installed, Serial #12648430.
Ethernet address <span class="highlight-3">8:0:20:c0:ff:ee</span>, Host ID: <span class="highlight-2">80</span><span class="highlight-5">c0ffee</span>.</code></pre></div></div>

    <p>If, instead, you see a message like <code class="language-plaintext amber-term highlighter-rouge">The IDPROM contents are invalid</code> after the banner, then either the
checksum is wrong (check that you typed it correctly!) or the first byte of the HostID is incorrect – this byte
specifies the machine type, and must match the machine you’re trying to boot<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Don’t forget to re-generate the
checksum after updating any of these values!</p>
  </li>
  <li>Finally enter <code class="language-plaintext amber-term highlighter-rouge">reset</code> at the <code class="language-plaintext amber-term highlighter-rouge">ok</code> prompt, which will restart the boot process. Because we
haven’t lost power, however, the NVRAM will retain the values we’ve set. Wait for the machine to boot. This can take
quite a while, especially if there is a lot of RAM in the machine. Pro tip, plugging an ethernet cable between the
Sun server and another machine can help here – otherwise the Sun server can spend a lot of time complaining about
<code class="language-plaintext amber-term highlighter-rouge">SUNW,hme0: Link Down - cable problem?</code>. I plugged the Sun Ultra 1 into a powered on Raspberry Pi 3b
and it stopped complaining.</li>
  <li>Eventually you’ll be brought to a Unix login, assuming the machine is running Solaris. If you know the password,
great; if not, things get tricky<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>. <!-- TODO: talk about clearing root password by booting debian -->
Once logged in, you can set the date and time (for as long as the machine is
powered on, anyways) at the <code class="language-plaintext amber-term highlighter-rouge">root#</code> prompt with <code class="language-plaintext amber-term highlighter-rouge">date 1004102024</code> (in format
<code class="language-plaintext highlighter-rouge">mmddHHMMYY</code>).</li>
</ol>

<h2 id="results">Results</h2>

<h3 id="sun-ultra-1-creator">Sun Ultra 1 Creator</h3>

<p>The Sun Ultra 1 was the first machine I tried to boot, and so far the only one to successfully fully boot.</p>

<div class="carousel__holder " style="" data-height="600px">
    <div id="carousel0" class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0b" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0c" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0d" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0d">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0b">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0a">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0c">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0b">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0d">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0c">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0a">&gt;</label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/ultra-case.jpg" src="https://sidneys1.github.io/images/sparc-journey/ultra-case.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/ultra-badge.jpg" src="https://sidneys1.github.io/images/sparc-journey/ultra-badge.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/ultra-case-open.jpg" src="https://sidneys1.github.io/images/sparc-journey/ultra-case-open.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/ultra-1-shell.jpg" src="https://sidneys1.github.io/images/sparc-journey/ultra-1-shell.jpg" style="" /></li>
            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="0a"></label>
            
              <label class="carousel__indicator" for="0b"></label>
            
              <label class="carousel__indicator" for="0c"></label>
            
              <label class="carousel__indicator" for="0d"></label>
            
        </div>
    </div>
</div>

<style>
.carousel__holder {
	width: 100%;
	position: relative;
	padding-bottom: 600px;
	margin: 1rem 0 1rem;
}

@media screen and (max-width: 1800px) {
	.carousel__holder {
		padding-bottom: calc(min(40vh, 600px));
	}
}

@media screen and (min-width: 1800px) {
	.carousel__holder:is(.rfloat, .lfloat) {
		padding-bottom: calc(min(40%, 600px));
	}
}

.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}


.carousel__control {
  height: 100%;
  vertical-align: middle;
  /* width: 30px; */
  margin-top: -15px;
  top: calc(50% - 0.5em);
  position: absolute;
  display: block;
  cursor: pointer;
  /* border-width: 5px 5px 0 0;
  border-style: solid;
  border-color: #fafafa; */
  font-size: 48pt;
  color: #fafafa;
  font-weight: 900;
  text-shadow: 0 0 10px  black;
  opacity: 0.35;
  /* opacity: 1; */
  outline: 0;
  z-index: 3;
  transition: opacity 250ms linear;
  /* box-shadow: 0 0 10px black; */
}
.carousel__control:hover {
  opacity: 1;
  transition: opacity 250ms linear;
}
.carousel__control--backward {
  left: 20px;
  /* -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg); */
}
.carousel__control--forward {
  right: 20px;
  /* -webkit-transform: rotate(45deg);
          transform: rotate(45deg); */
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 10px;
  width: 10px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
  box-shadow: 0 0 10px black;
  transition: opacity 250ms linear;
}
.carousel__indicator:hover {
  opacity: 0.75;
  transition: opacity 250ms linear;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: flex;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}


.carousel--scale .carousel__slide {
  -webkit-transform: scale(0);
          transform: scale(0);
}
.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;

  /* background-size: contain;
  background-repeat: no-repeat;
  background-position: center; */
}
.carousel__slide img {
	display: block;
	width: auto;
	height: auto;
	max-width: 100%;
	max-height: 100%;
	box-shadow: unset;
}
.carousel__slide img:hover {
	box-shadow: unset;
}

.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color: #fafafa;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
}

</style>

<h3 style="clear:both;" id="sun-sparcstation-20">Sun SPARCstation 20</h3>

<div class="popunder" style="float:left;margin-right:1em;">
	
		<img class="pop" style="max-width:400px;" src="https://sidneys1.github.io/images/sparc-journey/sp20-simm-errors.jpg" alt="SPARCstation 20 SIMM Errors" title="SPARCstation 20 SIMM Errors" onclick="document.getElementById('131-sparcstation-20-simm-errors').showModal()" />
	
	<em>Click to zoom.</em>
</div>

<dialog class="popover" id="131-sparcstation-20-simm-errors" onclick="document.getElementById('131-sparcstation-20-simm-errors').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="/images/sparc-journey/sp20-simm-errors.jpg" alt="SPARCstation 20 SIMM Errors" title="SPARCstation 20 SIMM Errors" loading="lazy" />
</dialog>

<p>After some stumbles learning about the machine-type byte in the host ID<sup id="fnref:1:2" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, this machine was able to get past the NVRAM
check, but failed during memory diagnostics. This output repeated for some 10 minutes before I turned the machine off.
For J0301, it looks like the fourth bit of the lowest byte (<code class="language-plaintext highlighter-rouge">0b00010000</code>) is faulty, always set to <code class="language-plaintext highlighter-rouge">0b1</code>. For example,
the pattern <code class="language-plaintext highlighter-rouge">0b10100101</code> (<code class="language-plaintext highlighter-rouge">0xa5</code>) becomes <code class="language-plaintext highlighter-rouge">0b10110101</code> (<code class="language-plaintext highlighter-rouge">0xb5</code>). For J0302, something stranger seems to be happening, as
<code class="language-plaintext highlighter-rouge">0b10100101</code> (<code class="language-plaintext highlighter-rouge">0xa5</code>) becomes <code class="language-plaintext highlighter-rouge">0x01001010</code> (<code class="language-plaintext highlighter-rouge">0x4a</code>) and <code class="language-plaintext highlighter-rouge">0b11111111</code> (<code class="language-plaintext highlighter-rouge">0xff</code>) becomes <code class="language-plaintext highlighter-rouge">0b11101111</code> (<code class="language-plaintext highlighter-rouge">0xef</code>).</p>

<table class="compact-table" style="width:unset;clear:none;">
  <thead>
    <tr>
      <th style="text-align: right">U-number<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></th>
      <th style="text-align: center">Physical Addresses</th>
      <th style="text-align: right">Expected Value</th>
      <th style="text-align: left">Observed Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">J0301</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0x0c4012a8</code>–<code class="language-plaintext highlighter-rouge">0x0c4fb2a8</code></td>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">0xa5a5a5a5</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">0xa5a5a5b5</code></td>
    </tr>
    <tr>
      <td style="text-align: right">J0301</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0x0c4012a8</code>–<code class="language-plaintext highlighter-rouge">0x0c4fb2a8</code></td>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">0x00</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">0x10</code></td>
    </tr>
    <tr>
      <td style="text-align: right">J0302</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0x188ff2b8</code>–<code class="language-plaintext highlighter-rouge">0x18a011a9</code></td>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">0xa5a5a5a5</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">0xa5a5a54a</code></td>
    </tr>
    <tr>
      <td style="text-align: right">J0302</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">0x188ff2b8</code>–<code class="language-plaintext highlighter-rouge">0x18a011a9</code></td>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">0xffffffff</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">0xffffffef</code></td>
    </tr>
  </tbody>
</table>

<p style="clear:left;">One fun detail I noticed poking around this machine: there’s a little bear with a top hat silkscreened onto the
motherboard:</p>

<p><img src="/images/sparc-journey/sparcstation-mobo-zoom.jpg" alt="asdf" /></p>

<div class="carousel__holder " style="" data-height="600px">
    <div id="carousel1" class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel1" id="1a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel1" id="1b" />
        
          <input class="carousel__activator" type="radio" name="carousel1" id="1c" />
        
          <input class="carousel__activator" type="radio" name="carousel1" id="1d" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="1d">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="1b">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="1a">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="1c">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="1b">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="1d">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="1c">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="1a">&gt;</label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/sparcstation-case.jpg" src="https://sidneys1.github.io/images/sparc-journey/sparcstation-case.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/sparcstation-mobo.jpg" src="https://sidneys1.github.io/images/sparc-journey/sparcstation-mobo.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/sparcstation-cpu.jpg" src="https://sidneys1.github.io/images/sparc-journey/sparcstation-cpu.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/sparcstation-ram.jpg" src="https://sidneys1.github.io/images/sparc-journey/sparcstation-ram.jpg" style="" /></li>
            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="1a"></label>
            
              <label class="carousel__indicator" for="1b"></label>
            
              <label class="carousel__indicator" for="1c"></label>
            
              <label class="carousel__indicator" for="1d"></label>
            
        </div>
    </div>
</div>

<style>
.carousel__holder {
	width: 100%;
	position: relative;
	padding-bottom: 600px;
	margin: 1rem 0 1rem;
}

@media screen and (max-width: 1800px) {
	.carousel__holder {
		padding-bottom: calc(min(40vh, 600px));
	}
}

@media screen and (min-width: 1800px) {
	.carousel__holder:is(.rfloat, .lfloat) {
		padding-bottom: calc(min(40%, 600px));
	}
}

.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}


.carousel__control {
  height: 100%;
  vertical-align: middle;
  /* width: 30px; */
  margin-top: -15px;
  top: calc(50% - 0.5em);
  position: absolute;
  display: block;
  cursor: pointer;
  /* border-width: 5px 5px 0 0;
  border-style: solid;
  border-color: #fafafa; */
  font-size: 48pt;
  color: #fafafa;
  font-weight: 900;
  text-shadow: 0 0 10px  black;
  opacity: 0.35;
  /* opacity: 1; */
  outline: 0;
  z-index: 3;
  transition: opacity 250ms linear;
  /* box-shadow: 0 0 10px black; */
}
.carousel__control:hover {
  opacity: 1;
  transition: opacity 250ms linear;
}
.carousel__control--backward {
  left: 20px;
  /* -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg); */
}
.carousel__control--forward {
  right: 20px;
  /* -webkit-transform: rotate(45deg);
          transform: rotate(45deg); */
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 10px;
  width: 10px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
  box-shadow: 0 0 10px black;
  transition: opacity 250ms linear;
}
.carousel__indicator:hover {
  opacity: 0.75;
  transition: opacity 250ms linear;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: flex;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}


.carousel--scale .carousel__slide {
  -webkit-transform: scale(0);
          transform: scale(0);
}
.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;

  /* background-size: contain;
  background-repeat: no-repeat;
  background-position: center; */
}
.carousel__slide img {
	display: block;
	width: auto;
	height: auto;
	max-width: 100%;
	max-height: 100%;
	box-shadow: unset;
}
.carousel__slide img:hover {
	box-shadow: unset;
}

.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color: #fafafa;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
}

</style>

<h3 style="clear:both;" id="axil-ultima-1">Axil Ultima 1</h3>

<p>Perhaps the saddest story here, and a testament to the quality and reliability of original Sun hardware, this Sun clone
initially had some struggles booting, and wouldn’t recognize keyboard input. After a couple power cycles, however, it
stopped booting altogether.</p>

<div class="carousel__holder " style="" data-height="600px">
    <div id="carousel2" class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2b" />
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2c" />
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2d" />
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2e" />
        
          <input class="carousel__activator" type="radio" name="carousel2" id="2f" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2f">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2b">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2a">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2c">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2b">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2d">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2c">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2e">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2d">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2f">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="2e">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="2a">&gt;</label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-case.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-case.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-case-open.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-case-open.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-poweron-failure-1.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-poweron-failure-1.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-poweron-failure-2.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-poweron-failure-2.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-poweron-failure-3.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-poweron-failure-3.jpg" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/sparc-journey/axil-poweron-failure-4.jpg" src="https://sidneys1.github.io/images/sparc-journey/axil-poweron-failure-4.jpg" style="" /></li>
            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="2a"></label>
            
              <label class="carousel__indicator" for="2b"></label>
            
              <label class="carousel__indicator" for="2c"></label>
            
              <label class="carousel__indicator" for="2d"></label>
            
              <label class="carousel__indicator" for="2e"></label>
            
              <label class="carousel__indicator" for="2f"></label>
            
        </div>
    </div>
</div>

<style>
.carousel__holder {
	width: 100%;
	position: relative;
	padding-bottom: 600px;
	margin: 1rem 0 1rem;
}

@media screen and (max-width: 1800px) {
	.carousel__holder {
		padding-bottom: calc(min(40vh, 600px));
	}
}

@media screen and (min-width: 1800px) {
	.carousel__holder:is(.rfloat, .lfloat) {
		padding-bottom: calc(min(40%, 600px));
	}
}

.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}

.carousel__activator:nth-of-type(5):checked ~ .carousel__track {
  -webkit-transform: translateX(-400%);
          transform: translateX(-400%);
}
.carousel__activator:nth-of-type(5):checked ~ .carousel__slide:nth-of-type(5) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(5):checked ~ .carousel__controls:nth-of-type(5) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(5):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(5) {
  opacity: 1;
}

.carousel__activator:nth-of-type(6):checked ~ .carousel__track {
  -webkit-transform: translateX(-500%);
          transform: translateX(-500%);
}
.carousel__activator:nth-of-type(6):checked ~ .carousel__slide:nth-of-type(6) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(6):checked ~ .carousel__controls:nth-of-type(6) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(6):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(6) {
  opacity: 1;
}


.carousel__control {
  height: 100%;
  vertical-align: middle;
  /* width: 30px; */
  margin-top: -15px;
  top: calc(50% - 0.5em);
  position: absolute;
  display: block;
  cursor: pointer;
  /* border-width: 5px 5px 0 0;
  border-style: solid;
  border-color: #fafafa; */
  font-size: 48pt;
  color: #fafafa;
  font-weight: 900;
  text-shadow: 0 0 10px  black;
  opacity: 0.35;
  /* opacity: 1; */
  outline: 0;
  z-index: 3;
  transition: opacity 250ms linear;
  /* box-shadow: 0 0 10px black; */
}
.carousel__control:hover {
  opacity: 1;
  transition: opacity 250ms linear;
}
.carousel__control--backward {
  left: 20px;
  /* -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg); */
}
.carousel__control--forward {
  right: 20px;
  /* -webkit-transform: rotate(45deg);
          transform: rotate(45deg); */
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 10px;
  width: 10px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
  box-shadow: 0 0 10px black;
  transition: opacity 250ms linear;
}
.carousel__indicator:hover {
  opacity: 0.75;
  transition: opacity 250ms linear;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: flex;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}

.carousel__track .carousel__slide:nth-of-type(5) {
  -webkit-transform: translateX(400%);
          transform: translateX(400%);
}

.carousel__track .carousel__slide:nth-of-type(6) {
  -webkit-transform: translateX(500%);
          transform: translateX(500%);
}


.carousel--scale .carousel__slide {
  -webkit-transform: scale(0);
          transform: scale(0);
}
.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;

  /* background-size: contain;
  background-repeat: no-repeat;
  background-position: center; */
}
.carousel__slide img {
	display: block;
	width: auto;
	height: auto;
	max-width: 100%;
	max-height: 100%;
	box-shadow: unset;
}
.carousel__slide img:hover {
	box-shadow: unset;
}

.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color: #fafafa;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
}

.carousel__slide:nth-of-type(5),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(5) {
}

.carousel__slide:nth-of-type(6),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(6) {
}

</style>

<h2 id="notes">Notes</h2>

<p>I did start writing a section about my efforts last year to boot NetBSD on this machine. I honestly can’t remember if I
had much luck in the end, and I was having difficulty repeating these steps and running out of time to work on this
project. So I’ve decided to leave this section as-is here at the end; the steps <em>should</em> be technically accurate, but as
I said I haven’t had time to verify them and/or finish writing the section. You can check out
<ruby style="ruby-position: under; ruby-align: center;"><a href="https://www.netbsd.org/docs/network/netboot/intro.sun.html" target="_blank">this page from NetBSD</a>
<rt>Archived at: <a href="https://web.archive.org/web/2/https://www.netbsd.org/docs/network/netboot/intro.sun.html" target="_blank" class="no-arrow">Wayback Machine</a>.</rt></ruby> with more instructions if
you’re really interested.</p>

<h3 id="et-tu-root-e">Et tu, root-e?</h3>

<p>Now that we’ve managed to convince our Sun server to begin booting, there’s a few others problems. First, Solaris
doesn’t support DHCP, and cannot get a IP address; second, it also doesn’t have a configuration for its own hostname.
Let’s look at configuring those. Instead of DHCP, Solaris uses <defn><abbr title="Reverse Address Resolution Protocol">RARP</abbr></defn>,
an older protocol (1984; DHCP was first defined in 1993).</p>

<p>Now, <defn><abbr title="Address Resolution Protocol">ARP</abbr></defn> is a link-layer protocol that allows
internet-layer addresses (IPs) to be resolved to link-layer addresses (MACs). <em>Reverse</em> ARP is used to resolve a MAC to
an IP. So, I hooked up a Raspberry Pi 3b with an ethernet cable directly to the Sun server. At boot time, Solaris will
send out a broadcast request with its MAC address (configured via NVRAM) and then will listen for a response to
auto-configure its IP. We can install the <code class="language-plaintext highlighter-rouge">rarpd</code> package on our Pi, and configure it to know the IP address associated
with our Sun’s MAC.</p>

<p>Checking <code class="language-plaintext highlighter-rouge">man rarpd</code> we can note a few important details: first, an association between MAC addresses and hostnames is
configured in <code class="language-plaintext highlighter-rouge">/etc/ethers</code>. Second, an association between hostnames and IPs is read from <code class="language-plaintext highlighter-rouge">/etc/hosts</code> (this file
already exist on all Linux systems). Third, there’s a section about “bootable images”:</p>

<blockquote>
  <p>By  default  rarpd  also checks if a bootable image, of a name starting with the IP address in hexadecimal upper-case
letters, is present in the TFTP boot directory before it decides whether to respond to the RARP request.  The
comparison involves exactly the first eight characters, and ignores any additional character.  A file name shorter
than eight characters in length is unsuccessful.  Typically, 192.168.0.122 would correspond to  an  image  named like
C0A8007A.SUN.</p>
</blockquote>

<p>Ok, that’s a lot to chew on, but the gist is that we can do the following:</p>

<div style="display: grid; grid-column-template: 1fr 1fr; gap: 1em;">
<div style="grid-column:1;">
    <div data-file-name="/etc/ethers" class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b8</span>:<span class="m">27</span>:<span class="n">eb</span>:<span class="n">fc</span>:<span class="m">10</span>:<span class="m">0</span><span class="n">c</span> <span class="n">pi</span>            <span class="c"># Our Pi
</span><span class="m">08</span>:<span class="m">00</span>:<span class="m">20</span>:<span class="n">c0</span>:<span class="n">ff</span>:<span class="n">ee</span> <span class="n">SUN</span>.<span class="n">TEST</span>.<span class="n">COM</span>  <span class="c"># Our Sun
</span></code></pre></div>    </div>
  </div>
<div style="grid-column:2;">
    <div data-file-name="/etc/hosts" class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">127</span>.<span class="m">0</span>.<span class="m">0</span>.<span class="m">1</span>    <span class="n">pi</span>            <span class="c"># Our Pi
</span><span class="m">192</span>.<span class="m">168</span>.<span class="m">6</span>.<span class="m">37</span> <span class="n">SUN</span>.<span class="n">TEST</span>.<span class="n">COM</span>  <span class="c"># Our Sun
</span></code></pre></div>    </div>
  </div>
</div>

<p>And as for the bootable images, for now we’ll run <code class="language-plaintext highlighter-rouge">rarp</code> without that restriction using the <code class="language-plaintext highlighter-rouge">-e</code> parameter. We’ll also
use <code class="language-plaintext highlighter-rouge">-d</code> so that the daemon stays connected to the TTY and we can continue to see log messages. Make sure the system
service isn’t running with <code class="language-plaintext highlighter-rouge">sudo systemctl stop rarpd</code>. Now we can run <code class="language-plaintext highlighter-rouge">sudo rarpd -e -d</code>. Now let’s boot again and see
if we get an IP address.</p>

<!-- The Axil started to boot, but then on subsequent power cycles deteriorated to the point of no longer printing any output. -->

<!--
Notes:
- https://forum.vcfed.org/index.php?threads/how-to-workaround-when-your-sun-ultra-5-10-nvram-no-longer-works.52997/
  on how to reprogram the nvram
- https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml
  lots of facts, specifically the requisite first bytes of the hostid.
- http://sunsite.uakom.sk/sunworldonline/swol-11-1995/swol-11-fusion.intro.html
- https://www.edn.com/axil-launches-the-axil-ultima-1-and-axil-ultima-2-workstations-and-servers/

 -->
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>A complete table can be found at the <ruby style="ruby-position: under; ruby-align: center;">
  <a href="https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml" target="_blank">SUN NVRAM/hostid FAQ</a>
  <rt>Archived at: <a href="https://web.archive.org/web/2/https://www.sun3arc.org/FAQ/sun-nvram-hostid.faq.phtml" target="_blank" class="no-arrow">Wayback Machine</a>.</rt>
  </ruby>, but for my purposes <code class="language-plaintext highlighter-rouge">80</code> is the correct value for a Sun Ultra 1, and <code class="language-plaintext highlighter-rouge">72</code> is the correct value for a
  SPARCstation 20. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:1:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I ended up buying an Adaptec ASC-29160 Ultra 3 SCSI controller PCI card to throw in another old computer. This
  card can be found pretty easily on eBay, and only cost me $14 USD with shipping. It has 68- and 50-pin SCSI
  headers, but the disks in my Sun servers are 80-pin, so I also had to purchase an 80-to-68 pin adaptor
  ($22 USD shipped from eBay). Using this and a CloneZilla disk I was able to clone entire disk images for posterity
  and inspection. I believe this is also how I got the root password cleared, but I was also messing around with
  net-booting at the time and I honestly can’t remember which method ended up working. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>This is the SIM slot identifier. On a SPARCstation 20, J0301 is “bank 3”, physical addresses
  0x0c000000–0x0fffffff, and J0302 is “bank 6”, physical addresses 0x18000000–0x1bffffff.
  See <a href="https://archive.org/details/manualzilla-id-6034531/page/n57/mode/2up?q=%22SIMM+errors%22">SPARCstation 20 Service Manual, p.35: §SIMM Errors on Archive.org</a>.
  <img src="/images/sparc-journey/sp20-simm-layout.jpg" alt="SPARCstation 20 SIMM Layout" style="max-width:500px;" /> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sidneys1</name><email>admin@sidneys1.com</email></author><category term="retrocomputing" /><category term="retrocomputing" /><category term="sun-sparc" /><summary type="html"><![CDATA[In early 2022 I got several Sun SPARC servers for free off of a FreeCycle ad: I was recently called out for not providing any sort of update on those devices… so here we go!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/sparc-journey/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/sparc-journey/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How I Back Up Google Photos</title><link href="https://sidneys1.github.io/Backing-Up-Google-Photos/" rel="alternate" type="text/html" title="How I Back Up Google Photos" /><published>2024-06-28T00:00:00-04:00</published><updated>2024-06-28T00:00:00-04:00</updated><id>https://sidneys1.github.io/backing-up-google-photos</id><content type="html" xml:base="https://sidneys1.github.io/Backing-Up-Google-Photos/"><![CDATA[<p>Google Photos is wonderful. It backs up my photos and videos, tags them, and makes them available to share with my
family.</p>

<p>But I also don’t trust that Google will never accidentally “loose” my photos. Here is the process I use to back up my
Google Photos data to a self-hosted instance of Photoprism.</p>

<!--more-->
<p>This guide covers the process I use to back up my Google Photos content, in its original quality and with sidecar
metadata, to Photoprism.</p>

<h2 id="prerequisites-and-setup">Prerequisites and Setup</h2>

<p>My Photoprism instance runs on a TrueNAS Scale server as a kubernetes app. While yours doesn’t have to run in the exact
setup, it’s worth describing. Photoprism has three primary storage folders, “Originals”, “Imports”, and a data path for
sidecar files, multimedia caches, and the database file (if you’re using the built-in Sqlite storage, though I’d
strongly caution you to set up an external MariaDB instance if you have a large photo library). Photoprism treats
“Originals” as essentially a read-only store of media - anything you put in here will be imported by Photoprism as-is.
Meanwhile any media put in “Imports” will be ingested by Photoprism and moved to the Originals folder; however you will
have no control over the organization of these imported media. For our purposes, I <em>strongly</em> recommend putting your
Google Photos media in “Originals” to preserve the folder structure Takeout outputs.</p>

<p>In my TrueNAS setup the Originals and Import folders are mounted onto ZFS datasets on the host, which allows me to
access and administer the media files while Photoprism isn’t running. Specifically, “Originals” is mounted to
<code class="language-plaintext highlighter-rouge">/mnt/Bulk Storage/Photoprism/Originals</code>, which we’ll just call <code class="language-plaintext highlighter-rouge">$ORIGINALS</code> from here on. First and most importantly,
we will be using ZFS extended attribute <code class="language-plaintext highlighter-rouge">i</code>mmutable to ensure that any files already in our “Originals” folder won’t
be overwritten when we extract the Takeout GZip archives. To do this, we can run the following command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Find all regular files in our Originals folder and mark them as +i (immutable).</span>
find <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-print0</span> <span class="se">\</span>
| <span class="nb">sudo </span>xargs <span class="nt">-0</span> <span class="nt">-n</span> 1 chattr +i
</code></pre></div></div>

<p>We’ll also be using a few tools not distributed with TrueNAS Scale (or more Linux distros, for that matter). Most can be
installed via package managers, the rest can be built from source:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pigz</code> - Parallel GZip implementation (<a href="http://www.zlib.net/pigz/">homepage</a>).</li>
  <li><code class="language-plaintext highlighter-rouge">progress</code> - Coreutils’ progress viewer (not necessary - just nice; <a href="https://github.com/Xfennec/progress">homepage</a>).</li>
  <li><code class="language-plaintext highlighter-rouge">jdupes</code> - Jody Bruchon’s enhanced <code class="language-plaintext highlighter-rouge">fdupes</code> clone (<a href="https://codeberg.org/jbruchon/jdupes">homepage</a>).</li>
</ul>

<h2 id="step-1---create-takeout-archives">Step 1 - Create Takeout Archives</h2>

<ol>
  <li>Go to <a href="https://takeout.google.com">Google Takeout</a>.</li>
  <li>Click <button>Deselect all</button>.</li>
  <li>Scroll down to “Google Photos” and select its checkbox.</li>
  <li>Scroll to the bottom and click <button>Next Step</button>.</li>
  <li>For “File type” select <code class="language-plaintext highlighter-rouge">.tgz</code>, and for “File size” select 50GB.</li>
  <li>Click <button>Create Export</button>.</li>
</ol>

<h2 id="step-2---downloading-takeout-archives">Step 2 - Downloading Takeout Archives</h2>

<div>

  <p>Once your Google Takeout files are ready you will get an email (you can also check the Takeout site for completed
archives). Depending on the size of our Google Photos library you may have multiple ~50GB files. I usually have around
10-15. I prefer to download one file at a time (depending on free disk space). Clicking the file will start a browser
download, but I like to pause this download, right-click it and “copy download URL”, and then enter that into a download
tool like Aria2.</p>

  <aside>

    <p>The total size of your Takeout files may be much larger than your total Google Photos library. Takeout will organize
your photos and videos by year and month, but any named albums you’ve created will also have a top-level folder
containing yet another copy of any photos or videos in that album.</p>

    <p>Because of this, we’ll be utilizing some ZFS tricks to minimize and deduplicate your disk usage.</p>

  </aside>

</div>

<h2 id="step-3---extracting-takeout-archives">Step 3 - Extracting Takeout Archives</h2>

<p>Once I have some Takeout archive files downloaded (you don’t have to download them all at once, or even in order!) we’ll
start extracting them into our “Originals” folder. Your Photoprism instance shouldn’t index Originals unless you tell it
to, but I usually shut Photoprism down while performing these steps just to be safe.</p>

<details>
  <summary>Here's the script I use.</summary>

  <p>This will use <code class="language-plaintext highlighter-rouge">pigz</code> to extract the specified archive in parallel (for speed) and then extract the Google Photos files
into our “Originals” folder:</p>

  <div data-file-name="extract-to-originals.sh" class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env sh</span>

<span class="c"># Usage:</span>
<span class="c"># sudo ./extract-to-originals.sh takeout-archive.tgz</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">--user</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Please run with sudo!"</span> 1&gt;&amp;2<span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
<span class="k">fi

</span>pigz <span class="nt">--decompress</span> &lt;<span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="se">\</span>
| <span class="nb">tar</span> <span class="nt">--extract</span> <span class="nt">--strip-components</span><span class="o">=</span>2 <span class="nt">--skip-old-files</span> <span class="nt">--directory</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span> <span class="se">\</span>
&amp; progress <span class="nt">--wait</span> <span class="nt">-monitor</span> <span class="nt">--command</span> pigz<span class="p">;</span>

<span class="nb">chown</span> <span class="nt">-R</span> photoprism:photoprism <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span><span class="p">;</span>
</code></pre></div>  </div>

  <p>Let’s break down what’s happening here:</p>

  <ol>
    <li><code class="language-plaintext highlighter-rouge">if [ "$(id -u)" -ne 0];</code> - checks if the script was run as <code class="language-plaintext highlighter-rouge">root</code> (or with <code class="language-plaintext highlighter-rouge">sudo</code>).</li>
    <li><code class="language-plaintext highlighter-rouge">pigz --decompress &lt;"$1"</code> - decompress the GZip file specified in the first passed to the script.</li>
    <li><code class="language-plaintext highlighter-rouge">tar --extract</code>… - extract files from the Tar archive that <code class="language-plaintext highlighter-rouge">pigz</code> decompressed. There’s a few extra options:
      <ul>
        <li>…<code class="language-plaintext highlighter-rouge">--strip-components=2</code>…: remove some unnecessary path components that Takeout adds.</li>
        <li>…<code class="language-plaintext highlighter-rouge">--skip-old-files</code>…: skip files that already exist on disk.</li>
        <li>…<code class="language-plaintext highlighter-rouge">--directory</code>: extract files into our <code class="language-plaintext highlighter-rouge">$ORIGINALS</code> folder.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">progress --wait --monitor --command pigz</code> - monitor the progress of the <code class="language-plaintext highlighter-rouge">pigz</code> command in decompressing the input
file.</li>
    <li><code class="language-plaintext highlighter-rouge">chown -R photoprism:photoprism "$ORIGINALS"</code> - Because <code class="language-plaintext highlighter-rouge">tar</code> attempts to preserve the ownership of the files it
extracts, we need to correct this after extraction. Obviously update the <code class="language-plaintext highlighter-rouge">user:group</code> to suit your own needs.</li>
  </ol>

  <p>Because the files already in our “Originals” folder are marked <code class="language-plaintext highlighter-rouge">i</code>mmutable tar can’t overwrite them - and in fact we
also provide tar with the <code class="language-plaintext highlighter-rouge">--skip-old-files</code> option to avoid a lot of error output about not being able to extract
existing files. We do this so that the next time you want to back up your Google Photos, any files that existed between
the last backup and the new one aren’t re-written and we can safely skip extracting them from the archive. This will
save a <em>ton</em> of time.</p>

</details>

<h2 id="step-4---deduplicating-media-files">Step 4 - Deduplicating Media Files</h2>

<p>Repeat step 3 for all of the Takeout archives - you can delete each one as you go once it’s been extracted. Once you’re
done, we can inspect how many files we have that are new by counting the files that are not <code class="language-plaintext highlighter-rouge">i</code>mmutable.</p>

<details>
  <summary>Here's a little script to do just that.</summary>

  <div data-file-name="count-new-originals.sh" class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-ne</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Please run with sudo!"</span> 1&gt;&amp;2<span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
<span class="k">fi

</span>find <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-print0</span> <span class="se">\</span>
| xargs <span class="nt">--null</span> lsattr <span class="se">\</span>
| <span class="nb">grep</span> <span class="nt">--</span> <span class="s2">"----------------------"</span> <span class="se">\</span>
| <span class="nb">wc</span> <span class="nt">--lines</span><span class="p">;</span>
</code></pre></div>  </div>

  <p>Breaking it down:</p>

  <ol>
    <li><code class="language-plaintext highlighter-rouge">if [ "$(id -u)" -ne 0 ]</code> - again, checks that we’re running as <code class="language-plaintext highlighter-rouge">root</code> or with <code class="language-plaintext highlighter-rouge">sudo</code>.</li>
    <li><code class="language-plaintext highlighter-rouge">find "$ORIGINALS" -type f -print0</code> - finds files in our originals folder. We use <code class="language-plaintext highlighter-rouge">-print0</code> to safely handle
filenames with weird characters in them.</li>
    <li><code class="language-plaintext highlighter-rouge">xargs --null lsattr</code> - for each file that <code class="language-plaintext highlighter-rouge">find</code> outputs we want to run <code class="language-plaintext highlighter-rouge">lsattr</code> - this will list any extended
attributes on each file.</li>
    <li><code class="language-plaintext highlighter-rouge">grep -- "----------------------"</code> - for each line (file) of output from <code class="language-plaintext highlighter-rouge">lsattr</code>, we’re only interested in lines
(files) that have no extended attributes set (files that have <code class="language-plaintext highlighter-rouge">i</code>mmutable set would show as
<code class="language-plaintext highlighter-rouge">----i-----------------</code>).</li>
    <li><code class="language-plaintext highlighter-rouge">wc --lines</code> - count the number of lines (files).</li>
  </ol>

</details>

<p>Neat! Now let’s deduplicate all of these files. As mentioned in the aside above, Takeout will include multiple copies
of each piece of media, as each one can appear in multiple albums. To deduplicate this and save you a bunch of hard
drive space we’ll use <code class="language-plaintext highlighter-rouge">jdupes</code>. This tool will search for files that are identical and (in our case) turn them into
filesystem hardlinks - which means that the same data on disk can be pointed to by multiple file names.</p>

<p>First we need to change all files back from immutable. This can be done quickly with <code class="language-plaintext highlighter-rouge">sudo chattr -R -i "$ORIGINALS"</code>.
Then we run <code class="language-plaintext highlighter-rouge">jdupes</code>, which has a lot of options, but the ones we want are:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>jdupes <span class="nt">--link-hard</span> <span class="nt">--recurse</span> <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span>
</code></pre></div></div>

<p>Aka:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--link-hard</code> - we want to hard-link all identical files together.</li>
  <li><code class="language-plaintext highlighter-rouge">--recurse</code> - consider all files within subdirectories of <code class="language-plaintext highlighter-rouge">$ORIGINALS</code> recursively.</li>
</ul>

<p>When this is done we’ll have potentially saved a lot of disk space!</p>

<details>
  <summary>Want to find out how much?</summary>

  <p>Here’s a short command that will tell you exactly how much space has been saved!</p>

  <div data-file-name="deduplication-space-savings.sh" class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-links</span> +1 <span class="nt">-printf</span> <span class="s1">'%i %s\n'</span> <span class="se">\</span>
| <span class="nb">awk</span> <span class="s1">'a[$1]++{sum+=$2}END{print sum}'</span> <span class="se">\</span>
| <span class="nb">numfmt</span> <span class="nt">--to</span><span class="o">=</span>iec-i <span class="nt">--suffix</span><span class="o">=</span>B
</code></pre></div>  </div>

  <p>Here’s the gist of what’s happening:</p>
  <ol>
    <li><code class="language-plaintext highlighter-rouge">find "$ORIGINALS" -type f</code>… - find all <code class="language-plaintext highlighter-rouge">f</code>iles in <code class="language-plaintext highlighter-rouge">$ORIGINALS</code>;
      <ul>
        <li>…<code class="language-plaintext highlighter-rouge">-links +1</code>… - that have more than one hardlink;</li>
        <li>…<code class="language-plaintext highlighter-rouge">-printf '%i %s\n'</code> - and output the file’s <code class="language-plaintext highlighter-rouge">inode</code> number and file size (in bytes).</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">awk 'a[$1]++{sum+=$2}END{print sum}'</code> - this line is a bit heavy, but here’s what the <code class="language-plaintext highlighter-rouge">awk</code> script is doing:
      <ul>
        <li>
          <p><code class="language-plaintext highlighter-rouge">a[$1]++</code></p>

          <p>Increment the value stored in <code class="language-plaintext highlighter-rouge">a[$1]</code> (where <code class="language-plaintext highlighter-rouge">$1</code> is going to be the <code class="language-plaintext highlighter-rouge">inode</code> number from each line). The <code class="language-plaintext highlighter-rouge">inode</code> is
the unique data on disk - multiple file paths hardlinked to the same data will have the same <code class="language-plaintext highlighter-rouge">inode</code> number.</p>
        </li>
        <li>
          <p><code class="language-plaintext highlighter-rouge">{sum+=$2}</code></p>

          <p>The <code class="language-plaintext highlighter-rouge">{sum+=$2}</code> part is a conditional clause - that means that if the value before it is “truthy” it will execute.
The first time a unique <code class="language-plaintext highlighter-rouge">inode</code> is encountered <code class="language-plaintext highlighter-rouge">a[$1]++</code> will post-increment to 1, returning 0. This is falsy, so
the conditional clause won’t run. Each time an inode is encountered after that, however, the value with be 1 or more,
which is a truthy value and the conditional clause will run. All the clause actually does (when run) is increment
the value <code class="language-plaintext highlighter-rouge">sum</code> (which starts at 0) by <code class="language-plaintext highlighter-rouge">$2</code> (the file size in bytes).</p>
        </li>
        <li>
          <p><code class="language-plaintext highlighter-rouge">END{print sum}</code> - when the script ends, print the value in <code class="language-plaintext highlighter-rouge">sum</code>.</p>
        </li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">numfmt --to=iec-i --suffix=B</code> - this converts the value of <code class="language-plaintext highlighter-rouge">sum</code> output by <code class="language-plaintext highlighter-rouge">awk</code> to an IEC size (e.g., <code class="language-plaintext highlighter-rouge">1024</code> would
be converted to <code class="language-plaintext highlighter-rouge">1.0KiB</code>).</li>
  </ol>

  <p>So as an example, say our “Originals” folder only contains three files:</p>

  <ul>
    <li>🖼️ <code class="language-plaintext highlighter-rouge">a.jpg</code></li>
    <li>🖼️ <code class="language-plaintext highlighter-rouge">b.jpeg</code></li>
    <li>📄 <code class="language-plaintext highlighter-rouge">sidecar.json</code></li>
  </ul>

  <p>And <code class="language-plaintext highlighter-rouge">a.jpg</code> and <code class="language-plaintext highlighter-rouge">b.jpeg</code> are both hardlinks to the same 1MiB of data, and <code class="language-plaintext highlighter-rouge">sidecar.json</code> is a 1KiB standalone file. When
we run our script, the <code class="language-plaintext highlighter-rouge">find</code> portion will output three lines:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12345 1048576
12345 1048576
67890 1024
</code></pre></div>  </div>

  <p>When <code class="language-plaintext highlighter-rouge">awk</code> gets these lines, it will perform the following:</p>

  <ul>
    <li>Line 1: Post-increment <code class="language-plaintext highlighter-rouge">a[12345]</code> (from 0 to 1), returning 0. 0 is falsy, so <code class="language-plaintext highlighter-rouge">{sum+=1048576}</code> doesn’t run.</li>
    <li>Line 2: Post-increment <code class="language-plaintext highlighter-rouge">a[12345]</code> (from 1 to 2), returning 1. 1 is truthy, so <code class="language-plaintext highlighter-rouge">{sum+=1048576}</code> runs - sum is now <code class="language-plaintext highlighter-rouge">1048576</code>.</li>
    <li>Line 3: Post-increment <code class="language-plaintext highlighter-rouge">a[67890]</code> (from 0 to 1), returning 0. 0 is falsy, so <code class="language-plaintext highlighter-rouge">{sum+=1024}</code> doesn’t run.</li>
    <li>End of input: <code class="language-plaintext highlighter-rouge">END{print sum}</code> runs, outputting <code class="language-plaintext highlighter-rouge">1048576</code>.</li>
  </ul>

  <p>Finally, <code class="language-plaintext highlighter-rouge">numfmt</code> converts <code class="language-plaintext highlighter-rouge">1048576</code> to <code class="language-plaintext highlighter-rouge">1.0MiB</code>, and we see our space savings is 1 megabyte! This is correct, as if
<code class="language-plaintext highlighter-rouge">b.jpeg</code> wasn’t hardlinked to <code class="language-plaintext highlighter-rouge">a.jpg</code> it would take an additional 1 megabyte.</p>

</details>

<h2 id="cleanup">Cleanup</h2>

<p>Finally, we can re-mark our files as <code class="language-plaintext highlighter-rouge">i</code>mmutable:</p>

<div data-file-name="make-files-immutable.sh" class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="s2">"</span><span class="nv">$ORIGINALS</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="nt">-print0</span> <span class="se">\</span>
| <span class="nb">sudo </span>xargs <span class="nt">-0</span> <span class="nt">-n</span> 1 chattr +i
</code></pre></div></div>

<p>Now we turn Photoprism back on, and tell it to re-index new files in the Originals folder. It will even intelligently
use the sidecar JSON files that Takeout exports to enrich each media item with additional metadata.</p>]]></content><author><name>Sidneys1</name></author><category term="other" /><category term="datahoarding" /><category term="self-hosting" /><category term="zfs" /><category term="photoprism" /><category term="truenas" /><summary type="html"><![CDATA[Google Photos is wonderful. It backs up my photos and videos, tags them, and makes them available to share with my family. But I also don’t trust that Google will never accidentally “loose” my photos. Here is the process I use to back up my Google Photos data to a self-hosted instance of Photoprism.]]></summary></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2024-02-01T00:00:00-05:00</published><updated>2024-02-01T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2024/02/01/reverse-engineering-a-win95-game-III.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÀ -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. In this part, we’ll investigate whether we can
enter an “editor mode”, hinted at within the <code class="language-plaintext highlighter-rouge">strings</code> contained within the program. There’s even a
✨<span class="shimmer">surprise ending</span>✨ that I didn’t see coming!</p>

<!--more-->
<hr />

<p>Here’s where we left off, investigating the disassembly of a function that references a mysterious string:
<code class="language-plaintext highlighter-rouge">*** EDITOR MODE ***</code>. Cleaning the disassembly up and commenting to be a bit to be more readable gives us:</p>

<div class="code-split-root" data-file-name=".cpp"><div class="code-split-scroll">

    <div style="--left: 8;" class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Because `param_1` from the disassembly (aka `this`) is passed to</span>
<span class="c1">// `CWnd::SetWindowTextA` at the end, this function probably belongs</span>
<span class="c1">// to a class inheriting `CWnd`.</span>
<span class="k">class</span> <span class="nc">CGameWnd</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CWnd</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">CGameWnd</span><span class="o">::</span><span class="n">_updateWindowTitle</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// Don't do anything if we're in fullscreen mode.</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">gFullscreen</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
	<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">unknown_334</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// If the variable at offset 0x334 is not 0/FALSE/NULL,</span>
		<span class="c1">// we have a file loaded.</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge" style="--left: 8;"><div class="highlight"><pre class="highlight"><code>		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">unknown_3714</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="c1">// If the variable at offset 0x3714 is 0/FALSE/NULL,</span>
			<span class="c1">// we're in "editor mode"... whatever that is!</span>
			<span class="c1">// Append text indicating this to the buffer.</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - *** EDITOR MODE ***"</span><span class="p">);</span>
		<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge" style="--left: 4;"><div class="highlight"><pre class="highlight"><code>	<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-cpp code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1">// Set the window title to the contents of the buffer.</span>
	<span class="k">this</span><span class="o">-&gt;</span><span class="n">SetWindowTextA</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>

  </div></div>

<p>Ok! So to activate editor mode, we need to <strong>1)</strong> not be fullscreen, <strong>2)</strong> have <code class="language-plaintext highlighter-rouge">CGameWnd-&gt;unknown_334</code> be non-zero,
and <strong>3)</strong> have <code class="language-plaintext highlighter-rouge">CGameWnd-&gt;unknown_3714</code> be zero. Enabling fullscreen (via the <samp>3d.ini</samp> file described in
part II) no longer seems to crash my game (that must have been a mistake of mine!). The game starts and plays in
fullscreen, and the title even updates between “Paused, Press ‘p’ to resume.” and “Running…” when we press
<kbd>P</kbd>!</p>

<div>

  <aside>

    <p>While I could use a debugger to change the value at runtime, this is the only place the value is read, so we can assume
that any editor mode functionality has also been stripped out…</p>

  </aside>

  <p>But try as I might, <span class="aside-attn">no amount of reverse engineering is allowing me to toggle the
<code class="language-plaintext highlighter-rouge">unknown_3714</code> variable</span>. No code even exists (that I can find) to change it, except during initialization or
loading of levels, when it’s always set to <code class="language-plaintext highlighter-rouge">TRUE</code>. So I have a theory: there <em>was</em> an editor mode, but its functionality
has been “removed” behind something like <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>.</p>

</div>

<p>Well then! Without a deus ex machina, it looks like we’ll never break into the “editor mode”. I reached out to the
community to see if anyone knew more about the game itself, or had heard of a source code leak for this nearly 30 year
old game. A few people were even so kind as to search Usenet for me. But nothing was turning up. A few months passed and
I’d pretty much given up on ever finishing this part III post.</p>

<h2 id="vindication"><a href="https://c.tenor.com/vV7u0Ur7I0YAAAAd/tenor.gif" target="_blank" referrerpolicy="no-referrer">Vindication!</a></h2>

<div class="chat rfloat">
	<div class="bubble from-them">
		<q>You could try downloading this SSK@<span class="blur">YoUTHinkYOUrecLeVeRdONtYou?</span>/SSPYTH.zip</q>
	</div>
	<div class="bubble from-them">
		<q>Its password seems to be the file name.</q>
	</div>
</div>

<p>Months after I’d given up I received an encrypted message, sent to the SimpleX address listed in my website footer. It
didn’t contain much more than a Freenet hash. I hurriedly installed a client and accessed the hash — the file
downloaded — the password worked — and inside? <span class="shimmer">Beautiful, wonderful source
code</span>, with “last modified” dates ranging from <em>December 1995 to January 1997</em>! And sure enough, there are several
instances of <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code> that block the “Editor Mode” from being used, as I suspected! In fact, editor mode is
implemented as a completely separate static library, that is only linked into the executable when editor mode is to be
used. No wonder none of the relevant code can be found when reverse engineering the released binary!</p>

<p>Now that we have source code and can fully analyze the game in the ground truth, let’s poke around and see what we can
find. The source code is laid out as follows:</p>

<ul>
  <li>📁 <samp>3DLIB</samp> - <em>The core 3D engine.</em>
    <ul>
      <li>📄 <em>Various Assembly, and C++ source and header files.</em></li>
    </ul>
  </li>
  <li>📁 <samp>EditLib</samp> - <em>Editor Mode functionality.</em>
    <ul>
      <li>📄 <em>Various C++ source and header files.</em></li>
    </ul>
  </li>
  <li>📁 <samp>RES</samp> - <em>The game icon in BMP and ICO formats.</em></li>
  <li>🔨 <em>Various Microsoft Developer Studio (Visual C++) files.</em></li>
  <li>📄 <em>Various C++ source and header files.</em></li>
  <li>📄 <em>Some example save files.</em></li>
  <li>⚙️ <samp>SSPYTH.EXE</samp> - <em>A compiled binary.</em></li>
  <li>🔧 <samp>3D.INI</samp> - <em>An example configuration file.</em></li>
</ul>

<h3 id="cheat-codes">Cheat Codes</h3>

<div>

  <aside>

    <p>A little more digging in Ghidra and I would have found them, as they print certain messages when activated and these
messages are visible as strings in the binary (even the unused codes!).</p>

  </aside>

  <p><span class="aside-attn">The game has a few cheat codes!</span> They can be activated by typing the code in during play,
as it keeps a buffer of the last 20 key presses. All cheat codes begin with <kbd>K</kbd> and are committed with
<kbd>L</kbd>:</p>

</div>

<div class="no-reverse">

  <table>
    <thead>
      <tr>
        <th style="text-align: right">                Cheat Code</th>
        <th style="text-align: center">Message</th>
        <th style="text-align: left">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>E</kbd><kbd>Y</kbd><kbd>1-4</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Add Key</samp></td>
        <td style="text-align: left">Gives the specified key (1-4).</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>W</kbd><kbd>N</kbd><kbd>0-9</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><samp>Add Weapon</samp></td>
        <td style="text-align: left">Gives the specified weapon (0-9) with max ammo.</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>V</kbd><kbd>U</kbd><kbd>R</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><samp>Add Strength, Shield</samp></td>
        <td style="text-align: left">Sets max strength, max shield, and dons the spacesuit.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>H</kbd><kbd>J</kbd><kbd>1-6</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><em>None</em></td>
        <td style="text-align: left">Gives the specified item (1-6), however items 2, 3, and 6 are not allowed to be given via this cheat.<br />The items 1-6 are: “health pack”, “light divider”, “time warper”, “drainer field”, “ultra drainer field,” and “reflection”.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>Y</kbd><kbd>H</kbd><kbd>R</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Add Everything</samp></td>
        <td style="text-align: left">Adds all keys, weapons, and allowed items.</td>
      </tr>
      <tr>
        <td style="text-align: right"><span class="aside-attn"><kbd><kbd>K</kbd><kbd>N</kbd><kbd>N</kbd><kbd>L</kbd></kbd></span></td>
        <td style="text-align: center"><samp>Problem Debug Mode ON</samp><br /><samp>Problem Debug Mode OFF</samp></td>
        <td style="text-align: left">Toggles a mode in which math problems’ expected answers are printed.</td>
      </tr>
      <tr>
        <td style="text-align: right"><kbd><kbd>K</kbd><kbd>01-27</kbd><kbd>L</kbd></kbd></td>
        <td style="text-align: center"><em>None</em></td>
        <td style="text-align: left">Go to level 01-27.</td>
      </tr>
    </tbody>
  </table>

  <aside>

    <p>The strings <code class="language-plaintext highlighter-rouge">Add Key</code>, <code class="language-plaintext highlighter-rouge">Add Everything</code>, and <code class="language-plaintext highlighter-rouge">Problem Debug Mode %s</code> do actually exist in the release binary, but the
code to activate them (as well as the <code class="language-plaintext highlighter-rouge">KHJ#L</code> code) is not present. The source code I have does not have any mechanism
to remove it (e.g., a preprocessor directive), so my assumption is that some of the cheat codes were removed from the
“final” build of the game, but that these changes were not committed to the version of the source code I have access to.</p>

  </aside>

</div>

<h3 id="building-a-27-year-old-game">Building a 27 Year Old Game</h3>

<div class="clearfix">

  <div class="carousel__holder rfloat" style="" data-height="300px">
    <div id="carousel0" class="carousel">
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0a" checked="checked" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0b" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0c" />
        
          <input class="carousel__activator" type="radio" name="carousel0" id="0d" />
        
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0d">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0b">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0a">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0c">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0b">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0d">&gt;</label>
          </div>
        
          
          
          
          
          <div class="carousel__controls">
              <label class="carousel__control carousel__control--backward" for="0c">&lt;</label>
              <label class="carousel__control carousel__control--forward" for="0a">&gt;</label>
          </div>
        
        <div class="carousel__track">
          <ul>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/dev-studio-opt.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/dev-studio-opt.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/open-workspace-opt.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/open-workspace-opt.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/select-project.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/select-project.png" style="" /></li>
            
            <li class="carousel__slide"><img alt="/images/reverse-engineering-a-win95-game-III/rebuild-all.png" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/rebuild-all.png" style="" /></li>
            
          </ul>
        </div>
        <div class="carousel__indicators">
            
              <label class="carousel__indicator" for="0a"></label>
            
              <label class="carousel__indicator" for="0b"></label>
            
              <label class="carousel__indicator" for="0c"></label>
            
              <label class="carousel__indicator" for="0d"></label>
            
        </div>
    </div>
</div>

  <style>
.carousel__holder {
	width: 100%;
	position: relative;
	padding-bottom: 300px;
	margin: 1rem 0 1rem;
}

@media screen and (max-width: 1800px) {
	.carousel__holder {
		padding-bottom: calc(min(40vh, 300px));
	}
}

@media screen and (min-width: 1800px) {
	.carousel__holder:is(.rfloat, .lfloat) {
		padding-bottom: calc(min(40%, 300px));
	}
}

.carousel {
  height: 100%;
  width: 100%;
  overflow: hidden;
  text-align: center;
  position: absolute;
  padding: 0;
}
.carousel__controls,
.carousel__activator {
  display: none;
}

.carousel__activator:nth-of-type(1):checked ~ .carousel__track {
  -webkit-transform: translateX(-000%);
          transform: translateX(-000%);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1) {
  opacity: 1;
}

.carousel__activator:nth-of-type(2):checked ~ .carousel__track {
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__slide:nth-of-type(2) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__controls:nth-of-type(2) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(2):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(2) {
  opacity: 1;
}

.carousel__activator:nth-of-type(3):checked ~ .carousel__track {
  -webkit-transform: translateX(-200%);
          transform: translateX(-200%);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__slide:nth-of-type(3) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__controls:nth-of-type(3) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(3):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(3) {
  opacity: 1;
}

.carousel__activator:nth-of-type(4):checked ~ .carousel__track {
  -webkit-transform: translateX(-300%);
          transform: translateX(-300%);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__slide:nth-of-type(4) {
  transition: opacity 0.5s, -webkit-transform 0.5s;
  transition: opacity 0.5s, transform 0.5s;
  transition: opacity 0.5s, transform 0.5s, -webkit-transform 0.5s;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__controls:nth-of-type(4) {
  display: block;
  opacity: 1;
}
.carousel__activator:nth-of-type(4):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(4) {
  opacity: 1;
}


.carousel__control {
  height: 100%;
  vertical-align: middle;
  /* width: 30px; */
  margin-top: -15px;
  top: calc(50% - 0.5em);
  position: absolute;
  display: block;
  cursor: pointer;
  /* border-width: 5px 5px 0 0;
  border-style: solid;
  border-color: #fafafa; */
  font-size: 48pt;
  color: #fafafa;
  font-weight: 900;
  text-shadow: 0 0 10px  black;
  opacity: 0.35;
  /* opacity: 1; */
  outline: 0;
  z-index: 3;
  transition: opacity 250ms linear;
  /* box-shadow: 0 0 10px black; */
}
.carousel__control:hover {
  opacity: 1;
  transition: opacity 250ms linear;
}
.carousel__control--backward {
  left: 20px;
  /* -webkit-transform: rotate(-135deg);
          transform: rotate(-135deg); */
}
.carousel__control--forward {
  right: 20px;
  /* -webkit-transform: rotate(45deg);
          transform: rotate(45deg); */
}
.carousel__indicators {
  position: absolute;
  bottom: 20px;
  width: 100%;
  text-align: center;
}
.carousel__indicator {
  height: 10px;
  width: 10px;
  border-radius: 100%;
  display: inline-block;
  z-index: 2;
  cursor: pointer;
  opacity: 0.35;
  margin: 0 2.5px 0 2.5px;
  box-shadow: 0 0 10px black;
  transition: opacity 250ms linear;
}
.carousel__indicator:hover {
  opacity: 0.75;
  transition: opacity 250ms linear;
}
.carousel__track {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  transition: -webkit-transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s;
  transition: transform 0.5s ease 0s, -webkit-transform 0.5s ease 0s;
}
.carousel__track .carousel__slide {
  display: flex;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  opacity: 1;
}

.carousel__track .carousel__slide:nth-of-type(1) {
  -webkit-transform: translateX(000%);
          transform: translateX(000%);
}

.carousel__track .carousel__slide:nth-of-type(2) {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
}

.carousel__track .carousel__slide:nth-of-type(3) {
  -webkit-transform: translateX(200%);
          transform: translateX(200%);
}

.carousel__track .carousel__slide:nth-of-type(4) {
  -webkit-transform: translateX(300%);
          transform: translateX(300%);
}


.carousel--scale .carousel__slide {
  -webkit-transform: scale(0);
          transform: scale(0);
}
.carousel__slide {
  height: 100%;
  position: absolute;
  opacity: 0;
  overflow: hidden;

  /* background-size: contain;
  background-repeat: no-repeat;
  background-position: center; */
}
.carousel__slide img {
	display: block;
	width: auto;
	height: auto;
	max-width: 100%;
	max-height: 100%;
	box-shadow: unset;
}
.carousel__slide img:hover {
	box-shadow: unset;
}

.carousel__slide .overlay {height: 100%;}
.carousel--thumb .carousel__indicator {
  height: 30px;
  width: 30px;
}
.carousel__indicator {
  background-color: #fafafa;
}

.carousel__slide:nth-of-type(1),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(1) {
}

.carousel__slide:nth-of-type(2),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(2) {
}

.carousel__slide:nth-of-type(3),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(3) {
}

.carousel__slide:nth-of-type(4),
.carousel--thumb .carousel__indicators .carousel__indicator:nth-of-type(4) {
}

</style>

  <p>Of course, the pièces de résistance of having access to the source code: editor mode! Let’s see what it takes to get it
working. First, we’ll need to get the source code building. Thanks to the lovely project <a href="https://dosbox-x.com/">DOSBox-X</a>, emulating
older Windows operating systems is as simple as following <a href="https://dosbox-x.com/wiki/Guide%3AInstalling-Windows-95">a guide</a>. I also sourced the following disk images:
<a href="https://archive.org/details/win-95-osr-2">Windows 95 OSR2</a><sup id="fnref:osr2" role="doc-noteref"><a href="#fn:osr2" class="footnote" rel="footnote">1</a></sup>, <a href="https://winworldpc.com/product/visual-c/4x">Visual C++ 4.2</a>, the <a href="https://archive.org/details/gamesdk">DirectX 1.0 SDK</a>, and the
<a href="https://archive.org/details/the-net-cd">ActiveMovie SDK</a><sup id="fnref:amalt" role="doc-noteref"><a href="#fn:amalt" class="footnote" rel="footnote">2</a></sup> (this disk contains many other interesting installers as well). If you’re planning on
building up such a virtual machine yourself, you’ll have to find your own product keys, sorry.</p>

  <p>Breezing through the guide leaves us with a fully functional Windows 95 install, with Visual C++ 4.2 (which includes the
Microsoft Developer Studio IDE - which we’ll need), the DirectX SDK, and the ActiveMovie SDK. Our source code contains
an <code class="language-plaintext highlighter-rouge">.mdp</code> file, which is a Developer Studio project, so let’s open it and build the default project with
<kbd><kbd>Ctrl</kbd>+<kbd>B</kbd></kbd>!</p>

</div>

<div class="code-split-root" data-file-name=".log"><div class="code-split-scroll">

    <div style="clear: both;" class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------Configuration: 3dlib - Win32 Debug--------------------
Compiling...
</code></pre></div>    </div>

    <div class="language-plaintext highlighter-rouge code-split"><div class="highlight">
<pre class="highlight">
<code>decomp.cpp
<span class="err">fatal error C1083: Cannot open source file: 'C:\Sspyth\3dlib\decomp.cpp': No such file or directory</span>

Error executing cl.exe.
Sspyth.exe - 1 error(s), 4 warning(s)
</code></pre></div></div>

  </div></div>

<p>Alright, some errors, but nothing we can’t solve. The first thing we notice is we’re missing a file
<samp>3DLIB\DECOMP.CPP</samp>. Poking around, we find there’s a file named <samp>3DLIB\aviDECOMP.CPP</samp>. A simple
file rename gets us past this error. Re-running the build gives us another error, now in the linking process. It can’t
seem to find the 3DLib and ActiveMovie libraries:</p>

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>e_frame.cpp
.\.\ztest.hpp(9) : <span class="err">fatal error C1083: Cannot open include file: 'strmif.h': No such file or directory</span>
</code></pre></div></div>

<div class="float-reverse">

  <p class="rfloat"><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/game-not-installed.png" alt="Game not installed" /></p>

  <p>That’s as easy as adding the full path to the ActiveMovie SDK’s include directory to the compiler path, and adding the
<samp>lib\StrmBase.lib</samp> file and the 3DLib output file to the linker properties. Our project now builds, and we
can verify that the game runs! Well, it tells us <samp>Game not installed, run the setup program.</samp>, but commenting
out a few lines in <code class="language-plaintext highlighter-rouge">CSspythApp::InitInstance()</code> fixes that:</p>

</div>

<div style="clear: both;" data-file-name="SSPYTH.CPP" class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Check for game installed</span>
<span class="c1">// char buffer[260];</span>
<span class="c1">// strcpy(buffer, "");</span>
<span class="c1">// GetRegString("Version", buffer, 20);</span>
<span class="c1">// if (strcmp(SSP_VERSION, buffer)) {</span>
<span class="c1">// 	AfxMessageBox("Game not installed, run the setup program.", MB_OK | MB_ICONSTOP);</span>
<span class="c1">// 	return FALSE;</span>
<span class="c1">// }</span>
</code></pre></div></div>

<p>Installing the game and pointing the <code class="language-plaintext highlighter-rouge">pakpath</code> setting in <samp>3D.INI</samp> to the install directory allows the game
to load assets and run!</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/game-running.png" alt="Game running" /></p>

<h3 id="editor-mode">Editor Mode</h3>

<p>So what do we need to enable editor mode? Let’s create a new build configuration just for this use case. We already know
we have to add <code class="language-plaintext highlighter-rouge">/D EDITOR</code> to the compiler settings, and doing so builds… and fails. Why now?</p>

<div class="language-plaintext highlighter-rouge" data-file-name=".log"><div class="highlight">
<pre class="highlight">
<code>sspyth.obj : <span class="err">error LNK2001: unresolved external symbol "public: void __thiscall CEditFrame::EditDoor(void *)"(?EditDoor@CEditFrame@@QAEXPAX@Z)
sspyth__/Sspyth.exe : fatal error LNK1120: 7 unresolved externals</span>
Error executing link.exe.
Sspyth.exe - 8 error(s), 0 warning(s)
</code></pre></div></div>

<p>Ah, EditLib! Let’s add that to our linker options as well and try again. This time the build succeeds and
we can run the game as before. Now, how do we activate it? We know so far that: <strong>1)</strong> the game has to be in windowed mode,
so we set <code class="language-plaintext highlighter-rouge">fullscreen=0</code> in <samp>3D.INI</samp>; and <strong>2)</strong> there are some mystery values in the main window class that must be
set just-so to be “in editor mode”. Thankfully now we can look at actual code! It turns out our
<code class="language-plaintext highlighter-rouge">CGameWnd::_updateWindowTitle()</code> decompilation above is actually named <code class="language-plaintext highlighter-rouge">CMainFrame::ShowPauseState()</code>:</p>

<div data-file-name="MainFrm.cpp" class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">CMainFrame</span><span class="o">::</span><span class="n">ShowPauseState</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">g_FullScreen</span><span class="p">)</span>
		<span class="k">return</span><span class="p">;</span>

	<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">m_game</span><span class="p">.</span><span class="n">m_pscene</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">char</span> <span class="n">drive</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="n">directory</span><span class="p">[</span><span class="mi">200</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">30</span><span class="p">],</span> <span class="n">extension</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
		<span class="n">_splitpath</span><span class="p">(</span><span class="n">FileName</span><span class="p">,</span> <span class="n">drive</span><span class="p">,</span> <span class="n">directory</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">extension</span><span class="p">);</span>
		<span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">"  S.S. Pythagoras  -  '%s'  "</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">m_game</span><span class="p">.</span><span class="n">m_GameMode</span><span class="p">)</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - *** EDITOR MODE ***"</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">m_game</span><span class="p">.</span><span class="n">Paused</span><span class="p">())</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - Paused,  press 'p' to resume."</span><span class="p">);</span>
		<span class="k">else</span>
			<span class="n">strcat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">" - Running..."</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">"  S.S. Pythagoras  -  NO ACTIVE LEVEL"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">SetWindowText</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="float-reverse">

  <div class="rfloat"><div class="code-split-root" data-file-name="GAME.CPP"><div class="code-split-scroll">

        <div style="--left: 4" class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">CGame</span><span class="o">::</span><span class="n">Update</span><span class="p">(</span><span class="n">CKeyboard</span><span class="o">&amp;</span> <span class="n">keys</span><span class="p">)</span> <span class="p">{</span>
</code></pre></div>        </div>

        <div class="language-c++ code-split highlighter-rouge" style="--left: 4"><div class="highlight"><pre class="highlight"><code>	<span class="k">if</span> <span class="p">(</span><span class="n">keys</span><span class="p">.</span><span class="n">KeyDownWasUp</span><span class="p">(</span><span class="sc">'G'</span><span class="p">))</span>	<span class="p">{</span>
		<span class="n">m_GameMode</span> <span class="o">=</span> <span class="o">!</span><span class="n">m_GameMode</span><span class="p">;</span>
		<span class="n">GetMainFrame</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ShowPauseState</span><span class="p">();</span>
	<span class="p">}</span>
</code></pre></div>        </div>

        <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">}</span>
</code></pre></div>        </div>

      </div></div></div>

  <p>Awesome, my guesses were <em>really</em> close. <code class="language-plaintext highlighter-rouge">unknown_334</code> is <code class="language-plaintext highlighter-rouge">m_game.m_pscene</code>, and <code class="language-plaintext highlighter-rouge">unknown_3714</code> is <code class="language-plaintext highlighter-rouge">m_game.m_GameMode</code>.
Let’s see if I’m right, and <code class="language-plaintext highlighter-rouge">m_GameMode</code> is changed with a <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>-surrounded key input. <code class="language-plaintext highlighter-rouge">m_GameMode</code> is only
changed in two places in the code, both in <samp>GAME.CPP</samp>. The first is during initialization, where it is set to
<code class="language-plaintext highlighter-rouge">TRUE</code>. The second place is further down the file, in <code class="language-plaintext highlighter-rouge">CGame::Update(CKeyboard&amp;)</code>:</p>

</div>

<p>Ok, this isn’t surrounded by <code class="language-plaintext highlighter-rouge">#ifdef EDITOR</code>… I suspect again that the “final” version of the game saw a few code
changes that weren’t included in the copy of the code I have. But a little digging shows that <code class="language-plaintext highlighter-rouge">m_GameMode</code> alone has no
real effect, because just a little further down is the code to actually <em>perform</em> editor mode:</p>

<div class="code-split-root" data-file-name="GAME.CPP"><div class="code-split-scroll">

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">////////////////////////////////////////// EDITOR</span>
<span class="cp">#ifdef EDITOR
</span></code></pre></div>    </div>

    <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">keys</span><span class="p">.</span><span class="n">KeyDownWasUp</span><span class="p">(</span><span class="sc">'I'</span><span class="p">))</span> <span class="p">{</span>
	<span class="n">GetApp</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ShowEditFrame</span><span class="p">();</span>
	<span class="n">GetApp</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">m_editframe</span><span class="o">-&gt;</span><span class="n">OnInsertButton</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-c++ code-split highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#endif
</span></code></pre></div>    </div>

  </div></div>

<div>

  <aside>

    <p>I’ve skipped over some steps I had to take related to the release version PAK files referencing unused — and
unincluded — textures and models. I suspect the released game runs fine without them because it only loads used
textures, while the editor mode loads all textures (in case you want to use them) that are defined. As I don’t have the
original game assets (I only have source code and the PAK files distributed with the released game) I can’t recover
these textures and models, and so I just copied existing files and gave them the expected name.</p>

    <p>Another item of interest is that in activating editor mode <em>no</em> textures will load properly, as the files on-disk are
expected to be <a href="https://en.wikipedia.org/wiki/PCX">PCX</a> format, but when packing a PAK file the raw data is stored
unencoded (likely to increase loading speed). My extractor from Part I, PAKrat, just extracts the raw data into the
specified file path, leaving me with invalid PCX files. The actual format, as stored in the PAK, is like so:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="p">{</span>
  <span class="c1">// Width and height of the data:</span>
  <span class="kt">int</span> <span class="n">columns</span><span class="p">,</span> <span class="n">rows</span><span class="p">;</span>
  <span class="c1">// The data itself (pretend):</span>
  <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">[</span><span class="n">columns</span> <span class="o">*</span> <span class="n">rows</span><span class="p">];</span>
  <span class="c1">// The width, height, and x-y offset</span>
  <span class="c1">// of the desired sub-image:</span>
  <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">offset_x</span><span class="p">,</span> <span class="n">offset_y</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>    </div>

  </aside>

  <p style="clear: both;">So, we need to press <kbd>G</kbd> to switch the game mode, and then <kbd>I</kbd> (I suspect for <strong>I</strong>nsert or
<strong>I</strong>nspect) <span class="aside-attn">will show the editor controls</span>! Once editor mode is active you can also
press <kbd>E</kbd> to <strong>E</strong>dit door and entity instances, or <kbd>T</kbd> to edit the focused object’s <strong>T</strong>ype. Let’s
give it a go:</p>

  <div class="popunder">
	
		<img class="pop" style="" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/editor-mode-thumb.png" alt="Editor Mode" title="Editor Mode" onclick="document.getElementById('173-editor-mode').showModal()" />
	
	<em>Click to zoom.</em>
</div>

  <dialog class="popover" id="173-editor-mode" onclick="document.getElementById('173-editor-mode').close()">
	<!-- <form method="dialog">
		<button class="close">X</button>
	  </form> -->
	<img class="pop-in" src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-III/editor-mode-opt.png" alt="Editor Mode" title="Editor Mode" loading="lazy" />
</dialog>

</div>

<h2 id="next-steps">Next Steps</h2>

<p>If there’s ever going to be a follow-up to this three-part post, there’s a few things I’d like to try:</p>

<ul>
  <li>Add modern <kbd>W</kbd><kbd>A</kbd><kbd>S</kbd><kbd>D</kbd> keyboard controls — the current control scheme is
<kbd>A</kbd>/<kbd>Z</kbd> for forward/back, and <kbd>Shift</kbd>/<kbd>X</kbd> for left/right.</li>
  <li>Get the game running on modern versions of Windows — I’d like to do this by getting it running “well” on each
newer OS starting with Windows XP and moving forward.</li>
  <li>Properly handle texture files when extracting — PAKrat (from part I) doesn’t extract the PCX textures correctly.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:osr2" role="doc-endnote">
      <p>The <a href="https://en.wikipedia.org/wiki/Windows_95#Editions">3rd release of Windows 95</a>, “OEM Release 2”, added support for FAT32 drives. <a href="#fnref:osr2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:amalt" role="doc-endnote">
      <p>Alternative source in disk 4 of <a href="https://archive.org/details/storm-1">Storm #1 - Internet Archive</a>. <a href="#fnref:amalt" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, we’ll investigate whether we can enter an “editor mode”, hinted at within the strings contained within the program. There’s even a ✨surprise ending✨ that I didn’t see coming!]]></summary></entry><entry><title type="html">Colloquial Skeuomorphisms</title><link href="https://sidneys1.github.io/Skeuomorphisms/" rel="alternate" type="text/html" title="Colloquial Skeuomorphisms" /><published>2023-08-18T00:00:00-04:00</published><updated>2023-08-18T00:00:00-04:00</updated><id>https://sidneys1.github.io/colloquial-skeuomorphisms</id><content type="html" xml:base="https://sidneys1.github.io/Skeuomorphisms/"><![CDATA[<!-- cSpell:words skeuomorph -->
<!-- cSpell:ignore ˈskyo͞oəˌmôrf -->

<p>Language is strange – why do we say “hang up the phone” even when using a cell phone? This page documents some
examples of “skeuomorphisms” in our common vernacular.</p>

<p>I’ll be updating this page as I come across more!</p>

<!--more-->

<div class="card float">
  <dl>
    <dt><ruby><em>skeuomorph</em><rp>(</rp><rt>[ˈskyo͞oəˌmôrf]</rt><rp>)</rp></ruby></dt>
    <dd>An object or feature which imitates the design of a similar artifact made from another material.</dd>
    <dd><strong>In computing:</strong> An element of a graphical user interface which mimics a physical object.</dd>
  </dl>
</div>

<ul id="markdown-toc">
  <li><a href="#telecommunications" id="markdown-toc-telecommunications">Telecommunications</a></li>
  <li><a href="#computers-and-the-internet" id="markdown-toc-computers-and-the-internet">Computers and the Internet</a></li>
  <li><a href="#media-and-electronics" id="markdown-toc-media-and-electronics">Media and Electronics</a></li>
  <li><a href="#home" id="markdown-toc-home">Home</a></li>
  <li><a href="#transportation" id="markdown-toc-transportation">Transportation</a></li>
</ul>

<h1 id="telecommunications">Telecommunications</h1>
<hr />

<dl>
  <dt><em>📞</em> <em>“<u>Hang</u> up the Phone”</em></dt>
  <dd>Wall-mounted landline telephones had a hook to “hang” the receiver on.</dd>
  <dt><em>🗣️</em> <em>“<u>Call</u> me”</em></dt>
  <dd>You don’t have to shout anymore.</dd>
  <dt><em>☎️</em> (Re)<u>dial</u></dt>
  <dd>Early telephones had an actual rotary dial to select the numbers you would call.</dd>
  <dt><em>🛎️</em> <em>“The Phone is <u>Ringing</u>”</em></dt>
  <dt><em>🔊</em> <u>Ring</u>tone</dt>
  <dd>Early telephones had an actual bell that would ring when a specific “<a href="https://en.wikipedia.org/wiki/Ringing_tone">ringing tone</a>” was received (in
North America this is alternating 440 Hz and 480 Hz tones). The ringing tone required to set off the bell
<a href="https://en.wikipedia.org/wiki/Ringing_tone#National_characteristics">differed from region to region</a>. The term “ringtone” eventually became synonymous with
being able to <a href="https://en.wikipedia.org/wiki/Ringing_tone#Personalized_ringing_tones">change the sound</a> of an electronic telephone’s “ringing” audio.</dd>
</dl>

<h1 id="computers-and-the-internet">Computers and the Internet</h1>
<hr />

<dl>
  <dt><em>✂️</em> <u>Cut</u> and <u>Paste</u></dt>
  <dd>Editing on paper involved actual scissors and glue.</dd>
  <dt><em>📰</em> Message <u>Board</u></dt>
  <dd>A community message board is often a literal corkboard.</dd>
  <dt><em>🌎</em> <em>“Get On<u>line</u>”</em></dt>
  <dd>Before Wi-Fi, computers needed to be physically connected to a phone line and modem to access the Internet.</dd>
  <dt><em>📧</em> Email <u>CC</u></dt>
  <dd>To send a physical letter in duplicate, you would need to create a <dfn><abbr title="Carbon Copy">CC</abbr></dfn>,
or “<a href="https://en.wikipedia.org/wiki/Carbon_copy">Carbon Copy</a>”.</dd>
</dl>

<h1 id="media-and-electronics">Media and Electronics</h1>
<hr />

<dl>
  <dt><em>⏪</em> Re<u>wind</u></dt>
  <dt><em>📼</em> <em>“<u>Tape</u> it”</em></dt>
  <dt><em>📹</em> <em>“Get it on <u>Tape</u>”</em></dt>
  <dd>Cassettes, the primary storage medium before optical disks, contained magnetic tape wound around two spindles.</dd>
  <dt><em>📻</em> <em>“Stay <u>Tune</u>d”</em></dt>
  <dt><em>🎛️</em> <u>Tune</u> In / <u>Tune</u> Out</dt>
  <dd>Radio and television broadcasts require frequency matching (just like tuning an instrument).</dd>
  <dt><em>📴</em> <u>Turn</u> On/Off</dt>
  <dd>Most early electronic devices featured a rotating power selector.</dd>
</dl>

<h1 id="home">Home</h1>
<hr />

<dl>
  <dt><em>🧊</em> <u>Ice</u>box</dt>
  <dd>Before refrigeration, keeping food fresh involved actual blocks of ice.</dd>
  <dt><em>🪔</em> <em>“<u>Turn</u> out the Light”</em></dt>
  <dd>Gas and oil lamps had a dial which, when turned, would snuff out the flame.</dd>
</dl>

<h1 id="transportation">Transportation</h1>
<hr />

<dl>
  <dt><em>🚗</em> <em>“<u>Roll</u> the Window Up/Down”</em></dt>
  <dd>Sliding automobile passenger windows used to be operated via a hand crank.</dd>
</dl>]]></content><author><name>Sidneys1</name></author><category term="other" /><category term="linguistics" /><summary type="html"><![CDATA[Language is strange – why do we say “hang up the phone” even when using a cell phone? This page documents some examples of “skeuomorphisms” in our common vernacular. I’ll be updating this page as I come across more!]]></summary></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-03-16T00:00:00-04:00</published><updated>2023-03-16T00:00:00-04:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/03/16/reverse-engineering-a-win95-game-II.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun Ghidra -->
<!-- cSpell:ignore sspyth MATHINV mbscpy strcmp -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. In this part, we’ll investigate disassembling and
reverse engineering the binary to identify an undocumented settings file format.</p>

<!--more-->
<hr />

<p>As our reverse engineering tool of choice, we’ll be using the National Security Agency’s
<a href="https://ghidra-sre.org/">Ghidra</a>. This powerful tool allows us to disassemble the <code class="language-plaintext highlighter-rouge">MATHINV.EX_</code> binary that is bundled
on the disk. The first bit of information we get when ingesting the binary in Ghidra is an “Import Results Summary”
dialog, with information about the binary itself. Here’s some excerpts:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Compiler:                     visualstudio:unknown
Debug Misc:                   Release/sspyth.exe
PDB File:                     sspyth.pdb
PE Property[FileDescription]: SSPYTH MFC Application
</code></pre></div></div>

<p>Interesting - the project in visual studio seems to have originally been called “sspyth”, short for “S.S. Pythagoras”,
the name of the protagonist’s ship within the game. Let’s try and identify the entrypoint. This is a Windows MFC program,
which means the actual entrypoint is “runtime code” that will identify the main MFC module within the program and
initialize it. So instead of looking for this entrypoint (which Ghidra finds for us and names <code class="language-plaintext highlighter-rouge">entry</code>), we will try and
find the main MFC module initializer by searching for something we know happens early in the program’s execution.</p>

<p>When first run, the game checks that DirectX, DirectPlay, and the game CD are inserted. Using Ghidra’s
<kbd class="menu"><kbd>Search</kbd><kbd>For Strings...</kbd></kbd> tool we’ll find the “Please insert CD” message.</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/string-search.png" alt="string search" /></p>

<p>Clicking the result will select the data in the CodeBrowser, and right-clicking the automatically created symbol allows
us to click <kbd class="menu"><kbd>References</kbd><kbd>Find references to s_Please_insert...</kbd></kbd> to find all
references to this particular value within the codebase. Doing so brings up one result at 0x0042cb86. Clicking the
result takes us to the relevant address. The disassembly shows us a function called <code class="language-plaintext highlighter-rouge">FUN_0042ca2f(CWinApp *param_1)</code>,
which we’ll renamed to <code class="language-plaintext highlighter-rouge">CWinAppEntrypoint</code>. As this function is not called anywhere else in the code, we can be fairly
confident that this is only called by runtime code that gets its address programmatically.</p>

<details>
  <summary>Disassembly of <code>CWinAppEntrypoint</code> (click to expand).</summary>

  <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">CWinAppEntrypoint</span><span class="p">(</span><span class="n">CWinApp</span> <span class="o">*</span><span class="n">param_1</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="o">*</span><span class="n">puVar2</span><span class="p">;</span>
  <span class="kt">FILE</span> <span class="o">*</span><span class="n">_File</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="n">local_28c</span><span class="p">;</span>
  <span class="n">BYTE</span> <span class="n">local_21c</span> <span class="p">[</span><span class="mi">264</span><span class="p">];</span>
  <span class="kt">char</span> <span class="n">local_114</span> <span class="p">[</span><span class="mi">260</span><span class="p">];</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">pvStack_10</span><span class="p">;</span>
  <span class="n">undefined</span> <span class="o">*</span><span class="n">puStack_c</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="n">local_8</span><span class="p">;</span>

  <span class="n">local_8</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
  <span class="n">puStack_c</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">LAB_0042cc3d</span><span class="p">;</span>
  <span class="n">pvStack_10</span> <span class="o">=</span> <span class="n">ExceptionList</span><span class="p">;</span>
  <span class="n">ExceptionList</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pvStack_10</span><span class="p">;</span>
  <span class="n">CWinApp</span><span class="o">::</span><span class="n">Enable3dControlsStatic</span><span class="p">(</span><span class="n">param_1</span><span class="p">);</span>
  <span class="n">CWinApp</span><span class="o">::</span><span class="n">LoadStdProfileSettings</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_00495378</span><span class="p">);</span>
  <span class="n">FUN_0042d603</span><span class="p">(</span><span class="n">s_Version_0049537c</span><span class="p">,</span><span class="n">local_21c</span><span class="p">);</span>
  <span class="n">iVar1</span> <span class="o">=</span> <span class="n">_strcmp</span><span class="p">(</span><span class="n">s_1</span><span class="p">.</span><span class="mo">00</span><span class="o">-</span><span class="n">Rel_00495384</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">AfxMessageBox</span><span class="p">(</span><span class="n">s_Game_not_installed</span><span class="p">,</span><span class="n">_run_the_setu_00495390</span><span class="p">,</span><span class="mh">0x10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">FUN_0042cc47</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953bc</span><span class="p">);</span>
  <span class="nl">FID_conflict:</span><span class="n">__mbscpy</span><span class="p">(</span><span class="n">local_114</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953c0</span><span class="p">);</span>
  <span class="n">GetPrivateProfileStringA</span>
            <span class="p">(</span><span class="n">s_MazePath_004953dc</span><span class="p">,</span><span class="n">s_pakpath_004953d4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953d0</span><span class="p">,</span><span class="n">local_114</span><span class="p">,</span><span class="mh">0x104</span><span class="p">,</span>
             <span class="n">s_</span><span class="p">.</span><span class="err">\</span><span class="mi">3</span><span class="n">d</span><span class="p">.</span><span class="n">ini_004953c4</span><span class="p">);</span>
  <span class="n">puVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">_strlen</span><span class="p">(</span><span class="n">local_114</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">puVar2</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">FUN_0042d603</span><span class="p">(</span><span class="n">s_pakpath_004953e8</span><span class="p">,</span><span class="n">local_21c</span><span class="p">);</span>
    <span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="n">s_game</span><span class="p">.</span><span class="n">pak_004953f0</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">_File</span> <span class="o">=</span> <span class="n">FID_conflict</span><span class="o">:</span><span class="n">__wfopen</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">local_21c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">DAT_004953fc</span><span class="p">),</span> <span class="n">_File</span> <span class="o">==</span> <span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span>  <span class="p">{</span>
      <span class="n">iVar1</span> <span class="o">=</span> <span class="n">AfxMessageBox</span><span class="p">(</span><span class="n">s_Please_insert_the_Math_Invaders_C_00495400</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">FUN_0042cc47</span><span class="p">();</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">puVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">_fclose</span><span class="p">(</span><span class="n">_File</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">AfxSetAllocStop</span><span class="p">(</span><span class="mh">0x53b0</span><span class="p">);</span>
  <span class="n">local_8</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">puVar2</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">local_28c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="n">local_28c</span> <span class="o">=</span> <span class="n">FUN_0042e186</span><span class="p">(</span><span class="n">puVar2</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">local_8</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x1c</span><span class="p">)</span> <span class="o">=</span> <span class="n">local_28c</span><span class="p">;</span>
  <span class="n">FUN_0042e2e0</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x1c</span><span class="p">));</span>
  <span class="n">FUN_0042cc47</span><span class="p">();</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>  </div>

</details>

<p>Alright! We can already see some useful things here. <code class="language-plaintext highlighter-rouge">FUN_0042d603</code> gets a value from the game’s Registry key, so that
line just checks that the program is installed. In fact, we can just rename <code class="language-plaintext highlighter-rouge">FUN_0042d603</code> to <code class="language-plaintext highlighter-rouge">GetValueFromRegistry</code>.
Further down we see a <code class="language-plaintext highlighter-rouge">GetPrivateProfileStringA </code> call. I had to look this function up as it’s somewhat esoteric, but it
and the whole <code class="language-plaintext highlighter-rouge">GetPrivateProfile*</code> still supported in today’s Win32 API!</p>

<blockquote>
  <p>Retrieves a string from the specified section in an initialization file.
<cite><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getprivateprofilestringa"><code class="language-plaintext highlighter-rouge">GetPrivateProfileStringA</code> function (<code class="language-plaintext highlighter-rouge">winbase.h</code>) - Win32 apps | Microsoft Learn</a></cite></p>
</blockquote>

<p>This description undersells this singular function call - when called the <code class="language-plaintext highlighter-rouge">GetPrivateProfileXxx</code> family of APIs will
open and read a given <code class="language-plaintext highlighter-rouge">*.ini</code> file, parse it, and return the value in the specified <code class="language-plaintext highlighter-rouge">[section]</code> and <code class="language-plaintext highlighter-rouge">key=</code>. If the given
file does not exist, it will return the default value.</p>

<p>And, using Ghidra’s Symbol Tree, we can find all calls to the <code class="language-plaintext highlighter-rouge">GetPrivateProfileXxx</code> APIs and the parameters used. Doing
so provides us with this list of parameters, expected to be found in <code class="language-plaintext highlighter-rouge">.\3d.ini</code> (relative to the CWD). These are mostly
loaded in another function called by <code class="language-plaintext highlighter-rouge">CWinAppEntrypoint</code>: <code class="language-plaintext highlighter-rouge">FUN_0042e2e0</code>, which we can rename to <code class="language-plaintext highlighter-rouge">LoadSettings</code>:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[MazePath]</span>
<span class="py">pakpath</span> <span class="p">=</span>       <span class="c">; String
</span><span class="s">datapath =      ; String</span>
<span class="py">diskpath</span> <span class="p">=</span>      <span class="c">; String
</span><span class="s">lastfile =      ; String</span>
<span class="py">room</span> <span class="p">=</span>          <span class="c">; String
</span><span class="s">usepakfile = 0  ; Integer. In practice it is used as a boolean,</span>
                <span class="c">; where 0 is FALSE, and anything else is TRUE.
</span>
<span class="nn">[Render]</span>
<span class="py">fullscreen</span> <span class="p">=</span> <span class="s">1  ; Integer</span>
<span class="py">winsize</span> <span class="p">=</span> <span class="s">10    ; Integer</span>
<span class="py">textdetail</span> <span class="p">=</span> <span class="s">10 ; Integer</span>
</code></pre></div></div>

<p>Let’s see if this works. Let’s just create a <code class="language-plaintext highlighter-rouge">C:\MathInvaders\3d.ini</code> and as a simple test, we’ll set
<code class="language-plaintext highlighter-rouge">[Render]</code>→<code class="language-plaintext highlighter-rouge">fullscreen</code> to <code class="language-plaintext highlighter-rouge">0</code>, and…</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/guest%20os_000.png" alt="It works! ...sorta." /></p>

<p>Well… Sort of. Ok, the game doesn’t actually run, and there’s a weird white space at the bottom of the window. But
we’ve proven it works! But what’s intriguing to me is the <code class="language-plaintext highlighter-rouge">[MazePath]</code> section of the config… I wonder what we could
use <em>those</em> settings for. In particular, the <code class="language-plaintext highlighter-rouge">fullscreen</code> setting is loaded into a global variable that we’ll call
<code class="language-plaintext highlighter-rouge">gFullscreen</code> - this factors into to code processing some very interesting strings about an “editor mode”… I wonder
if we can activate that?</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">gFullscreen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x334</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">_sprintf</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__Math_Invaders_</span><span class="o">-</span><span class="n">_NO_ACTIVE_LEVEL_0049585c</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">__splitpath</span><span class="p">(</span><span class="o">&amp;</span><span class="n">DAT_0049c7c8</span><span class="p">,</span><span class="n">local_1fc</span><span class="p">,</span><span class="n">local_1f4</span><span class="p">,</span><span class="n">local_12c</span><span class="p">,</span><span class="n">local_10c</span><span class="p">);</span>
		<span class="n">_sprintf</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__Math_Invaders_</span><span class="o">-</span><span class="n">_</span><span class="err">'</span><span class="o">%</span><span class="n">s</span><span class="err">'</span><span class="n">_004957f4</span><span class="p">,</span><span class="n">local_12c</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x3714</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_</span><span class="o">***</span><span class="n">_EDITOR_MODE_</span><span class="o">***</span><span class="n">_00495810</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">iVar1</span> <span class="o">=</span> <span class="n">CSplitterWnd</span><span class="o">::</span><span class="n">IsTracking</span><span class="p">((</span><span class="n">CSplitterWnd</span> <span class="o">*</span><span class="p">)(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x2e0</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_Running</span><span class="p">...</span><span class="n">_0049584c</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="nl">FID_conflict:</span><span class="n">_strcat</span><span class="p">(</span><span class="n">local_104</span><span class="p">,</span><span class="n">s__</span><span class="o">-</span><span class="n">_Paused</span><span class="p">,</span><span class="n">_press_</span><span class="sc">'p'</span><span class="n">_to_resume</span><span class="p">.</span><span class="n">_00495828</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">CWnd</span><span class="o">::</span><span class="n">SetWindowTextA</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="n">local_104</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next time!</p>

<!-- References -->]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><category term="ghidra" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. In this part, we’ll investigate disassembling and reverse engineering the binary to identify an undocumented settings file format.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-II/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reverse Engineering a Windows 95 Game</title><link href="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html" rel="alternate" type="text/html" title="Reverse Engineering a Windows 95 Game" /><published>2023-02-23T00:00:00-05:00</published><updated>2023-02-23T00:00:00-05:00</updated><id>https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I</id><content type="html" xml:base="https://sidneys1.github.io/reverse-engineering/2023/02/23/reverse-engineering-a-win95-game-I.html"><![CDATA[<!-- cSpell:words Schuster DirectX autorun pakrat -->
<!-- cSpell:ignore PAKS AMOVIE DSETUP DSETUPE DSETUPJ MATHINV SSPUNINS Bmps Ihighsco RIFFÀ -->

<p>I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played
as a kid: <a href="https://archive.org/details/MathInvaders">Math Invaders</a>. Let’s reverse engineer the game a bit and see what
we can find; are there any secrets, unused assets, etc?</p>

<!--more-->
<hr />

<h1 id="poking-around-the-cd">Poking around the CD</h1>

<p>Installing Math Invaders merely copies the EXE to <code class="language-plaintext highlighter-rouge">C:\MathInvaders</code> (or your chosen installation path). When run, the
executable checks if you have the CD inserted (searching for a path stored in the registry during installation). So in
practice, all of the resources can be found on the CD and the CD only.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>📁 DIRECTX
📁 PAKS
📁 WIN.31
📁 WIN.95
📄 AMOVIE.EX_
🔧 AUTORUN.INF
📕 DSETUP.DLL
📕 DSETUP6E.DLL
📕 DSETUP6J.DLL
📕 DSETUPE.DLL
📕 DSETUPJ.DLL
⚙️ LAUNCH.EXE
📄 MATHINV.EX_
📄 README.TXT
⚙️ SETUP.EXE
⚙️ SPRINT.EXE
📄 SSPUNINS.EX_
</code></pre></div></div>

<p>So, we have a few directories. <code class="language-plaintext highlighter-rouge">PAKS</code> includes the game resources, while the others are all installer files for a
bundled DirectX 4.0 and “Sprint Internet Passport 3.01” (which seems to be an AOL-like service). The remaining files are
largely DLLs to support the various installers, as well as a readme for our game.</p>

<details>
  <summary>Readme Contents, for those interested.</summary>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MATH INVADERS   v1.0
(c) 1997 Simon &amp; Schuster Interactive
__________________________________________________________________

SYSTEM REQUIREMENTS:

 * Windows 95
 * Pentium 100 with 16Mb of RAM
 * 4x CD-ROM
 * DirectX-compatible video running 256 colors or higher
 * Mouse

__________________________________________________________________

INSTALLATION:

NOTE: This game runs only under Windows 95 and requires both DirectX
and Active Movie. During installation, you will be prompted to install
both components. If you already have DirectX or ActiveX, you may be
able to bypass installation of that component.

To Install Math Invaders:

Math Invaders supports Autoplay, so if your CD-ROM drive has Autoplay
enabled, you only need to put the CD-ROM in the drive and click the Install
button on the screen that appears. Installation of both DirectX and Active
Movie is required to play Math Invaders.

If you don't have Autoplay enabled:

1. From the Start Menu, select Run...
2. Click the Browse button and located your CD-ROM drive (usually D:)
3. Double-click on the SETUP.EXE file
4. Click the OK button to bring up the Math Invaders install window.
5. Click the Install button to install Math Invaders.
6. If your system does not have DirectX or Active Movie, click Yes to
   install those components.

After installation you may be asked to reboot your system.

__________________________________________________________________

TO START MATH INVADERS:

Math Invaders supports Autoplay, so if your CD-ROM drive has Autoplay
enabled, you only need to put the CD-ROM in the drive and click the Play
button on the screen that appears.

If you don't have Autoplay enabled:

1. From the Start Menu, select Programs.
2. Choose Math Invaders and then the Math Invaders icon.

__________________________________________________________________

TO UNINSTALL MATH INVADERS:

1. From the Start Menu, select Programs.
2. Choose Math Invaders and then the Uninstall icon.

You can also uninstall Math Invaders from your Control Panel -
Add/Remove Program Items.

__________________________________________________________________

KEYBOARD/MOUSE CONTROLS:

The following list describes the standard keyboard and mouse controls
	(Press F5 to toggle between the two control modes)
	left mouse button			- move in direction of cursor
	Numpad 8				- Move Forward
	Numpad 2				- Move Backward
	Numpad 4				- Rotate to Left
	Numpad 6				- Rotate to Right
	Z					- Slide to left
	X					- Slide to Right
	Alt					- Accelerate Movement
	Numpad 3				- Look Down
	Numpad 9				- Look Up
	Numpad 5				- Center the view
	S					- Jump up
	C					- Crouch down
	Space					- Activate switch or door
	Control or right mouse button		- Fire weapon
	1 - 7					- Switch to weapon 1 - 7
	[					- Switch to previous item
	]					- Switch to next item
	Enter					- Use current item
	Esc					- Exit the game
	TAB					- Toggle Overhead/Player Views

The following list describes the alternate keyboard and mouse controls
	(Press F5 to toggle between the two control modes)
	A					- Move Forward
	Z					- Move Backward
	Left arrow or move mouse to left	- Rotate to Left
	Right arrow or move mouse to right	- Rotate to Right
	Shift					- Slide to left
	X					- Slide to Right
	Alt					- Accelerate Movement
	Up arrow or move mouse to forward	- Look Down
	Down arrow or move mouse to backward	- Look Up
	S					- Jump up
	C					- Crouch down
	Space					- Activate switch or door
	Control or left mouse button		- Fire weapon
	1 - 7					- Switch to weapon 1 - 7
	Right mouse button			- Switch to next weapon
	[					- Switch to previous item
	]					- Switch to next item
	Enter					- Use current item
	Esc					- Exit the game
	TAB					- Toggle Overhead/Player Views


Additional Overhead View Controls
	NumPad 8				- Move camera up
	NumPad 2				- Move camera down
	NumPad 4				- Move camera to left
	NumPad 6				- Move camera to right
	NumPad 7				- Move camera directly behind player
	NumPad +				- Zoom In
	NumPad -				- Zoom Out

Other Controls
	F1					- Save or Restore game
	F2					- Reduce game window size
	F3					- Enlarge game window
	F5					- Toggle between standard and
							alternate controls
	F6					- Toggle between high and low
							detail modes
	F7					- Quick Save
	F8					- Quick Load


__________________________________________________________________

TECHNICAL SUPPORT

We hope that your experience with Math Invaders will be problem-free.
But if you have any technical problems, please call Technical Support at
(303) 739-4020.

</code></pre></div>  </div>

</details>
<p><br /></p>

<p>Upon installing <code class="language-plaintext highlighter-rouge">MATHINV.EX_</code> is copied to the installation directory and renamed to <code class="language-plaintext highlighter-rouge">MATHINV.EXE</code>, of course. Let’s
overlook this file for now and instead take a look in the <code class="language-plaintext highlighter-rouge">PAKS</code> directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>📁 LEVELS
📁 VIDEO
📄 GAME.PAK
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LEVELS</code> contains <code class="language-plaintext highlighter-rouge">LP##.PAK</code> files, where <code class="language-plaintext highlighter-rouge">##</code> is a two-digit number from 01 to 27. Video contains (unsurprisingly)
several AVI files, as this game has a few full motion video “FMV” sequences at startup and shutdown.</p>

<h1 id="pak-files-and-pakrat">PAK Files and <code class="language-plaintext highlighter-rouge">pakrat</code></h1>

<p>Let’s poke at <code class="language-plaintext highlighter-rouge">GAME.PAK</code> in a hex editor. The first ~5K of the <code class="language-plaintext highlighter-rouge">GAME.PAK</code> file looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0000h  56 00 00 00 57 61 76 65 73 5C 43 6C 69 63 6B 2E  V...Waves\Click.
0010h  77 61 76 00 00 00 00 00 00 00 00 00 00 00 00 00  wav.............
0020h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0030h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0040h  00 00 00 00 20 17 00 00 42 6D 70 73 5C 43 75 72  .... ...Bmps\Cur
0050h  73 6F 72 2E 62 6D 70 00 00 00 00 00 00 00 00 00  sor.bmp.........
0060h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0070h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0080h  00 00 00 00 00 00 00 00 E8 32 00 00 42 6D 70 73  ........è2..Bmps
0090h  5C 46 6F 6E 74 2E 62 6D 70 00 00 00 00 00 00 00  \Font.bmp.......
00A0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00B0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00C0h  00 00 00 00 00 00 00 00 00 00 00 00 20 4B 00 00  ............ K..
00D0h  42 6D 70 73 5C 49 68 69 67 68 73 63 6F 2E 62 6D  Bmps\Ihighsco.bm
00E0h  70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  p...............
00F0h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0100h  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
</code></pre></div></div>

<p>And the remainder of the file is various binary data. In fact, immediately after the ~5K run above we see the following
header, immediately recognizable as a <a href="https://en.wikipedia.org/wiki/WAV">Waveform Audio File Format</a> header:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1720h  52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20  RIFFÀ...WAVEfmt
</code></pre></div></div>

<p>This lines up with the file extension of the first string we see at the beginning of the file, <code class="language-plaintext highlighter-rouge">Waves\Click.wav</code>. A
little deduction shows that the ~5K prelude area is structured as follows:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">prelude</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">entry</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
        <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">entries</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or, in english, we have first four bytes (a little-endian unsigned integer) representing the number of resource headers
in the list. This is followed by that number of entries, each of which is a 64-character ASCII string followed by a
four-byte offset into the PAK file where the data for that file resides. We use a little C trick here called a
“<a href="https://en.wikipedia.org/wiki/Flexible_array_member">flexible array member</a>” to index past the end of our C struct.
Note that each entry doesn’t need to store the length of the file - this is calculated from the offset of the next file
in the list or (in the case of the last entry) the end of the <code class="language-plaintext highlighter-rouge">PAK</code> file itself.</p>

<p>Armed with this knowledge, let’s write a simple program to “extract” <code class="language-plaintext highlighter-rouge">PAK</code> files, which we’ll call <code class="language-plaintext highlighter-rouge">pakrat</code>. The program
will take the targeted <code class="language-plaintext highlighter-rouge">PAK</code> file as a command-line argument and extract the contents to the current working directory.
Let’s get started with this:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cerrno&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Usage: "</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" FILE</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="s">"PAKrat 0.1</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>


	<span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="nf">file</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">in</span> <span class="o">|</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error opening '"</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"': "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">end</span><span class="p">);</span>
	<span class="kt">size_t</span> <span class="n">file_size</span> <span class="o">=</span> <span class="n">file</span><span class="p">.</span><span class="n">tellg</span><span class="p">();</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"File '"</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"' size: "</span> <span class="o">&lt;&lt;</span> <span class="n">file_size</span> <span class="o">&lt;&lt;</span> <span class="s">" Bytes</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Running it against <code class="language-plaintext highlighter-rouge">GAME.PAK</code> produces:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537
</code></pre></div></div>

<p>So far so good! Continuing on (you’ll also need to <code class="language-plaintext highlighter-rouge">#include &lt;iomanip&gt;</code>, and add the <code class="language-plaintext highlighter-rouge">struct prelude</code> we defined
before):</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Let's start by getting the number of entries, so we know how large a buffer to allocate</span>
<span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">));</span>
<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">));</span>
<span class="kt">uint32_t</span> <span class="n">count</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"File contains "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span> <span class="o">&lt;&lt;</span> <span class="s">" entries:</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

<span class="c1">// Reallocate to the appropriate size.</span>
<span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">realloc</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="o">::</span><span class="n">entry</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">));</span>
<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">buffer</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prelude</span><span class="o">::</span><span class="n">entry</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">);</span>

<span class="c1">// Interpret by casting to a prelude, then print all the files and their offsets.</span>
<span class="n">prelude</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">prelude</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0x"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setfill</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">offset</span>
			  <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We now output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav
0x000032e8 Bmps\Cursor.bmp
0x00004b20 Bmps\Font.bmp
0x00009a58 Bmps\Ihighsco.bmp
--- ✂️ ---
</code></pre></div></div>

<p>Excellent! Let’s refactor that last for loop a bit though:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Interpret by casting to a prelude, gather, then print all the files and their offsets.</span>
<span class="n">prelude</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">prelude</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;&gt;</span> <span class="n">entries</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="k">auto</span> <span class="o">&amp;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
	<span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">prev</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">prev</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span> <span class="n">entry</span><span class="p">.</span><span class="n">offset</span> <span class="o">-</span> <span class="n">prev</span><span class="p">.</span><span class="n">offset</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">auto</span><span class="o">&amp;</span> <span class="n">last</span> <span class="o">=</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">last</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">last</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span> <span class="n">file_size</span> <span class="o">-</span> <span class="n">last</span><span class="p">.</span><span class="n">offset</span><span class="p">));</span>
</code></pre></div></div>

<p>There, now we have made a more manageable list, including sizes. Let’s add some code to print it out. Sorry for the
<code class="language-plaintext highlighter-rouge">std::ios</code> cruft, formatting C++ streams is a constant annoyance:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">ios</span> <span class="n">old_state</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>
	<span class="n">old_state</span><span class="p">.</span><span class="n">copyfmt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"0x"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setfill</span><span class="p">(</span><span class="sc">'0'</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
			  <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">.</span><span class="n">copyfmt</span><span class="p">(</span><span class="n">old_state</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" Bytes</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- ✂️ ---
</code></pre></div></div>

<p>Nearly there! The last push is just to extract the files (you’ll want to add <code class="language-plaintext highlighter-rouge">#include &lt;filesystem&gt;</code> for filesystem
operations and <code class="language-plaintext highlighter-rouge">#include &lt;algorithm&gt;</code> for <code class="language-plaintext highlighter-rouge">std::replace</code>)!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Extract files</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">char</span><span class="o">*</span> <span class="n">path_str</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>

	<span class="c1">// Replace Windows path separators</span>
	<span class="n">std</span><span class="o">::</span><span class="n">replace</span><span class="p">(</span><span class="n">path_str</span><span class="p">,</span> <span class="n">path_str</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path_str</span><span class="p">),</span> <span class="sc">'\\'</span><span class="p">,</span> <span class="sc">'/'</span><span class="p">);</span>

	<span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">path</span> <span class="n">path</span><span class="p">(</span><span class="n">path_str</span><span class="p">);</span>
	<span class="k">auto</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">filename</span><span class="p">();</span>
	<span class="k">auto</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="n">parent_path</span><span class="p">();</span>

	<span class="c1">// Create parent folder(s) (if needed)</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parent</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">exists</span><span class="p">(</span><span class="n">parent</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Creating directory "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">quoted</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="n">std</span><span class="o">::</span><span class="n">filesystem</span><span class="o">::</span><span class="n">create_directories</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Creating file "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">quoted</span><span class="p">(</span><span class="n">path_str</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="nf">out_file</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">std</span><span class="o">::</span><span class="n">fstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">out_file</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error creating file: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">continue</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// Seek to the correct location and copy the file in 1KiB chunks</span>
	<span class="n">file</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
	<span class="kt">uint32_t</span> <span class="n">to_read</span> <span class="o">=</span> <span class="n">length</span><span class="p">;</span>
	<span class="k">do</span> <span class="p">{</span>
		<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
		<span class="k">auto</span> <span class="n">chunk</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">((</span><span class="kt">size_t</span><span class="p">)</span><span class="n">to_read</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
		<span class="n">to_read</span> <span class="o">-=</span> <span class="n">chunk</span><span class="p">;</span>
		<span class="n">file</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span>
		<span class="n">out_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">to_read</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PAKrat 0.1
File '../GAME.PAK' size: 22984537 Bytes
File contains 86 entries:
0x00001720 Waves\Click.wav 7112 Bytes
0x000032e8 Bmps\Cursor.bmp 6200 Bytes
0x00004b20 Bmps\Font.bmp 20280 Bytes
0x00009a58 Bmps\Ihighsco.bmp 346040 Bytes
--- ✂️ ---
Creating directory "Waves"
Creating file "Waves/Click.wav"
Creating directory "Bmps"
Creating file "Bmps/Cursor.bmp"
Creating file "Bmps/Font.bmp"
Creating file "Bmps/Ihighsco.bmp"
--- ✂️ ---
</code></pre></div></div>

<p>And that’s it! You can find the full source code <a href="https://github.com/Sidneys1/PAKrat">in this GitHub repository</a>. Here’s
a sample of an extracted asset! This is <code class="language-plaintext highlighter-rouge">Waves\Glose2a.wav</code>, an one of 3 randomized clips that play when you lose a
level:</p>

<audio controls="">
	<source src="https://sidneys1.github.io/audio/reverse-engineering-a-win95-game-I/Glose2a.wav" type="" />
	Your browser does not support the audio element.
</audio>

<p>There are also GUI elements in <code class="language-plaintext highlighter-rouge">Bmps</code>, for example the weapon sprite sheet <code class="language-plaintext highlighter-rouge">Weapons.bmp</code>:</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/Weapons.bmp" alt="weapon sprite sheet" /></p>

<p>There’s even an exit splash screen graphic that is unused, that indicates that the game probably had a shareware or beta
release:</p>

<p><img src="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/Exit1.bmp" alt="beta exit splash" /></p>

<hr />

<p>Now, attentive readers may have noticed something; If the <code class="language-plaintext highlighter-rouge">PAK</code> prelude is 4+(68×86)=5852 Bytes, but the first asset
(<code class="language-plaintext highlighter-rouge">Waves\Click.wav</code>) starts at <code class="language-plaintext highlighter-rouge">0x1720</code> (Byte 5920), then what is in the interstitial 68 bytes? Let’s take a look:</p>

<ul>
  <li>Last entry <span class="highlight-1">name</span> and <span class="highlight-2">offset</span>.</li>
  <li>Fist <span class="highlight-3">file data</span>.</li>
</ul>

<div class="language-plaintext highlighter-rouge">
<div class="highlight">
<pre class="highlight">
<code>1690h  00 00 00 00 D5 91 50 01 <span class="highlight-1">57 61 76 65 73 5C 47 6C</span>  ....Õ‘P.<span class="highlight-1">Waves\Gl</span>
16A0h  <span class="highlight-1">6F 73 65 33 62 2E 77 61 76 00 00 00 00 00 00 00</span>  <span class="highlight-1">ose3b.wav.......</span>
16B0h  <span class="highlight-1">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span class="highlight-1">................</span>
16C0h  <span class="highlight-1">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span>  <span class="highlight-1">................</span>
16D0h  <span class="highlight-1">00 00 00 00 00 00 00 00</span> <span class="highlight-2">B7 21 5A 01</span> 00 00 00 00  <span class="highlight-1">........</span><span class="highlight-2">·!Z.</span>....
16E0h  BC 42 59 81 00 00 00 00 8C 83 59 81 8C 83 59 81  ¼BY.....ŒƒY.ŒƒY.
16F0h  88 83 59 81 3B AE F7 BF 00 20 56 81 00 00 00 00  ˆƒY�;®÷¿. V.....
1700h  8C 83 59 81 DB AE F7 BF 8C 83 59 81 DE DA F7 BF  ŒƒY.Û®÷¿ŒƒY.ÞÚ÷¿
1710h  8C 83 59 81 8C 83 59 81 E2 13 F7 BF 59 B7 5E 01  ŒƒY.ŒƒY.â.÷¿Y·^.
1720h  <span class="highlight-3">52 49 46 46 C0 1B 00 00 57 41 56 45 66 6D 74 20</span>  <span class="highlight-3">RIFFÀ...WAVEfmt</span></code>
</pre>
</div>
</div>

<p>And honestly… I don’t know. This space being the same length as the other asset headers makes me think whatever they
used to create these <code class="language-plaintext highlighter-rouge">PAK</code> files has an off-by-one error, and just wrote an extra entry past the end of their buffer
into uninitialized (or maybe stack/heap) memory. Or, it could be a tightly packed block of some unknown flags or
parameters to the game engine.</p>

<h3 id="a-short-aside-about-pak">A Short Aside About <code class="language-plaintext highlighter-rouge">PAK</code></h3>

<p>Digging further into the <code class="language-plaintext highlighter-rouge">LP##.PAK</code> file for specific levels (in this case, <code class="language-plaintext highlighter-rouge">LP01.PAK</code>) reveals additional asset types:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">📂 Anims\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">Anims.lst</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">📂 Levels\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">GameData.dat</code></li>
      <li>📄 <code class="language-plaintext highlighter-rouge">Lp01.lev</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">📂 Mazes\</code>
    <ul>
      <li>📂 <code class="language-plaintext highlighter-rouge">LP01\</code>
        <ul>
          <li>📄 <code class="language-plaintext highlighter-rouge">lp01.lws</code></li>
          <li>📄 <code class="language-plaintext highlighter-rouge">rlp01.wad</code></li>
          <li>📄 <code class="language-plaintext highlighter-rouge">wlp01.bsp</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">Objects\</code>
    <ul>
      <li><em>A variety of <code class="language-plaintext highlighter-rouge">.bsp</code>/<code class="language-plaintext highlighter-rouge">.BSP</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">Waves\</code>
    <ul>
      <li><em>A variety of <code class="language-plaintext highlighter-rouge">.WAV</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">anims\</code> <em>(note the case sensitivity)</em>
    <ul>
      <li><em>58 directories, themselves containing <code class="language-plaintext highlighter-rouge">.pcx</code> and <code class="language-plaintext highlighter-rouge">.pcxF</code> files.</em></li>
    </ul>
  </li>
  <li>📂 <code class="language-plaintext highlighter-rouge">textures\</code>
    <ul>
      <li>📄 <code class="language-plaintext highlighter-rouge">Lp01.lst</code></li>
      <li><em>1345 additional <code class="language-plaintext highlighter-rouge">.pcx</code> and <code class="language-plaintext highlighter-rouge">.pcxF</code> files.</em></li>
    </ul>
  </li>
</ul>

<p>Now wait a second… <code class="language-plaintext highlighter-rouge">.pak</code>, <code class="language-plaintext highlighter-rouge">.bsp</code>, <code class="language-plaintext highlighter-rouge">.wad</code>… Sounds an awful lot like
<a href="https://en.wikipedia.org/wiki/Id_Tech#id_Tech_2">id Tech 2</a> (the Quake engine)! However, digging into it, id’s <code class="language-plaintext highlighter-rouge">pak</code>
format is different, and these <code class="language-plaintext highlighter-rouge">wad</code> and <code class="language-plaintext highlighter-rouge">bsp</code> files won’t open in any Tech 2 editors I can find. So perhaps the
developers of this engine merely took a lot of inspiration, and/or heavily modified and simplified these formats away
from the Tech 2 specifications.</p>

<p>This engine is almost a midway point (in capability) between Tech 1 (DOOM) and Tech 2 (Quake). It supports angled floors
and vertical viewing angle like Quake, but also only supports sprite-based creatures like Doom.</p>

<hr />

<p>In the next part, we’ll explore trying to reverse engineer where this game stores its settings, and see if we can’t
uncover some secrets in the binary itself.</p>]]></content><author><name>Sidneys1</name></author><category term="reverse-engineering" /><category term="programming" /><category term="reverse-engineering" /><summary type="html"><![CDATA[I recently rediscovered an obscure 1997 Simon &amp; Schuster / Marshall Media edutainment game for Windows 95 that I played as a kid: Math Invaders. Let’s reverse engineer the game a bit and see what we can find; are there any secrets, unused assets, etc?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" /><media:content medium="image" url="https://sidneys1.github.io/images/reverse-engineering-a-win95-game-I/hero.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PowerShell Profile Instant Prompt</title><link href="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html" rel="alternate" type="text/html" title="PowerShell Profile Instant Prompt" /><published>2022-09-29T00:00:00-04:00</published><updated>2022-09-29T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/09/29/powershell-profile-instant-prompt.html"><![CDATA[<p>Recently I began using <a href="https://ohmyposh.dev/">Oh My Posh</a> for PowerShell 7+ (pwsh). One thing I noticed however is that
it takes upward of a second to activate in my pwsh <code class="language-plaintext highlighter-rouge">$profile</code>. Let’s dig in and see if we can’t improve that.</p>

<!--more-->

<p>First, let’s establish a baseline - after <a href="https://ohmyposh.dev/docs/installation/windows">installing Oh My Posh</a> (say,
with WinGet) we’re instructed to add the line <code class="language-plaintext highlighter-rouge">oh-my-posh init pwsh | Invoke-Expression</code> to our pwsh <code class="language-plaintext highlighter-rouge">$profile</code>. We can
investigate the cost of this with a handy pwsh package <code class="language-plaintext highlighter-rouge">PSProfiler</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w">
</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0734463 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     1     2    00:00.0234282 Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     1     3    00:00.0011258 Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     1     4    00:00.0016107 Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000</span><span class="w">
</span><span class="c">#     1     6    00:00.3770726 oh-my-posh init pwsh | Invoke-Expression</span><span class="w">
</span><span class="c">#     1     7    00:00.0005995 Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     1     8    00:00.0005577 Enable-PoshLineError</span><span class="w">
</span></code></pre></div></div>

<p>You can see that out of all the commands I have in my profile, oh-my-posh init is taking an order of magnitude longer
than the others. When my system is under load and I <em>really need that terminal now</em>, this causes friction. Let’s see
what exactly <code class="language-plaintext highlighter-rouge">oh-my-posh init pwsh</code> is outputting that gets interpreted by <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> (note that I’ve inserted
<code class="language-plaintext highlighter-rouge">%LOCALAPPDATA%</code> and <code class="language-plaintext highlighter-rouge">&lt;some config path&gt;</code> for brevity):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">oh-my-posh</span><span class="w"> </span><span class="nx">init</span><span class="w"> </span><span class="nx">pwsh</span><span class="w">
</span><span class="c"># (@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='&lt;some config path&gt;' --print) -join "`n") | Invoke-Expression</span><span class="w">
</span></code></pre></div></div>

<p>It looks like it just calls itself again! We can skip that first step entirely by just copy-and-pasting this output into
our original profile. Let’s measure things again now that we’ve made this change:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0790705 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     1     2    00:00.0279149 Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     1     3    00:00.0010231 Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     1     4    00:00.0011608 Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000</span><span class="w">
</span><span class="c">#     2     6    00:00.0694422 (@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh init pwsh ...</span><span class="w">
</span><span class="c">#     1     7    00:00.0006244 Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     1     8    00:00.0005833 Enable-PoshLineError</span><span class="w">

</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Measure-Command</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="nv">$profile</span><span class="w"> </span><span class="p">};}</span><span class="w">

</span><span class="c"># ...</span><span class="w">
</span><span class="c"># TotalMilliseconds : 463.3328</span><span class="w">
</span></code></pre></div></div>

<p>We’ve successfully brought our oh-my-posh invocation down an order of magnitude and shaved a couple hundred milliseconds
off of our profile initialization. But… we can do better. A cool feature of
<a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a> is “instant prompt”, which allows a prompt to show
immediately, even while your profile is still loading. Let’s reproduce this behavior in pwsh.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In our $profile...</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSReadLine</span><span class="p">;</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">prompt</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nx">variable:global:ompjob</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c"># snip</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nv">$</span><span class="nn">global</span><span class="p">:</span><span class="nv">ompjob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Start-Job</span><span class="w"> </span><span class="p">{(@(</span><span class="err">&amp;</span><span class="w"> </span><span class="s1">'%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe'</span><span class="w"> </span><span class="err">init</span><span class="w"> </span><span class="err">pwsh</span><span class="w"> </span><span class="err">--config=</span><span class="s1">'&lt;some config path&gt;'</span><span class="w"> </span><span class="err">--print</span><span class="p">)</span><span class="w"> </span><span class="o">-join</span><span class="w"> </span><span class="s2">"</span><span class="se">`n</span><span class="s2">"</span><span class="p">)};</span><span class="w">
  </span><span class="n">write-host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Blue</span><span class="w"> </span><span class="s2">"Loading </span><span class="se">`$</span><span class="s2">profile in the background..."</span><span class="w">
  </span><span class="n">Write-Host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Green</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="s2">"  </span><span class="si">$(</span><span class="nv">$executionContext</span><span class="o">.</span><span class="nf">SessionState</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">CurrentLocation</span><span class="si">)</span><span class="s2"> "</span><span class="o">.</span><span class="nf">replace</span><span class="p">(</span><span class="bp">$HOME</span><span class="p">,</span><span class="w"> </span><span class="s1">'~'</span><span class="p">);</span><span class="w">
  </span><span class="n">Write-Host</span><span class="w"> </span><span class="nt">-ForegroundColor</span><span class="w"> </span><span class="nx">Red</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="s2">"ᓚᘏᗢ"</span><span class="w">
  </span><span class="kr">return</span><span class="w"> </span><span class="s2">" "</span><span class="p">;</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>First, we create a new <code class="language-plaintext highlighter-rouge">prompt</code> function; unsurprisingly this is the function that pwsh calls to render your prompt. Our
custom <code class="language-plaintext highlighter-rouge">prompt</code> function will first check if there’s a global variable named <code class="language-plaintext highlighter-rouge">ompjob</code> - this is going to be a background
job in which we execute oh-my-posh. The first time <code class="language-plaintext highlighter-rouge">prompt</code> runs this variable will be unset, and so our <code class="language-plaintext highlighter-rouge">if</code> will be
skipped, and I’ve snipped it for readability. We’ll come back to it.</p>

<p>Now, if the variable is unset, we’ll set it to a new background job that executes our <code class="language-plaintext highlighter-rouge">oh-my-posh</code> invocation, but
without the <code class="language-plaintext highlighter-rouge">Invoke-Expression</code>. This will let the job’s output be the text printed by oh-my-posh that we can consume
with <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> later. Finally, we print out a nice little prompt - not as fancy as <code class="language-plaintext highlighter-rouge">oh-my-posh</code>’s, but it’ll
do, <em>and</em> it’ll display almost instantly.</p>

<p>Finally, let’s fill in the <code class="language-plaintext highlighter-rouge">if</code>-block for when the global variable <em>is</em> set (on the second invocation of <code class="language-plaintext highlighter-rouge">prompt</code>):</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSReadLine</span><span class="p">;</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">prompt</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nx">variable:global:ompjob</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Receive-Job</span><span class="w"> </span><span class="nt">-Wait</span><span class="w"> </span><span class="nt">-AutoRemoveJob</span><span class="w"> </span><span class="nt">-Job</span><span class="w"> </span><span class="nv">$</span><span class="nn">global</span><span class="p">:</span><span class="nv">ompjob</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Invoke-Expression</span><span class="p">;</span><span class="w">
    </span><span class="n">Remove-Variable</span><span class="w"> </span><span class="nx">ompjob</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">Global</span><span class="p">;</span><span class="w">
    </span><span class="n">Enable-PoshTransientPrompt</span><span class="w">
    </span><span class="nx">Enable-PoshLineError</span><span class="w">

    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-EditMode</span><span class="w"> </span><span class="nx">Windows</span><span class="w">
    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-PredictionSource</span><span class="w"> </span><span class="nx">HistoryAndPlugin</span><span class="w">
    </span><span class="n">Set-PSReadLineOption</span><span class="w"> </span><span class="nt">-PredictionViewStyle</span><span class="w"> </span><span class="nx">InlineView</span><span class="w">

    </span><span class="p">[</span><span class="n">console</span><span class="p">]::</span><span class="n">InputEncoding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">console</span><span class="p">]::</span><span class="n">OutputEncoding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Text.UTF8Encoding</span><span class="w">
    </span><span class="kr">return</span><span class="w"> </span><span class="n">prompt</span><span class="p">;</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="c"># snip</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>First, we get the output from the <code class="language-plaintext highlighter-rouge">ompjob</code>, and we <code class="language-plaintext highlighter-rouge">Invoke-Expression</code> it. In doing so, <code class="language-plaintext highlighter-rouge">oh-my-posh</code> redefines our
<code class="language-plaintext highlighter-rouge">prompt</code> function. We’ll then initialize some other settings within <code class="language-plaintext highlighter-rouge">PSReadLine</code> and <code class="language-plaintext highlighter-rouge">oh-my-posh</code>. Finally, we return
whatever <code class="language-plaintext highlighter-rouge">oh-my-posh</code> produces in its redefined <code class="language-plaintext highlighter-rouge">prompt</code> function, and we’re done! Let’s profile this as well:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSProfiler</span><span class="p">;</span><span class="w"> </span><span class="n">Measure-Script</span><span class="w"> </span><span class="nv">$profile</span><span class="p">;}</span><span class="w">

</span><span class="c"># Count  Line       Time Taken Statement</span><span class="w">
</span><span class="c"># -----  ----       ---------- ---------</span><span class="w">
</span><span class="c">#     1     1    00:00.0789758 Import-Module PSReadLine;</span><span class="w">
</span><span class="c">#     0     2    00:00.0000000</span><span class="w">
</span><span class="c">#     0     3    00:00.0000000 function prompt {</span><span class="w">
</span><span class="c">#     0     4    00:00.0000000   if (Test-Path variable:global:ompjob) {</span><span class="w">
</span><span class="c">#     0     5    00:00.0000000     Receive-Job -Wait -AutoRemoveJob -Job $global:ompjob | Invoke-Expression;</span><span class="w">
</span><span class="c">#     0     6    00:00.0000000     Remove-Variable ompjob -Scope Global;</span><span class="w">
</span><span class="c">#     0     7    00:00.0000000     Enable-PoshTransientPrompt</span><span class="w">
</span><span class="c">#     0     8    00:00.0000000     Enable-PoshLineError</span><span class="w">
</span><span class="c">#     0     9    00:00.0000000</span><span class="w">
</span><span class="c">#     0    10    00:00.0000000     Set-PSReadLineOption -EditMode Windows</span><span class="w">
</span><span class="c">#     0    11    00:00.0000000     Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><span class="w">
</span><span class="c">#     0    12    00:00.0000000     Set-PSReadLineOption -PredictionViewStyle InlineView</span><span class="w">
</span><span class="c">#     0    13    00:00.0000000</span><span class="w">
</span><span class="c">#     0    14    00:00.0000000     [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding</span><span class="w">
</span><span class="c">#     0    15    00:00.0000000     return prompt;</span><span class="w">
</span><span class="c">#     0    16    00:00.0000000   }</span><span class="w">
</span><span class="c">#     0    17    00:00.0000000   $global:ompjob = Start-Job {(@(&amp; '%LOCALAPPDATA%/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh ...</span><span class="w">
</span><span class="c">#     0    18    00:00.0000000   write-host -ForegroundColor Blue "Loading `$profile in the background..."</span><span class="w">
</span><span class="c">#     0    19    00:00.0000000   Write-Host -ForegroundColor Green -NoNewline "  $($executionContext.SessionState.Path.CurrentLocation) ".replace($HOME, '~');</span><span class="w">
</span><span class="c">#     0    20    00:00.0000000   Write-Host -ForegroundColor Red -NoNewline "ᓚᘏᗢ"</span><span class="w">
</span><span class="c">#     0    21    00:00.0000000   return " ";</span><span class="w">
</span><span class="c">#     0    22    00:00.0000000 }</span><span class="w">

</span><span class="o">&amp;</span><span class="w"> </span><span class="n">pwsh.exe</span><span class="w"> </span><span class="nt">-NoProfile</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="p">{</span><span class="n">Measure-Command</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="nv">$profile</span><span class="w"> </span><span class="p">};}</span><span class="w">

</span><span class="c"># ...</span><span class="w">
</span><span class="c"># TotalMilliseconds : 101.5553</span><span class="w">
</span></code></pre></div></div>

<p>Wow! We’ve almost completely eliminated the overhead of importing our profile, and pushed that execution time into the
background while a user is typing in their first prompt and digesting its output. I’d move the
<code class="language-plaintext highlighter-rouge">Import-Module PSReadLine</code> into the background as well, except that module doesn’t import correctly when you do this.</p>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="powershell" /><summary type="html"><![CDATA[Recently I began using Oh My Posh for PowerShell 7+ (pwsh). One thing I noticed however is that it takes upward of a second to activate in my pwsh $profile. Let’s dig in and see if we can’t improve that.]]></summary></entry><entry><title type="html">How I Built This Website, And How to Do It Yourself</title><link href="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html" rel="alternate" type="text/html" title="How I Built This Website, And How to Do It Yourself" /><published>2022-08-22T00:00:00-04:00</published><updated>2022-08-22T00:00:00-04:00</updated><id>https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website</id><content type="html" xml:base="https://sidneys1.github.io/programming/2022/08/22/how-I-built-this-website.html"><![CDATA[<p>Sidneys1.com is built statically using <a href="https://jekyllrb.com/">Jekyll</a>, and then published on the world wide web, GitHub
Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Let’s walk through
it step by step. We’ll be looking into (over the course of several posts):</p>

<ul>
  <li>Building a website with Jekyll</li>
  <li>Hosting on NearlyFreeSpeech.net</li>
  <li>Customizing the site layout and adding useful features</li>
  <li>Hosting on GitHub Pages</li>
  <li>Hosting on IPFS</li>
  <li>Hosting on Tor</li>
</ul>

<!--more-->

<h2 id="getting-started-with-jekyll">Getting Started With Jekyll</h2>

<p>I use a Windows PC, and I find that the Jekyll environment is easier to set up under the
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux</a>, so that’s what I’ll be using going
forward in this post. First, we’ll install Ruby via your package manager - Ubuntu 20.04 has Ruby 2.7 available on apt
via <code class="language-plaintext highlighter-rouge">apt install ruby</code>. Next we’ll use the Ruby package manager, <code class="language-plaintext highlighter-rouge">gem</code> to install both Jekyll and Bundler:
<code class="language-plaintext highlighter-rouge">gem install bundler jekyll</code>. Finally, you can create a new Jekyll site with <code class="language-plaintext highlighter-rouge">jekyll new sitename</code>.</p>

<p>Once inside the new site folder, you can generate and serve your page with <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>! This will create
a development server on <code class="language-plaintext highlighter-rouge">http://localhost:4000</code>. Let’s quickly talk about how Jekyll works:</p>

<ol>
  <li>You create Markdown or HTML files in your site’s folder for each post you wish to make.</li>
  <li>Jekyll processes these files (along with some templates - we’ll get to these later) to generate static HTML files.</li>
  <li>These static HTML files (in <code class="language-plaintext highlighter-rouge">_site</code>) are what you want to put on your web hosting! It’s all static, so you don’t need
anything fancy like server-side PHP or client-side Angular or React.</li>
</ol>

<p>To simplify the build-preview and build-release process, let’s make a simple Makefile. GNU Make is a tool that allows
you to define simple build steps, and then figures out the interdependencies between these steps for you. Let’s take
a look:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">all</span><span class="o">:</span> <span class="nf">build</span>

<span class="nl">build</span><span class="o">:</span> <span class="nf">_site/</span>

<span class="nl">serve</span><span class="o">:</span>
	bundle <span class="nb">exec </span>jekyll serve <span class="nt">--watch</span> <span class="nt">--livereload</span> <span class="nt">--force_polling</span> <span class="nt">--drafts</span> <span class="nt">--destination</span> _site_live/

<span class="nl">_site/</span><span class="o">:</span>
	<span class="nb">env </span><span class="nv">JEKYLL_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>jekyll build

<span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-rf</span> _site/
</code></pre></div></div>

<p>Let’s break down each of these sections:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">all: build</code>: “all” is the default rule run when you execute <code class="language-plaintext highlighter-rouge">make</code>. This line says when “all” is run, run “build”
first.</li>
  <li><code class="language-plaintext highlighter-rouge">build: _site/</code>: when the “build” rule is run, we depend on “_site/” being built first.</li>
  <li><code class="language-plaintext highlighter-rouge">serve: ...</code>: If you execute <code class="language-plaintext highlighter-rouge">make serve</code>, this rule is triggered. Make will run the <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve ...</code>
command we’ve listed. The parameters included are:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--watch</code>: live-rebuild any changes made to the posts as you edit them (very useful!).</li>
      <li><code class="language-plaintext highlighter-rouge">--livereload</code>: use LiveReload to automatically refresh your browser when changes are rebuilt.</li>
      <li><code class="language-plaintext highlighter-rouge">--force_polling</code>: this is a workaround for some WSL bugs. See
<a href="https://github.com/Microsoft/BashOnWindows/issues/216">this WSL issue</a>.</li>
      <li><code class="language-plaintext highlighter-rouge">--drafts</code>: include posts under the <code class="language-plaintext highlighter-rouge">_drafts</code> folder (this is where you can put in-progress posts).</li>
      <li><code class="language-plaintext highlighter-rouge">--destination _site_live/</code>: this directs the <code class="language-plaintext highlighter-rouge">serve</code> command to build the static output under a separate folder
than the normal <code class="language-plaintext highlighter-rouge">_site/</code> rule. This way we can’t accidentally publish our live preview version of the website - if
we did, it would be broken because all links would lead to <code class="language-plaintext highlighter-rouge">localhost</code> instead of your website’s URL!</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">_site/: ...</code>: this rule matches a file path, <code class="language-plaintext highlighter-rouge">_site</code>, which is Jekyll’s output folder. Make understands file paths
and will know that this rule will build the contents of <code class="language-plaintext highlighter-rouge">_site</code>. Note that we use <code class="language-plaintext highlighter-rouge">env</code> to tell Jekyll to use the
<a href="https://jekyllrb.com/docs/configuration/environments/">“production” environment</a>.</p>

    <p>We’ll never run this rule manually (though you could with <code class="language-plaintext highlighter-rouge">make _site/</code>), but our <code class="language-plaintext highlighter-rouge">build</code> rule depends on this
running, and so Make will automatically run it when needed.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">clean: ...</code>: Run <code class="language-plaintext highlighter-rouge">make clean</code> to invoke this rule - in our case, we just delete the <code class="language-plaintext highlighter-rouge">_site/</code> folder.</li>
</ul>

<h2 id="modifying-the-jekyll-configuration">Modifying the Jekyll Configuration</h2>

<p>Jekyll configuration is stored in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file at the root of our site. There are a couple things in here
we’ll want to adjust before we publish our site to the world wide web. First of course we’ll want to set a few basics:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">title</code>: The name of your site (shown in the header).</li>
  <li><code class="language-plaintext highlighter-rouge">email</code>: A contact email address (shown in the footer).</li>
  <li><code class="language-plaintext highlighter-rouge">url</code>: This one is important - this sets the url used when clicking on absolute links to other pages within your site!</li>
  <li><code class="language-plaintext highlighter-rouge">baseurl</code>: Used in conjunction with <code class="language-plaintext highlighter-rouge">url</code>. The format used is <code class="language-plaintext highlighter-rouge">{url}{baseurl}/path/to/page.html</code>. If you’re hosting
nothing but Jekyll on your website, then leave this blank.</li>
</ul>

<p>And that’s about it! We’ll dig into configuration more when we talk about hosting on Tor and IPFS.</p>

<h2 id="hosting">Hosting</h2>

<p>Ok! Now that we have a (basic) site, how do we host it? Let’s start simple and look at NearlyFreeSpeech.net, whom I’ve
been using for years. They’re cheap, no-nonsense, and don’t have any crazy hidden fees. They also have support for Let’s
Encrypt certificates, making SSL support both easy and automatic. Head on over and set up an account. It’ll walk you
through creating a site (your website hosting) and you can even register and connect the domain name all within their
system. Eventually you’ll find the settings to be able to connect with SSH - enable this and let’s update our Makefile
again. Add this rule to your Makefile:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">publish</span><span class="o">:</span> <span class="nf">_site/</span>
	rsync <span class="nt">--itemize-changes</span> <span class="nt">--checksum</span> <span class="nt">--recursive</span> <span class="nt">--compress</span> <span class="nt">--delete</span> _site/<span class="k">*</span> <span class="nv">$USER</span>@ssh.phx.nearlyfreespeech.net:.
</code></pre></div></div>

<p>Let’s break it down again:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">publish: _site/</code>: when we execute <code class="language-plaintext highlighter-rouge">make publish</code>, we want to make sure the rule to build the <code class="language-plaintext highlighter-rouge">_site/</code> folder runs
first.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">rsync [...] _site/* $USER@ssh.phx.nearlyfreespeech.net:.</code>: we’ll use rsync (a remote file-copying tool) to connect to
our hosting via SSH, synchronizing the contents of <code class="language-plaintext highlighter-rouge">_site</code> with the root (<code class="language-plaintext highlighter-rouge">.</code>) folder of our hosting. You’ll want to
replace <code class="language-plaintext highlighter-rouge">$USER</code> with your NearlyFreeSpeech.net username, of course.</p>

    <p>The options we’re using are:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--itemize-changes</code>: list changes as we go (for clarity).</li>
      <li><code class="language-plaintext highlighter-rouge">--checksum</code>: rely on a file checksum (not timestamps and file size) to determine if files need to be replaced.</li>
      <li><code class="language-plaintext highlighter-rouge">--recursive</code>: recurse into subdirectories of <code class="language-plaintext highlighter-rouge">_site/</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">--compress</code>: HTML is very compressible, so why not save some bandwidth?</li>
      <li><code class="language-plaintext highlighter-rouge">--delete</code>: this allows rsync to remove files on your hosting that are no longer present in your <code class="language-plaintext highlighter-rouge">_site</code> folder.
This can be useful if you rename or delete a file that you no longer want people to be able to access.</li>
    </ul>
  </li>
</ul>

<p>Running <code class="language-plaintext highlighter-rouge">make publish</code> now should build your website and then prompt your for your NearlyFreeSpeech.net password to
connect with SSH. Provide your password and watch as your site is made available!</p>

<h2 id="up-next">Up Next</h2>

<p>In future posts in this series, we’ll look at making some quality of life improvements to the default Jekyll layout and
theme, as well as hosting our site on IPFS!</p>]]></content><author><name>Sidneys1</name></author><category term="programming" /><category term="programming" /><category term="meta" /><summary type="html"><![CDATA[Sidneys1.com is built statically using Jekyll, and then published on the world wide web, GitHub Pages, Tor, and IPFS. How is this all accomplished, and how can you host your own website this way? Let’s walk through it step by step. We’ll be looking into (over the course of several posts): Building a website with Jekyll Hosting on NearlyFreeSpeech.net Customizing the site layout and adding useful features Hosting on GitHub Pages Hosting on IPFS Hosting on Tor]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/how-I-built-this-website/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Retro Roundup 2022</title><link href="https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup.html" rel="alternate" type="text/html" title="Retro Roundup 2022" /><published>2022-06-03T15:26:00-04:00</published><updated>2022-06-03T15:26:00-04:00</updated><id>https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup</id><content type="html" xml:base="https://sidneys1.github.io/retrocomputing/2022/06/03/retro-roundup.html"><![CDATA[<p>Here’s a quick roundup of the retrocomputing projects I worked on and devices I’ve acquired! Since this is the first
year I started collecting retro computers, it will also contain a few items that I’ve had for over a year as well.</p>

<!--more-->

<h2 id="commodore-64">Commodore 64</h2>

<p>That’s right! The O.G. home computer, and still the best-selling single model of computer to date. My particular model
is a brown breadbin.</p>

<h3 id="commodore-1541-disk-drive">Commodore 1541 Disk Drive</h3>

<p>Included with my C64 was a Commodore 1541 5.25” floppy disk drive. Not too much to say here.</p>

<h3 id="games-and-software">Games and Software</h3>

<p>I also received a few 5.25” disks with the C64, however I can’t locate them at this moment. I’ll have to see if I can
find them and then update this post.</p>

<h3 id="line-doubler">Line Doubler</h3>

<p>My initial attempts at connecting the C64 up to a modern television were not great - eventually I ordered a cheap line
doubler that accepted breakout RGB input and produced HDMI. I’m honestly unimpressed with this particular model (Amanka
AVI to HDMI) and instead ended up buying a S-Video cable for the C64 and using a CRT television instead - the difference
in picture quality is astounding.</p>

<h3 id="iec2microsd">IEC2MicroSD</h3>

<p>Another convenience purchase, this device allows me to use an SD card as if it were a floppy drive.</p>

<h2 id="commodore-vic-20">Commodore VIC-20</h2>

<p>A more recent purchase, I also acquired a Commodore VIC-20 (revision A or B board). You can see
<a href="https://cbmvic.net/registry/569">my entry on the VIC-20 registry</a>. This VIC currently powers on, but does not output a
video signal. I’m in the processes of figuring out what the problem is. It’s in pretty rough shape, with a few damaged
parts on the case and missing the metallic Commodore VIC-20 badge (of which I’ve ordered a replacement).</p>

<p>This computer came in the original box, amazingly, and included the power adapter (actually soldered on to the
mainboard), several manuals, and the “Invaders” cartridge.</p>

<h2 id="sun-sparcstation-haul">Sun SPARCstation Haul</h2>

<p>Wow - what can I say here? A few months ago I had a reply to a <a href="https://www.freecycle.org/">FreeCycle</a> listing that I’d
posted in search of any early-90’s to late-00’s computers (this search also turned up the Dell CRT described below).
The person who messaged me had been a small businessowner in the early to mid 90’s, and was looking to get rid of some
of their server room equipment that they’d been holding on to in a storage unit. I hastily agreed and a few months later
I went to pick up quite the haul:</p>

<ul>
  <li>A WYSE CRT Serial Terminal</li>
  <li>A Nokia 447W CRT Monitor</li>
  <li>A Sun Microsystems PS/2 keyboard</li>
  <li>A Compaq Netelligent 100Base-T Class 1 Repeater</li>
  <li>A Dell PowerEdge 650 (this is from 2003, so much later in the company’s lifetime than the majority of this equipment)</li>
  <li>An unlabeled beige PC tower (still need to look inside this one!)</li>
  <li>A Dell PowerEdge 1300 (also circa late 90’s early 00’s)</li>
  <li>An unknown rack-mount box with a “CTC” badge, locking front panel, and perhaps a LCD display (also need to crack this
one open!)</li>
  <li>An Axil Ultima 1 (a third-party Sun SPARCstation Clone, see <a href="https://fcw.com/1996/06/axil-targets-sun-with-sparc-compatible-graphics-computer/238823/">this article</a>)</li>
  <li>A <a href="https://en.wikipedia.org/wiki/SPARCstation_20">Sun SPARCstation 20</a></li>
  <li>A <a href="https://en.wikipedia.org/wiki/Ultra_1">Sun ULTRA 1 Creator</a></li>
</ul>

<h2 id="compaq-deskpro-retro-battlestation">Compaq DeskPro Retro Battlestation</h2>

<p>Another longer-term effort of mine has been to recreate my childhood computer - a Compaq DeskPro that sat on the desk
under my loft bed through most of my formative years. Of course, since we have the benefit of choice, I’m also
“upgrading” it into the ideal late-90’s gaming computer!</p>

<p>The exact model I have is a later model DeskPro EN that is quite a bit smaller in overall form factor to my childhood
PC, however it does have the same general aesthetics that I was looking for. Unfortunately, so far I’ve been unable to
locate the matching Compaq keyboard and 800x600 CRT that I had as a kid as well… Though I did find a period-correct
Compaq PS/2 mouse!</p>

<h3 id="geforce-fx5200">GeForce FX5200</h3>

<p>I acquired a GeForce fx5200 PCI GPU for this computer - I originally had purchased a AGP 5200 by accident, so I suppose
I’ll end up using that in some other computer down the line!</p>

<p>This card works quite well (once the appropriate DirectX 9 drivers are installed) in all of the games I’ve tested so
far.</p>

<h3 id="microsoft-naturals-keyboard">Microsoft Naturals Keyboard</h3>

<p>A flea market find - a $5 Microsoft Naturals keyboard - a funky little beige PS/2 keyboard with an early PS/2→USB
adapter. In lieu of the Compaq keyboard I really want, this works in a pinch.</p>

<h3 id="windows-98-second-edition-third-edition">Windows 98 Second Edition <em>(Third Edition?)</em></h3>

<p>Finally, this computer runs Windows 98 SE with many components of the unofficial “third edition” service pack installed
to add some much-needed quality-of-life features, including USB mass storage device support.</p>

<h3 id="dell-monitor">Dell Monitor</h3>

<p>Not much to say here, another FreeCycle find - while it does support a nice 1024x768 resolution, it has a mid-00’s black
plastic aesthetic that I am not overly fond of.</p>

<h2 id="compaq-presario-700">Compaq Presario 700</h2>

<p>An EBay purchase, this is a early-00’s laptop designed for use with Windows XP. Being from GoodWill it came without an
internal hard drive, which I’ve since replaced. Interestingly, it includes an expansion slot, a 3.5” floppy drive, <em>and</em>
a DVD-ROM and CD R-RW drive.</p>

<h2 id="compaq-presario-1245">Compaq Presario 1245</h2>

<p>Another EBay purchase, this time a slightly older aesthetic laptop with a CD-ROM only drive and a floppy drive.</p>

<h2 id="dell-inspiron-1420">Dell Inspiron 1420</h2>

<p>This is my childhood laptop! Which now probably counts as “retro”. Not much to say here, there are a few missing keys
because I once decided to try the DVORAK layout (which I got quite good at as I remember), but as it turns out Dell
in its infinite wisdom made the indexing keys (F and J) use a reversed butterfly hinge from the rest of the keys,
meaning those didn’t <em>quite</em> fit in the alternate layout an I had to physically cut them to make them fit. Eventually
this physical damage led to them no attaching to the hinge as securely as they should have, and with time a few keys
became lost entirely.</p>]]></content><author><name>Sidneys1</name></author><category term="retrocomputing" /><category term="retrocomputing" /><category term="collecting" /><summary type="html"><![CDATA[Here’s a quick roundup of the retrocomputing projects I worked on and devices I’ve acquired! Since this is the first year I started collecting retro computers, it will also contain a few items that I’ve had for over a year as well.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sidneys1.github.io/images/2022-06-03-retro-roundup/hero.png" /><media:content medium="image" url="https://sidneys1.github.io/images/2022-06-03-retro-roundup/hero.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>